<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Escher</title>
  
  
  <link href="http://liujun1997.github.io/atom.xml" rel="self"/>
  
  <link href="http://liujun1997.github.io/"/>
  <updated>2021-12-15T13:21:37.161Z</updated>
  <id>http://liujun1997.github.io/</id>
  
  <author>
    <name>Escher</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mysql常用函数</title>
    <link href="http://liujun1997.github.io/2021/12/15/Mysql%E5%87%BD%E6%95%B0/"/>
    <id>http://liujun1997.github.io/2021/12/15/Mysql%E5%87%BD%E6%95%B0/</id>
    <published>2021-12-15T13:19:57.000Z</published>
    <updated>2021-12-15T13:21:37.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql-常用函数"><a href="#mysql-常用函数" class="headerlink" title="mysql 常用函数"></a>mysql 常用函数</h2><h4 id="1-字符串函数"><a href="#1-字符串函数" class="headerlink" title="1.字符串函数"></a>1.字符串函数</h4><table><thead><tr><th>函数</th><th>含义</th></tr></thead><tbody><tr><td>lower</td><td>字符串转为小写</td></tr><tr><td>upper</td><td>字符串转为大写</td></tr><tr><td>concat</td><td>字符串连接</td></tr><tr><td>concat_ws</td><td>将多个字符串按指定字符连接</td></tr><tr><td>substr(str,pos,len)</td><td>将字符串按下标分割，下标从0开始</td></tr><tr><td>length</td><td>返回字符串的存储长度</td></tr><tr><td>char_length</td><td>返回字符串的字符个数</td></tr><tr><td>instr(str,substr)</td><td>返回指定字符串substr 在str字符串第一出现的位置</td></tr><tr><td>lpad(str,legth,padstr)</td><td>在源字符str左(右边)边填充padstr到指定长度length</td></tr><tr><td>TRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str), TRIM([remstr FROM] str)</td><td>从源字符str中去除两端，左前缀，右后缀的remstr字符</td></tr><tr><td>REPLACE(str, from_str, to_str)</td><td>源字符串str中查找所有的子串form_str（大小写敏感），找到后使用替代字符串to_str替换它</td></tr><tr><td>LTRIM(str)，RTRIM(str)</td><td>去掉字符串的左边或右边的空格(左对齐、右对齐)</td></tr><tr><td>REPEAT(str, count)</td><td>将字符串str重复count次后返回</td></tr><tr><td>REVERSE(str)</td><td>将字符串str反转后返回</td></tr><tr><td>FORMAT(X,D[,locale])</td><td>格式化数字X，D指定小数位数，locale指定国家语言(默认的locale为en_US)</td></tr><tr><td>LEFT(str, len)，RIGHT(str, len)</td><td>返回最左(右)边的len长度的子串</td></tr><tr><td>STRCMP(expr1,expr2)</td><td>如果两个字符串是一样的则返回0；如果第一个小于第二个则返回-1；否则返回1</td></tr><tr><td>|| 管道连接符</td><td>select 列名1 || 列名2 || 列名3  from  表名; 进行上式连接查询之后，会将查询结果集在一列中显示(字符串连接)，列名是‘列名1 || 列名2 || 列名3’；</td></tr></tbody></table><h4 id="2-日期时间函数"><a href="#2-日期时间函数" class="headerlink" title="2.日期时间函数"></a>2.日期时间函数</h4><ol><li><p>now() 返回当前日期时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> now();</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> now()               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2021</span><span class="number">-12</span><span class="number">-01</span> <span class="number">10</span>:<span class="number">56</span>:<span class="number">05</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>curdate() 返回当前日期</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> curdate();</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> curdate()  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2021</span><span class="number">-12</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>curtime()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> curtime();</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> curtime() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11</span>:<span class="number">04</span>:<span class="number">07</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>date(date) 提取指定字段的日期</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="type">date</span>(now());</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="type">date</span>(now()) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2021</span><span class="number">-12</span><span class="number">-01</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>extract(unit from 字段名) 提取日期/时间表达中指定时间单位</p></li></ol><ul><li><p>unit 单位表</p><table><thead><tr><th align="left">Unit 值</th></tr></thead><tbody><tr><td align="left">MICROSECOND</td></tr><tr><td align="left">SECOND</td></tr><tr><td align="left">MINUTE</td></tr><tr><td align="left">HOUR</td></tr><tr><td align="left">DAY</td></tr><tr><td align="left">WEEK</td></tr><tr><td align="left">MONTH</td></tr><tr><td align="left">QUARTER</td></tr><tr><td align="left">YEAR</td></tr><tr><td align="left">SECOND_MICROSECOND</td></tr><tr><td align="left">MINUTE_MICROSECOND</td></tr><tr><td align="left">MINUTE_SECOND</td></tr><tr><td align="left">HOUR_MICROSECOND</td></tr><tr><td align="left">HOUR_SECOND</td></tr><tr><td align="left">HOUR_MINUTE</td></tr><tr><td align="left">DAY_MICROSECOND</td></tr><tr><td align="left">DAY_SECOND</td></tr><tr><td align="left">DAY_MINUTE</td></tr><tr><td align="left">DAY_HOUR</td></tr><tr><td align="left">YEAR_MONTH</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">extract</span>(<span class="keyword">year</span> <span class="keyword">from</span> now()) <span class="keyword">as</span> <span class="keyword">year</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ,<span class="built_in">extract</span>(<span class="keyword">month</span> <span class="keyword">from</span> now()) <span class="keyword">as</span> <span class="keyword">month</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="built_in">extract</span>(<span class="keyword">day</span> <span class="keyword">from</span> now()) <span class="keyword">as</span> <span class="keyword">day</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="built_in">extract</span>(<span class="keyword">hour</span> <span class="keyword">from</span> now()) <span class="keyword">as</span> <span class="keyword">hour</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="built_in">extract</span>(<span class="keyword">minute</span> <span class="keyword">from</span> now()) <span class="keyword">as</span> <span class="keyword">minute</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="built_in">extract</span>(<span class="keyword">second</span> <span class="keyword">from</span> now()) <span class="keyword">as</span> seconde,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="built_in">extract</span>(microsecond <span class="keyword">from</span> now()) <span class="keyword">as</span> microsecond;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+------+------+--------+---------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">year</span> <span class="operator">|</span> <span class="keyword">month</span> <span class="operator">|</span> <span class="keyword">day</span>  <span class="operator">|</span> <span class="keyword">hour</span> <span class="operator">|</span> <span class="keyword">minute</span> <span class="operator">|</span> seconde <span class="operator">|</span> microsecond <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+------+------+--------+---------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2021</span> <span class="operator">|</span>    <span class="number">12</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">11</span> <span class="operator">|</span>     <span class="number">13</span> <span class="operator">|</span>      <span class="number">40</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+------+------+--------+---------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">extract</span>(<span class="keyword">day</span> <span class="keyword">from</span> <span class="string">&#x27;2021-10-02&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">extract</span>(<span class="keyword">day</span> <span class="keyword">from</span> <span class="string">&#x27;2021-10-02&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                              <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li><p>date_add/sub() 给指定日期/时间表达式加(减)上指定时间间隔</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> date_add(now(),<span class="type">interval</span> <span class="number">1</span> <span class="keyword">day</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> date_add(now(),<span class="type">interval</span> <span class="number">1</span> <span class="keyword">day</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2021</span><span class="number">-12</span><span class="number">-02</span> <span class="number">11</span>:<span class="number">21</span>:<span class="number">41</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">----------------------------------------------</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> date_sub(now(),<span class="type">interval</span> <span class="number">1</span> <span class="keyword">day</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> date_sub(now(),<span class="type">interval</span> <span class="number">1</span> <span class="keyword">day</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2021</span><span class="number">-11</span><span class="number">-30</span> <span class="number">11</span>:<span class="number">21</span>:<span class="number">58</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>Date_Format(date,format) 将日期按指定的日期/时间格式输出</p><ul><li>mysql时间格式</li></ul><table><thead><tr><th align="left">格式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">%a</td><td align="left">缩写星期名</td></tr><tr><td align="left">%b</td><td align="left">缩写月名</td></tr><tr><td align="left">%c</td><td align="left">月，数值</td></tr><tr><td align="left">%D</td><td align="left">带有英文前缀的月中的天</td></tr><tr><td align="left">%d</td><td align="left">月的天，数值（00-31）</td></tr><tr><td align="left">%e</td><td align="left">月的天，数值（0-31）</td></tr><tr><td align="left">%f</td><td align="left">微秒</td></tr><tr><td align="left">%H</td><td align="left">小时（00-23）</td></tr><tr><td align="left">%h</td><td align="left">小时（01-12）</td></tr><tr><td align="left">%I</td><td align="left">小时（01-12）</td></tr><tr><td align="left">%i</td><td align="left">分钟，数值（00-59）</td></tr><tr><td align="left">%j</td><td align="left">年的天（001-366）</td></tr><tr><td align="left">%k</td><td align="left">小时（0-23）</td></tr><tr><td align="left">%l</td><td align="left">小时（1-12）</td></tr><tr><td align="left">%M</td><td align="left">月名</td></tr><tr><td align="left">%m</td><td align="left">月，数值（00-12）</td></tr><tr><td align="left">%p</td><td align="left">AM 或 PM</td></tr><tr><td align="left">%r</td><td align="left">时间，12-小时（hh:mm:ss AM 或 PM）</td></tr><tr><td align="left">%S</td><td align="left">秒（00-59）</td></tr><tr><td align="left">%s</td><td align="left">秒（00-59）</td></tr><tr><td align="left">%T</td><td align="left">时间, 24-小时（hh:mm:ss）</td></tr><tr><td align="left">%U</td><td align="left">周（00-53）星期日是一周的第一天</td></tr><tr><td align="left">%u</td><td align="left">周（00-53）星期一是一周的第一天</td></tr><tr><td align="left">%V</td><td align="left">周（01-53）星期日是一周的第一天，与 %X 使用</td></tr><tr><td align="left">%v</td><td align="left">周（01-53）星期一是一周的第一天，与 %x 使用</td></tr><tr><td align="left">%W</td><td align="left">星期名</td></tr><tr><td align="left">%w</td><td align="left">周的天（0=星期日, 6=星期六）</td></tr><tr><td align="left">%X</td><td align="left">年，其中的星期日是周的第一天，4 位，与 %V 使用</td></tr><tr><td align="left">%x</td><td align="left">年，其中的星期一是周的第一天，4 位，与 %v 使用</td></tr><tr><td align="left">%Y</td><td align="left">年，4 位</td></tr><tr><td align="left">%y</td><td align="left">年，2 位</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> date_format(now(),<span class="string">&#x27;%Y%m%d %H%i%S&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> date_format(now(),<span class="string">&#x27;%Y%m%d %H%i%S&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">20211201</span> <span class="number">113323</span>                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ol start="8"><li><p>unix_timestamp(date) 日期/时间表达式转时间戳 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> unix_timestamp(<span class="string">&#x27;2021-10-11 10:12:12&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> unix_timestamp(<span class="string">&#x27;2021-10-11 10:12:12&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                            <span class="number">1633918332</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>str_to_date(date) 字符串转日期</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> str_to_date(<span class="string">&#x27;2021-10-11 10:12:12&#x27;</span>,<span class="string">&#x27;%Y-%m-%d %H:%i:%S&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> str_to_date(<span class="string">&#x27;2021-10-11 10:12:12&#x27;</span>,<span class="string">&#x27;%Y-%m-%d %H:%i:%S&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2021</span><span class="number">-10</span><span class="number">-11</span> <span class="number">10</span>:<span class="number">12</span>:<span class="number">12</span>                                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>from_unitime(timestamp,{format}) 时间戳转字符串/日期 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> from_unixtime(<span class="number">1509257408</span>,<span class="string">&#x27;%Y~%m~%d %H:%i:%S&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> from_unixtime(<span class="number">1509257408</span>,<span class="string">&#x27;%Y~%m~%d %H:%i:%S&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2017</span><span class="operator">~</span><span class="number">10</span><span class="operator">~</span><span class="number">29</span> <span class="number">14</span>:<span class="number">10</span>:<span class="number">08</span>                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ul>]]></content>
    
    
    <summary type="html">mysql常用函数</summary>
    
    
    
    <category term="数据库" scheme="http://liujun1997.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="mysql" scheme="http://liujun1997.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Centos7-Mysql5.7安装</title>
    <link href="http://liujun1997.github.io/2021/10/13/Centos7-Mysql5-7%E5%AE%89%E8%A3%85/"/>
    <id>http://liujun1997.github.io/2021/10/13/Centos7-Mysql5-7%E5%AE%89%E8%A3%85/</id>
    <published>2021-10-13T07:59:26.000Z</published>
    <updated>2021-10-13T11:59:54.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ul><li><p>Centos 7系统, x86架构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7-2 ~]# uname -s</span><br><span class="line">Linux</span><br><span class="line">[root@CentOS7-2 ~]# uname -m</span><br><span class="line">x86_64</span><br></pre></td></tr></table></figure></li><li><p>centos镜像源中没有mysql镜像源，需要下载mysql镜像源，执行完成后会在/etc/yum.repos.d/目录下生成两个repo文件mysql-community.repo mysql-community-source.repo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7-2 ~]# wget https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</span><br><span class="line">[root@CentOS7-2 ~]# rpm -ivh mysql57-community-release-el7-9.noarch.rpm</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>安装mysql-5.7</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7-2 ~]# yum install mysql-server -y</span><br></pre></td></tr></table></figure></li><li><p>启动mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7-2 ~]# systemctl start mysqld </span><br></pre></td></tr></table></figure></li><li><p>获取临时密码登录mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7-2 ~]# grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br><span class="line">2021-10-13T06:59:08.797851Z 1 [Note] A temporary password is generated for root@localhost: wZvCfS)LI0kf # (mysql安装临时密码) 如果没有临时密码， 删除原来安装过的mysql残留的数据 rm -rf /var/lib/mysql</span><br><span class="line">[root@CentOS7-2 ~]# mysql -uroot -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 3</span><br><span class="line">Server version: 5.7.35</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2021, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">mysql&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>如果登录不了，需要修改配置文件跳过密码登录 vim /etc/my.cnf 在mysqld域增加一行<br>skip-grant-tables</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> For advice on how to change settings please see</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span></span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">skip-grant-tables</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Remove leading # and set to the amount of RAM for the most important data</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cache <span class="keyword">in</span> MySQL. Start at 70% of total RAM <span class="keyword">for</span> dedicated server, <span class="keyword">else</span> 10%.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> innodb_buffer_pool_size = 128M</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Remove leading # to turn on a very important data integrity option: logging</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> changes to the binary <span class="built_in">log</span> between backups.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> log_bin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Remove leading # to set options mainly useful for reporting servers.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The server defaults are faster <span class="keyword">for</span> transactions and fast SELECTs.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Adjust sizes as needed, experiment to find the optimal values.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> join_buffer_size = 128M</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sort_buffer_size = 2M</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> read_rnd_buffer_size = 2M</span></span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links=0</span><br><span class="line"></span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure></li></ul></li><li><p>登录之后修改默认密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 方式一</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;@Escher123456&#x27;;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式二</span></span><br><span class="line">set password for root@localhost = password(&#x27;@Escher123456123456&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>修改密码后，可以修改mysql的默认密码校验策略设置简单密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW VARIABLES LIKE <span class="string">&#x27;validate_password%&#x27;</span>;</span></span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| Variable_name                        | Value  |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| validate_password_check_user_name    | OFF    |</span><br><span class="line">| validate_password_dictionary_file    |        |</span><br><span class="line">| validate_password_length             | 8      |</span><br><span class="line">| validate_password_mixed_case_count   | 1      |</span><br><span class="line">| validate_password_number_count       | 1      |</span><br><span class="line">| validate_password_policy             | MEDIUM |</span><br><span class="line">| validate_password_special_char_count | 1      |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash">  <span class="built_in">set</span> global validate_password_policy=LOW;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> global validate_password_length=4;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>密码的策略</p><ol><li><p>validate_password_length  固定密码的总长度；</p></li><li><p>validate_password_dictionary_file 指定密码验证的文件路径；</p></li><li><p>validate_password_mixed_case_count  整个密码中至少要包含大/小写字母的总个数；</p></li><li><p>validate_password_number_count  整个密码中至少要包含阿拉伯数字的个数；</p></li><li><p>validate_password_policy 指定密码的强度验证等级，默认为 MEDIUM；</p><ul><li><p>LOW：只验证长度；</p></li><li><p>MEDIUM：验证长度、数字、大小写、特殊字符；</p></li><li><p>STRONG：验证长度、数字、大小写、特殊字符、字典文件；</p></li></ul></li><li><p>validate_password_special_char_count 整个密码中至少要包含特殊字符的个数；</p></li></ol></li></ul></li><li><p>设置远程登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use mysql;</span></span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select user,host from user;</span></span><br><span class="line">+---------------+-----------+</span><br><span class="line">| user          | host      |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| mysql.session | localhost |</span><br><span class="line">| mysql.sys     | localhost |</span><br><span class="line">| root          | localhost |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"><span class="meta">#</span><span class="bash"> ALL PRIVILEGES 赋予所有的权限(select,update,delete,insert)  *.*所有的数据库和表  WITH GRANT OPTION是赋权的作用</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;root&#x27;</span> WITH GRANT OPTION;</span></span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>最后刷新权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Centos 7系统, x86架构&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;</summary>
      
    
    
    
    <category term="软件安装" scheme="http://liujun1997.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="Mysql Linux" scheme="http://liujun1997.github.io/tags/Mysql-Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux磁盘/分区/文件系统</title>
    <link href="http://liujun1997.github.io/2021/10/11/Linux%E7%A3%81%E7%9B%98-%E5%88%86%E5%8C%BA-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://liujun1997.github.io/2021/10/11/Linux%E7%A3%81%E7%9B%98-%E5%88%86%E5%8C%BA-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-10-11T08:59:47.000Z</published>
    <updated>2022-04-23T12:25:27.943Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h4><ul><li>最近在帮朋友解决一个挂载硬盘的问题，发现自己对磁盘分区文件系统了解比较少，因此写这篇文章记录下。</li></ul><h4 id="2-磁盘"><a href="#2-磁盘" class="headerlink" title="2.磁盘"></a>2.磁盘</h4><ul><li>在linux中，万物皆文件。硬件这些设备在linux中称为设备文件，磁盘在linux中叫做块设备文件。</li></ul><h5 id="2-1-磁盘的分类"><a href="#2-1-磁盘的分类" class="headerlink" title="2.1 磁盘的分类"></a>2.1 磁盘的分类</h5><ul><li><p>当下比较常见的硬盘分为SCSI，STAT，SAS，SSD硬盘，比较古老的有IDE硬盘，由于效率比较低，已经在消费市场少见了。</p></li><li><p>SCSI硬盘: 采用SCSI接口，优点：性能，稳定好，缺点是价格昂贵，所以主要使用在服务器市场。</p></li><li><p>SAS是Serial Attached SCSI 的缩写，比SCSI硬盘更加昂贵。</p></li><li><p>STAT:  Serial ATA接口硬盘，采用串行接口，主要在消费市场使用。</p><p><img src="https://file.coderstudy.cn/image/Pic/UDa7G2.png" alt="UDa7G2"></p></li><li><p>固态硬盘是用固态电子存储芯片阵列而制成的硬盘，由控制单元和存储单元(FLASH芯片、DRAM芯片)组成。其主要特点是没有传统硬盘的机械结构，读写速度非常快</p><p><img src="https://file.coderstudy.cn/image/Pic/DDDmWK.png" alt="DDDmWK"></p></li></ul><h5 id="2-2-硬盘原理"><a href="#2-2-硬盘原理" class="headerlink" title="2.2 硬盘原理"></a>2.2 硬盘原理</h5><ul><li> 硬盘的构造如下图所示，磁盘的构造主要由盘面，磁道，磁头，柱面，扇区这几部分组成。</li></ul><p>​    <img src="https://file.coderstudy.cn/image/Pic/qdGHPA.png" alt="qdGHPA"></p><ul><li><p><code>盘面(platter)</code>：盘面是磁盘记录信息的载体，主要由铝合金材料组成。上面涂有磁性物质。上下两面都可以使用。</p></li><li><p><code>磁道(track)</code>：盘面上有许多个同心圆环，这个轨道就称之为磁道。每个盘面上一般有300-1024个磁道。从外到里可分为0-n磁道。信息的存储从0磁道开始，一直到离主轴最近的区域，这个区域叫做着陆区(loading Zone)，这个区域不存储信息。</p><p><img src="https://file.coderstudy.cn/image/Pic/Mvv0z0.png" alt="Mvv0z0"></p></li><li><p><code>扇区(setors)</code>: 存储信息主要在这个区域，主要存储512byte数据和寻址信息，寻址信息主要包括，磁头号(盘面号)，磁道号(柱面号)，扇区在磁道上的位置(扇区号)，这个三维地址组成了信息在磁盘上的唯一标识地址。用于磁头读取或写入信息时比对。</p></li><li><p><code>柱面(cylinder)</code>: 磁盘上所有盘面上同一半径组成的圆柱面，磁盘的读写是按照柱面进行的，在同一柱面上，磁头从上到下编号0-n，读写顺序也是从上到下的，同一柱面的所有磁头全部读取完成，才切换到下一个柱面。</p></li><li><p><code>磁盘的容量</code>: 不难看出，磁盘的容量由三部分决定,柱面数，磁头数，扇区数 。磁盘容量= 柱面数x磁头数x扇区数x512byte</p></li><li><p><code>硬盘的寻址模式</code>: C/H/S（Cylinder/Head/Sector）寻址模式，也可以称为三维地址模式，这是硬盘最早采用的寻址模式，当时硬盘的容量还非常小，人们采用与软盘类似的结构生产硬盘，也就是硬盘盘片的每一条磁道都具有相同的扇区数，由此产生了所谓的3D参数（Disk Geometry），既磁头数（Heads）、柱面数（Cylinders）、 扇区数（Sectors），以及相应的寻址方式。</p><ul><li><p>早期硬盘的的同一磁盘的扇区数是相同的，这样外圈的周长大，但是扇区数还是一样，这样就造成磁盘空间浪费。，人们改用等密度结构生产硬盘，也就是说，外圈磁道的扇区比内圈磁道多。采用这种结构后，硬盘不再具有实际的3D参数，寻址方式也改为线性寻址，即以扇区为单位进行寻址，这种寻址模式叫做LBA，全称为Logic Block Address（即扇区的逻辑块地址）而在LBA方式下，系统把所有的物理扇区都按照某种方式或规则看做是一个线性编号的扇区，即从0到某个最大值方式排列，并连成一条线，把LBA作为一个整体来对待，而不再是具体的实际的C/H/S值，这样只用一个序数就确定了一个惟一的物理扇区，显然线性地址是物理扇区的逻辑地址。为了与使用C/H/S寻址的老软件兼容（如使用BIOS Int13H接口的软件）在硬盘控制器内部安装了s一个地址翻译器，由它负责将C/H/S参数翻译成LBA地址。</p></li><li><p>从C/H/S到LBA的转换公式：</p><p>这里规定用</p><p>C表示当前柱面号，</p><p>H表示当前磁头号，</p><p>S表示当前扇区号，</p><p>CS表示起始柱面号，HS表示起始磁头号，SS表示起始扇区号，PS表示每磁道扇区数，PH表示每柱面磁道数，所以公式为：</p><p>LBA=（C–CS）﹡PH﹡PS+（H–HS）﹡PS+（S–SS）</p></li></ul></li><li><p><code>磁盘的读写原理</code>：系统将文件存储到磁盘上时，按柱面、磁头、扇区的方式进行，即最先是第1磁道的第一磁头下（也就是第1盘面的第一磁道）的所有扇区，然后，是同一柱面的下一磁头，……，一个柱面存储满后就推进到下一个柱面，直到把文件内容全部写入磁盘。</p><p>系统也以相同的顺序读出数据。读出数据时通过告诉磁盘控制器要读出扇区所在的柱面号、磁头号和扇区号（物理地址的三个组成部分）进行。</p><p>扇区到来时，磁盘控制器读出每个扇区的头标，把这些头标中的地址信息与 期待检出的磁头和柱面号做比较（即寻道），然后，寻找要求的扇区号。待磁盘控制器找到该扇区头标时，根据其任务是写扇区还是读扇区，来决定是转换写电路， 还是读出数据和尾部记录。</p></li></ul><h4 id="3-分区"><a href="#3-分区" class="headerlink" title="3.分区"></a>3.分区</h4><h5 id="3-1-硬盘为什么要分区"><a href="#3-1-硬盘为什么要分区" class="headerlink" title="3.1 硬盘为什么要分区"></a>3.1 硬盘为什么要分区</h5><ul><li>硬盘安全：如果硬盘只有一个分区，一旦这个分区发生损坏，则导致整个硬盘的数据发生丢失。</li><li>多个文件系统共存：如果想在同一块硬盘上使用多个文件系统，可以通过多个分区，格式化成不同的文件系统使用。</li><li>提高磁盘利用率：可以用不同的区块大小来格式化分区，如果有很多1K的文件，而硬盘分区区块大小为4K，那么每存储一个文件将会浪费3K空间。这时我们需要取这些文件大小的平均值进行区块大小的划分。</li><li>提高系统稳定性：如果只分为一个区，当用户的数据填满整个磁盘，则会导致系统挂起。</li></ul><h5 id="3-2-硬盘分区的在Linux上的形式"><a href="#3-2-硬盘分区的在Linux上的形式" class="headerlink" title="3.2 硬盘分区的在Linux上的形式"></a>3.2 硬盘分区的在Linux上的形式</h5><ul><li><p>使用fdisk工具可以查看系统磁盘和磁盘的分区情况。下图中，有一个/dev/sda块设备文件，一共有976773167 扇区，共有465.8 G容量，在Linux中，STAT接口和SCSI接口硬盘的主设备号是sd[a-z]，如果是早期的IDE硬盘，则为hd[a-z]，下面的/dev/sda1,/dev/sda2代表这个磁盘的分区，后面的数字带表分区号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@raspberrypi:~# fdisk -l </span><br><span class="line">Disk /dev/sda: 465.8 GiB, 500107861504 bytes, 976773167 sectors</span><br><span class="line">Disk model: Externa         </span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 33553920 bytes</span><br><span class="line">Disklabel type: gpt</span><br><span class="line">Disk identifier: 08757A4D-B822-4E26-80CB-5D6374771736</span><br><span class="line"></span><br><span class="line">Device      Start       End   Sectors   Size Type</span><br><span class="line">/dev/sda1      40    409639    409600   200M EFI System</span><br><span class="line">/dev/sda2  411648 976248831 975837184 465.3G Microsoft basic data</span><br></pre></td></tr></table></figure><p>使用lsblk命令可以查看系统上所有块设备个数和分区及挂载情况，下图中，系统一共有2个磁盘，/dev/sda和/dev/mmcblk0,sda磁盘上有两个分区，还没有挂载到系统，mmcblk0y有两个分区，mmcblk0p1分区是系统的引导主分区，挂载在/boot上，mmcblk0p2分区是系统的数据分区，挂载在根目录上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@raspberrypi:~# lsblk</span><br><span class="line">NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda           8:0    0 465.8G  0 disk </span><br><span class="line">├─sda1        8:1    0   200M  0 part </span><br><span class="line">└─sda2        8:2    0 465.3G  0 part </span><br><span class="line">mmcblk0     179:0    0  14.9G  0 disk </span><br><span class="line">├─mmcblk0p1 179:1    0   256M  0 part /boot</span><br><span class="line">└─mmcblk0p2 179:2    0  14.6G  0 part /</span><br></pre></td></tr></table></figure></li><li><p>磁盘的分区由主分区，扩展分区，逻辑分区组成，磁盘最多有4个主分区，其中扩展分区也是一个主分区，并且最多只能有一个扩展分区，但可以在扩展分区上创建多个逻辑分区。因此主分区(包括扩展分区)的范围是 1-4，逻辑分区从 5 开始。对于逻辑分区，Linux 规定它们必须建立在扩展分区上，而不是建立在主分区上。 主分区的作用是用来启动操作系统的，主要存放操作系统的启动或引导程序，因此建议操作系统的引导程序都放在主分区，比如 Linux 的 /boot 分区，最好放在主分区上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@raspberrypi:~# df -h | grep boot</span><br><span class="line">/dev/mmcblk0p1  253M   49M  204M   20% /boot</span><br></pre></td></tr></table></figure></li></ul><h5 id="3-3-硬盘怎么分区"><a href="#3-3-硬盘怎么分区" class="headerlink" title="3.3 硬盘怎么分区"></a>3.3 硬盘怎么分区</h5><ul><li><p>主要利用fdisk工具划分磁盘分区，使用虚拟机挂载1个10G的磁盘，fdisk /dev/${分区磁盘}，p可以查看磁盘的分区状态，现在是未分区的状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 ~]# fdisk -l /dev/sdb</span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 10.7 GB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 4096 bytes</span><br><span class="line">I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span><br><span class="line">[root@CentOS7 ~]# fdisk /dev/sdb</span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line"></span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table</span><br><span class="line">Building a new DOS disklabel with disk identifier 0xde518367.</span><br><span class="line"></span><br><span class="line">The device presents a logical sector size that is smaller than</span><br><span class="line">the physical sector size. Aligning to a physical sector (or optimal</span><br><span class="line">I/O) size boundary is recommended, or performance may be impacted.</span><br><span class="line"></span><br><span class="line">Command (m for help): p</span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 10.7 GB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 4096 bytes</span><br><span class="line">I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0xde518367</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line"><span class="meta">#</span><span class="bash">新增一个分区</span></span><br><span class="line">Command (m for help): n</span><br><span class="line">Partition type:</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended</span><br><span class="line"><span class="meta">#</span><span class="bash">选择分区类型 p为主分区（最大为4个） e为扩展分区(最多只有1个扩展分区)</span></span><br><span class="line">Select (default p): p</span><br><span class="line">Partition number (1-4, default 1): 1</span><br><span class="line"><span class="meta">#</span><span class="bash">开始扇区</span></span><br><span class="line">First sector (2048-20971519, default 2048): 2048</span><br><span class="line"><span class="meta">#</span><span class="bash">结束扇区</span></span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (2048-20971519, default 20971519): +1G</span><br><span class="line">Partition 1 of type Linux and of size 1 GiB is set   </span><br><span class="line"><span class="meta">#</span><span class="bash">写入磁盘</span></span><br><span class="line">Command (m for help): w</span><br><span class="line"><span class="meta">#</span><span class="bash">改变分区的文件系统</span></span><br><span class="line">Command (m for help): t</span><br><span class="line"><span class="meta">#</span><span class="bash">查看支持的文件系统(82 swap 8r inux 8e lvm)</span></span><br><span class="line">Command (m for help): L</span><br></pre></td></tr></table></figure></li><li><p>建好分区后，需要对分区格式化对应的文件系统，然后挂载到系统的目录上去，这样才能使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看支持的文件格式</span></span><br><span class="line">[root@CentOS7 /]# ls /sbin/mkfs*</span><br><span class="line">/sbin/mkfs        /sbin/mkfs.cramfs  /sbin/mkfs.ext3  /sbin/mkfs.minix</span><br><span class="line">/sbin/mkfs.btrfs  /sbin/mkfs.ext2    /sbin/mkfs.ext4  /sbin/mkfs.xfs</span><br><span class="line"><span class="meta">#</span><span class="bash">格式化分区</span></span><br><span class="line">[root@CentOS7 /]# mkfs.ext4 /dev/sdb1</span><br><span class="line">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Discarding device blocks: done</span><br><span class="line">Filesystem label=</span><br><span class="line">OS type: Linux</span><br><span class="line">Block size=4096 (log=2)</span><br><span class="line">Fragment size=4096 (log=2)</span><br><span class="line">Stride=0 blocks, Stripe width=0 blocks</span><br><span class="line">65536 inodes, 262144 blocks</span><br><span class="line">13107 blocks (5.00%) reserved for the super user</span><br><span class="line">First data block=0</span><br><span class="line">Maximum filesystem blocks=268435456</span><br><span class="line">8 block groups</span><br><span class="line">32768 blocks per group, 32768 fragments per group</span><br><span class="line">8192 inodes per group</span><br><span class="line">Superblock backups stored on blocks:</span><br><span class="line">32768, 98304, 163840, 229376</span><br><span class="line"></span><br><span class="line">Allocating group tables: done</span><br><span class="line">Writing inode tables: done</span><br><span class="line">Creating journal (8192 blocks): done</span><br><span class="line">Writing superblocks and filesystem accounting information: done</span><br><span class="line"><span class="meta">#</span><span class="bash">挂载分区</span></span><br><span class="line">[root@CentOS7 /]# mkdir /escher</span><br><span class="line">[root@CentOS7 /]# mount /dev/sd</span><br><span class="line">sda   sda1  sda2  sdb   sdb1</span><br><span class="line">[root@CentOS7 /]# mount /dev/sdb1 /escher</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-文件系统"><a href="#4-文件系统" class="headerlink" title="4.文件系统"></a>4.文件系统</h4><ul><li><p>在给磁盘分区后，需要格式化分区，让分区格式化为系统可以识别的文件系统，window支持fat，fat32，ntfs文件系统，Linux支持ext2，ext3，ext4，xfs文件系统，window就不能识别ext3文件系统的磁盘，所以要根据操作系统格式化磁盘。</p></li><li><p>硬盘的最小存储单元是扇区，每个扇区可以储存512byte数据，如果想要存储大数据，就需要硬盘磁头读写许多次，效率太低，所以有了block的概念，逻辑块是格式化文件系统中指定最小的存储单元。这个大小是扇区的2次方，在读取大数据时，磁头可以一次读取一块，这样磁头的读取次数大大降低。提高了IO的效率，当然块大小必须适中，块大小小了，就会导致读取效率低，如果块大了，在存储小文件时，就会浪费大量的存储空间。必须在文件的读取效率与空间利用率中做取舍。所以在格式化分区时，需要考虑使用情景。</p></li><li><p>VFS(Virual File System): 虚拟文件系统时Linux中一种抽象的文件系统，试想一下，当操作系统需要适配多个文件系统时，每个文件系统的接口肯定不是相同的。所以，VFS就把这些不同的文件系统做一个抽象，提供统一的API访问接口，这样，用户空间就不用关心不同文件系统中不一样的API了。VFS所提供的这些统一的API，再经过System Call包装一下，用户空间就可以经过SCI的系统调用来操作不同的文件系统。</p><p><img src="https://file.coderstudy.cn/image/Pic/v6IcQv.png" alt="v6IcQv"></p></li></ul><h4 id="5-LVM分区"><a href="#5-LVM分区" class="headerlink" title="5.LVM分区"></a>5.LVM分区</h4><h5 id="5-1lvm是什么"><a href="#5-1lvm是什么" class="headerlink" title="5.1lvm是什么"></a>5.1lvm是什么</h5><ul><li>LVM(Logical Volume Manager), 逻辑卷管理, 是一种将一至多个硬盘的分区在逻辑上进行组合, 当成一个大硬盘来使用.当硬盘空间不足时, 可以动态地添加其它硬盘的分区到已有的卷组中 —— 磁盘空间的动态管理.</li></ul><h5 id="5-2-为什么使用lvm"><a href="#5-2-为什么使用lvm" class="headerlink" title="5.2 为什么使用lvm"></a>5.2 为什么使用lvm</h5><ul><li>试想一下，当我们挂载的分区的磁盘容量使用完成后，如果想要扩容，只能做数据备份迁移到另外一个分区上面。或者使用软连接到其他分区。</li><li>如果使用了lvm之后，只需要扩展逻辑卷大小，就能够扩大容量。如果将多个分区加入到lvm卷组中，数据还可以跨分区访问。如果使用多个磁盘，建议使用lvm管理磁盘</li></ul><h5 id="5-3-LVM相关概念"><a href="#5-3-LVM相关概念" class="headerlink" title="5.3 LVM相关概念"></a>5.3 LVM相关概念</h5><ul><li>PV(Physical Volume): 物理卷, 处于LVM最底层, 可以是物理硬盘或者分区;</li><li>PP(Physical Extend): 物理区域, PV中可以用于分配的最小存储单元, 可以在创建PV的时候指定, 如1M, 2M, 4M, 8M…..组成同一VG中所有PV的PE大小应该相同;</li><li>VG(Volume Group): 卷组, 建立在PV之上, 可以含有一个到多个PV;</li><li>LV(Logical Volume): 逻辑卷, 建立在VG之上, 相当于原来分区的概念, 不过大小可以动态改变.</li></ul><h5 id="5-4-LVM使用"><a href="#5-4-LVM使用" class="headerlink" title="5.4 LVM使用"></a>5.4 LVM使用</h5><ol><li><p>创建物理卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 ~]# pvcreate /dev/sdb1</span><br><span class="line">  Physical volume &quot;/dev/sdb1&quot; successfully created.</span><br></pre></td></tr></table></figure></li><li><p>创建卷组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 ~]# vgcreate test /dev/sdb1</span><br><span class="line">  Volume group &quot;test&quot; successfully created</span><br></pre></td></tr></table></figure></li><li><p>创建逻辑卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 ~]# lvcreate -L 100M -n escher test</span><br><span class="line">  Logical volume &quot;escher&quot; created.</span><br></pre></td></tr></table></figure></li><li><p>格式化文件系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 ~]# mkfs.ext4 /dev/test/escher</span><br></pre></td></tr></table></figure></li><li><p>挂载</p></li></ol><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li>(<a href="http://cn.linux.vbird.org/linux_basic/fedora_4/0230filesystem-fc4.php">http://cn.linux.vbird.org/linux_basic/fedora_4/0230filesystem-fc4.php</a>)</li><li>(<a href="https://cloud.tencent.com/developer/article/1721138">https://cloud.tencent.com/developer/article/1721138</a>)</li><li>(<a href="https://zhuanlan.zhihu.com/p/34915311">https://zhuanlan.zhihu.com/p/34915311</a>)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1.背景&quot;&gt;&lt;/a&gt;1.背景&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;最近在帮朋友解决一个挂载硬盘的问题，发现自己对磁盘分区文件系统了解比较少，因此写这篇文章记录下。&lt;/li&gt;
&lt;/</summary>
      
    
    
    
    <category term="运维" scheme="http://liujun1997.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Linux 磁盘分区" scheme="http://liujun1997.github.io/tags/Linux-%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Shell-4</title>
    <link href="http://liujun1997.github.io/2021/09/04/shell-4/"/>
    <id>http://liujun1997.github.io/2021/09/04/shell-4/</id>
    <published>2021-09-04T12:34:53.000Z</published>
    <updated>2022-04-23T12:25:27.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell好用的工具：-cut"><a href="#Shell好用的工具：-cut" class="headerlink" title="Shell好用的工具： cut"></a>Shell好用的工具： cut</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>cut</code>  译为“剪切, 切割”  ,  是一个强大文本处理工具，它可以将文本按列进行划分的文本处理。cut命令逐行读入文本，然后按列划分字段并进行提取、输出等操作。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut [options]  filename</span><br></pre></td></tr></table></figure><p>options参数说明</p><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-f 提取范围</td><td>列号，获取第几列</td></tr><tr><td>-d 自定义分隔符</td><td>自定义分隔符，默认为制表符。</td></tr><tr><td>-c 提取范围</td><td>以字符为单位进行分割</td></tr><tr><td>-b 提取范围</td><td>以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</td></tr><tr><td>-n</td><td>与“-b”选项连用，不分割多字节字符；</td></tr></tbody></table><p>提取范围说明</p><table><thead><tr><th>提取范围</th><th>说明</th></tr></thead><tbody><tr><td>n-</td><td>提取指定第n列或字符或字节后面所有数据</td></tr><tr><td>n-m</td><td>提取指定第n列或字符或字节到第m列或字符或字节中间的所有数据</td></tr><tr><td>-m</td><td>提取指定第m列或字符或字节前面所有数据</td></tr><tr><td>n1,n2,…</td><td>提前指定枚举列的所有数据</td></tr></tbody></table><h2 id="示例：切割提取指定列数据"><a href="#示例：切割提取指定列数据" class="headerlink" title="示例：切割提取指定列数据"></a>示例：切割提取指定列数据</h2><p>cut1.txt文件数据准备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch cut1.txt</span><br></pre></td></tr></table></figure><p>编辑文件添加内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AA  itheima 11 XX</span><br><span class="line">BB  itcast 22 XXX</span><br><span class="line">CC  Shell 33 XXXX</span><br><span class="line">DD  it 44 XXXXXXX</span><br></pre></td></tr></table></figure><p>提取文件中第一列数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut cut1.txt -d &quot; &quot; -f 1</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200707230710596.png" alt="image-20200707230710596"></p><p>提取文件中第一列,第三列, 枚举查找</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut cut1.txt -d &quot; &quot; -f 1,3</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200707232926482.png" alt="image-20200707232926482"></p><p>提取文件中第二列,第三列,第四列, 范围查找</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200707233024564.png" alt="image-20200707233024564"></p><p>提取文件中第一列后面所有列的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut cut1.txt -d &quot; &quot;  -f 2- </span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200709220852618.png" alt="image-20200709220852618"></p><p>提起文件中结束列前面所有列的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cut -d &quot; &quot; -f -2 cut1.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> -2 提取指定列前面所有列数据</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711142437017.png" alt="image-20200711142437017"></p><h2 id="示例-切割提取指定字符数据"><a href="#示例-切割提取指定字符数据" class="headerlink" title="示例: 切割提取指定字符数据"></a>示例: 切割提取指定字符数据</h2><p>提取每行前3个字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut cut1.txt -c1-3</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711142653293.png" alt="image-20200711142653293"></p><p>提取每行第4个字符以后的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut cut1.txt -c 4-</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711143324756.png" alt="image-20200711143324756"></p><p>提取每行第3个字符前面所有字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut cut1.txt -c -3</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711143438631.png" alt="image-20200711143438631"></p><h2 id="示例：切割提取指定字节数据"><a href="#示例：切割提取指定字节数据" class="headerlink" title="示例：切割提取指定字节数据"></a>示例：切割提取指定字节数据</h2><p>提取字符串”abc传智播客” 前3个字节</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;abc传智播客&quot; | cut -b -3</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711143706340.png" alt="image-20200711143706340"></p><p>提取字符串”abc传智播客” 前4个字节</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;abc传智播客&quot; | cut -b -4</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711143754196.png" alt="image-20200711143754196"></p><p>提取字符串”abc传智播客” 前6个字节</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;abc传智播客&quot; | cut -b -6</span><br><span class="line"><span class="meta">#</span><span class="bash"> 由于linux系统默认utf-8码表, 所以一个汉字占3个字节</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711143926461.png" alt="image-20200711143926461"></p><p>提取字符串”abc传智播客” 前4个字节, 就可以将汉字 “传”输出,</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;abc传智播客&quot; | cut -nb -4</span><br><span class="line"><span class="meta">#</span><span class="bash">  -n 取消多字节字符分割直接输出</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711144139142.png" alt="image-20200711144139142"></p><h2 id="示例：切割提取指定单词数据"><a href="#示例：切割提取指定单词数据" class="headerlink" title="示例：切割提取指定单词数据"></a>示例：切割提取指定单词数据</h2><p>在cut1.txt文件中切割出”itheima”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat cut1.txt | grep itheima | cut -d &quot; &quot; -f 2</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200708003059162.png" alt="image-20200708003059162"></p><h2 id="示例：切割提取bash进程的PID号"><a href="#示例：切割提取bash进程的PID号" class="headerlink" title="示例：切割提取bash进程的PID号"></a>示例：切割提取bash进程的PID号</h2><p>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep &#x27;bash&#x27; | head -n 1 | cut -d &quot; &quot; -f 8</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711120636232.png" alt="image-20200711120636232"></p><h2 id="示例：切割提取IP地址"><a href="#示例：切割提取IP地址" class="headerlink" title="示例：切割提取IP地址"></a>示例：切割提取IP地址</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig | grep broadcast | cut -d &quot; &quot; -f 10</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711115310554.png" alt="image-20200711115310554"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>cut的作用</p><blockquote><p>一个强大文本处理工具，它可以将文本按列进行划分的文本处理。cut命令逐行读入文本，然后按列划分字段并进行提取、输出等操作。</p></blockquote><p>cut切割提取列</p><blockquote><p><code>cut  文件或数据 -d 分隔符切割 -f 提取第X列 </code></p></blockquote><p>cut切割提取字符</p><blockquote><p><code>cut  文件或数据 -c 提取字符范围 </code></p></blockquote><p>cut切割提取字节</p><blockquote><p><code>cut  文件或数据 -nb 提取直接范围 </code></p></blockquote><h1 id="Shell好用的工具：sed"><a href="#Shell好用的工具：sed" class="headerlink" title="Shell好用的工具：sed"></a>Shell好用的工具：sed</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>使用sed编辑文件替换文件中的单词</p><p>编写在文件中插入或修改行的sed程序</p><p>使用sed作为过滤器来过滤管道数据命令</p><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>sed （stream editor, 流编辑器） 是Linux下一款功能强大的非交互流式文本编辑器(vim是交互式文本编辑器)，可以对文本文件的每一行数据匹配查询之后进行增、删、改、查等操作，支持按行、按字段、按正则匹配文本内容，灵活方便，特别适合于大文件的编辑.</p><p>sed是一种流编辑器，它一次处理一行内容,  将这行放入缓存(存区空间称为：模式空间)，然后才对这行进行处理，处理完后，将缓存区的内容发送到终端。</p><h2 id="sed处理数据原理"><a href="#sed处理数据原理" class="headerlink" title="sed处理数据原理"></a>sed处理数据原理</h2><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711095515087.png" alt="image-20200711095515087"></p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sed [选项参数] [模式匹配/sed程序命令] [文件名]</span><br><span class="line"></span><br><span class="line"># 模式匹配,sed会读取每一行数据到模式空间中, 之后判断当前行是否符合模式匹配要求,符合要求就会</span><br><span class="line">#     执行sed程序命令, 否则不会执行sed程序命令;如果不写匹配模式,那么每一行都会执行sex程序命令</span><br></pre></td></tr></table></figure><p>选项参数说明</p><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td><code>-e</code></td><td>直接在指令列模式上进行sed的动作编辑。它告诉sed将下一个参数解释为一个sed指令，只有当命令行上给出多个sed指令时才需要使用-e选项;一行命令语句可以执行多条sed命令</td></tr><tr><td><code>-i</code></td><td>直接对内容进行修改，不加-i时默认只是预览，不会对文件做实际修改</td></tr><tr><td><code>-f</code></td><td>后跟保存了sed指令的文件</td></tr><tr><td><code>-n</code></td><td>取消默认输出，sed默认会输出所有文本内容，使用-n参数后只显示处理过的行</td></tr><tr><td><code>-r ruguler              </code></td><td>使用扩展正则表达式，默认情况sed只识别基本正则表达式 *</td></tr></tbody></table><p>sed程序命令功能描述</p><table><thead><tr><th>命令</th><th>功能描述</th></tr></thead><tbody><tr><td><code>a</code></td><td>add新增，a的后面可以接字串，在下一行出现</td></tr><tr><td><code>c</code></td><td>change更改, 更改匹配行的内容</td></tr><tr><td>d</td><td>delete删除, 删除匹配的内容</td></tr><tr><td><code>i</code></td><td>insert插入, 向匹配行前插入内容</td></tr><tr><td><code>p</code></td><td>print打印, 打印出匹配的内容，通常与-n选项和用</td></tr><tr><td>s</td><td>substitute替换, 替换掉匹配的内容</td></tr><tr><td><code>=</code></td><td>用来打印被匹配的行的行号</td></tr><tr><td><code>n</code></td><td>读取下一行，遇到n时会自动跳入下一行</td></tr></tbody></table><p>特殊符号</p><table><thead><tr><th>命令</th><th>功能描述</th></tr></thead><tbody><tr><td><code>!</code></td><td>就像一个sed命令，放在限制条件后面, 对指定行以外的所有行应用命令(取反)</td></tr><tr><td>{sed命令1;sed命令2}</td><td>多个命令操作同一个的行</td></tr></tbody></table><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>sed.txt文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ABC</span><br><span class="line">itheima itheima</span><br><span class="line">itcast</span><br><span class="line">123</span><br><span class="line">itheima</span><br></pre></td></tr></table></figure><h2 id="示例：向文件中添加数据"><a href="#示例：向文件中添加数据" class="headerlink" title="示例：向文件中添加数据"></a>示例：向文件中添加数据</h2><h3 id="演示1-指定行号的前或后面添加数据"><a href="#演示1-指定行号的前或后面添加数据" class="headerlink" title="演示1: 指定行号的前或后面添加数据"></a>演示1: 指定行号的前或后面添加数据</h3><p>向第三行后面添加hello</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;3ahello&#x27; sed.txt</span><br></pre></td></tr></table></figure><blockquote><p>3 , 代表第三行</p><p>a,  代表在后面添加, 出现在下一行</p><p>注意这里没有修改源文件</p></blockquote><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710000018446.png" alt="image-20200710000018446"></p><p>向第三行前面添加hello</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;3ihello&#x27; sed.txt</span><br></pre></td></tr></table></figure><blockquote><p>3 , 代表第三行</p><p>i,  代表在前面添加, 出现在上一行</p><p>注意这里没有修改源文件</p></blockquote><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710000824539.png" alt="image-20200710000824539"></p><h3 id="演示2-指定内容前或后面添加数据"><a href="#演示2-指定内容前或后面添加数据" class="headerlink" title="演示2: 指定内容前或后面添加数据"></a>演示2: 指定内容前或后面添加数据</h3><p>向内容 <code>itheima</code> 后面添加 <code>hello</code> ，如果文件中有多行包括 ``itheima<code> </code>，则每一行后面都会添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;/itheima/ahello&#x27; sed.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710000117275.png" alt="image-20200710000117275"></p><p>向内容 <code>itheima</code> 前面添加 <code>hello</code> ，如果文件中有多行包括 ``itheima<code> </code>，则每一行前面都会添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;/itheima/ihello&#x27; sed.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710001012028.png" alt="image-20200710001012028"></p><h3 id="演示3-在最后一行前或后添加hello"><a href="#演示3-在最后一行前或后添加hello" class="headerlink" title="演示3: 在最后一行前或后添加hello"></a>演示3: 在最后一行前或后添加hello</h3><p>在最后一行后面添加hello</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;$ahello&#x27; sed.txt</span><br></pre></td></tr></table></figure><blockquote><p>$a:  最后一行后面添加</p></blockquote><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710000330765.png" alt="image-20200710000330765"></p><p>在最后一行前面添加hello</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;$ihello&#x27; sed.txt</span><br></pre></td></tr></table></figure><blockquote><p>$i:  最后一行前面添加</p></blockquote><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710001219163.png" alt="image-20200710001219163"></p><h2 id="示例-删除文件中的数据"><a href="#示例-删除文件中的数据" class="headerlink" title="示例: 删除文件中的数据"></a>示例: 删除文件中的数据</h2><h3 id="演示1-删除第2行"><a href="#演示1-删除第2行" class="headerlink" title="演示1: 删除第2行"></a>演示1: 删除第2行</h3><p>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed  &#x27;2d&#x27; sed.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> d 用于删除</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2d 删除第2行</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710165604688.png" alt="image-20200710165604688"></p><p>命令: 删除第1行,第4行数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;1d;4d&#x27; sed.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711112046339.png" alt="image-20200711112046339"></p><h3 id="演示2-删除奇数行"><a href="#演示2-删除奇数行" class="headerlink" title="演示2: 删除奇数行"></a>演示2: 删除奇数行</h3><p>从第一行开始删除，每隔2行就删掉一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;1~2d&#x27; sed.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1~2 从第1行开始, 每隔2行</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710170036140.png" alt="image-20200710170036140"></p><h3 id="演示3-删除指定范围的多行数据"><a href="#演示3-删除指定范围的多行数据" class="headerlink" title="演示3:  删除指定范围的多行数据"></a>演示3:  删除指定范围的多行数据</h3><p>删除从第1行到第3行的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;1,3d&#x27; sed.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1,3  从指定第1行开始到第3行结束</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710170338110.png" alt="image-20200710170338110"></p><h3 id="演示3-删除指定范围取反的多行数据"><a href="#演示3-删除指定范围取反的多行数据" class="headerlink" title="演示3:  删除指定范围取反的多行数据"></a>演示3:  删除指定范围取反的多行数据</h3><p>删除从第1行到第3行取反的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;1,3!d&#x27; sed.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1,3! 从指定第1行开始到第3行结束取反, 就是不在这个范围的行</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710171410645.png" alt="image-20200710171410645"></p><h3 id="演示4-删除最后一行"><a href="#演示4-删除最后一行" class="headerlink" title="演示4: 删除最后一行"></a>演示4: 删除最后一行</h3><p>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed  &#x27;$d&#x27;   sed.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710173137962.png" alt="image-20200710173137962"></p><h3 id="演示5-删除匹配itheima的行"><a href="#演示5-删除匹配itheima的行" class="headerlink" title="演示5: 删除匹配itheima的行"></a>演示5: 删除匹配itheima的行</h3><p>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;/itheima/d&#x27; sed.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710173601573.png" alt="image-20200710173601573"></p><h3 id="演示6-删除匹配行到最后一行"><a href="#演示6-删除匹配行到最后一行" class="headerlink" title="演示6: 删除匹配行到最后一行"></a>演示6: 删除匹配行到最后一行</h3><p>删除匹配itheima行到最后一行 , 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;/itheima/,$d&#x27; sed.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> , 代表范围匹配</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710174149348.png" alt="image-20200710174149348"></p><h3 id="演示7-删除匹配行及其后面一行"><a href="#演示7-删除匹配行及其后面一行" class="headerlink" title="演示7: 删除匹配行及其后面一行"></a>演示7: 删除匹配行及其后面一行</h3><p>删除匹配itheima行及其后面一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;/itheima/,+1d&#x27; sed.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710174655691.png" alt="image-20200710174655691"></p><h3 id="演示9-删除不匹配的行"><a href="#演示9-删除不匹配的行" class="headerlink" title="演示9: 删除不匹配的行"></a>演示9: 删除不匹配的行</h3><p>删除不匹配 <code>itheima</code> 或 <code>itcast</code> 的行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;/itheima\|itcast/!d&#x27; sed.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> \| 是正则表达式的或者 这里|需要转义, 所以为\|</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ! 取反</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711105205862.png" alt="image-20200711105205862"></p><h2 id="示例：更改文件中的数据"><a href="#示例：更改文件中的数据" class="headerlink" title="示例：更改文件中的数据"></a>示例：更改文件中的数据</h2><h3 id="演示1-将文件的第一行修改为hello"><a href="#演示1-将文件的第一行修改为hello" class="headerlink" title="演示1:将文件的第一行修改为hello"></a>演示1:将文件的第一行修改为hello</h3><p>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed  &#x27;1chello&#x27;  sed.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710110433788.png" alt="image-20200710110433788"></p><h3 id="演示2-将包含itheima的行修改为hello"><a href="#演示2-将包含itheima的行修改为hello" class="headerlink" title="演示2: 将包含itheima的行修改为hello"></a>演示2: 将包含itheima的行修改为hello</h3><p>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed  &#x27;/itheima/chello&#x27; sed.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710110651523.png" alt="image-20200710110651523"></p><h3 id="演示3-将最后一行修改为hello"><a href="#演示3-将最后一行修改为hello" class="headerlink" title="演示3: 将最后一行修改为hello"></a>演示3: 将最后一行修改为hello</h3><p>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;$chello&#x27; sed.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710111014651.png" alt="image-20200710111014651"></p><h3 id="演示4-将文件中的itheima替换为hello"><a href="#演示4-将文件中的itheima替换为hello" class="headerlink" title="演示4: 将文件中的itheima替换为hello"></a>演示4: 将文件中的itheima替换为hello</h3><p>将文件中的itheima替换为hello,默认只替换每行第一个itheima</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;s/itheima/hello/&#x27;  sed.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710154359291.png" alt="image-20200710154359291"></p><blockquote><p>注意 <code>&#39;s/itheima/hello/&#39;</code>  最后一个<code>/</code> 不可少</p></blockquote><p>将文本中所有的itheima都替换为hello, 全局替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;s/itheima/hello/g&#x27;  sed.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> g 代表匹配全局所有符合的字符</span></span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710154642832.png" alt="image-20200710154642832"></p><h3 id="演示5-将每行中第二个匹配替换"><a href="#演示5-将每行中第二个匹配替换" class="headerlink" title="演示5: 将每行中第二个匹配替换"></a>演示5: 将每行中第二个匹配替换</h3><p>将每行中第二个匹配的itheima替换为hello 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;s/itheima/hello/2&#x27;   sex.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710154829235.png" alt="image-20200710154829235"></p><h3 id="演示6-替换后的内容写入文件"><a href="#演示6-替换后的内容写入文件" class="headerlink" title="演示6: 替换后的内容写入文件"></a>演示6: 替换后的内容写入文件</h3><p>将每行中第二个匹配的itheima替换为hello ,  将替换后的内容写入到sed2.txt文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一种方式</span></span><br><span class="line">sed -n &#x27;s/itheima/hello/2pw sed2.txt&#x27; sed.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> w写入</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> p打印, -n只是获取</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二种方式</span></span><br><span class="line">sed -n &#x27;s/itheima/hello/2p &#x27; sed.txt &gt; sed2.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710161127555.png" alt="image-20200710161127555"></p><h3 id="演示7-正则表达式匹配替换"><a href="#演示7-正则表达式匹配替换" class="headerlink" title="演示7: 正则表达式匹配替换"></a>演示7: 正则表达式匹配替换</h3><p>匹配有 <code>i</code> 的行，替换匹配行中 <code>t</code> 后的所有内容为空 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;/i/s/t.*//g&#x27; sed.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> /t.*/ 表示逗号后的所又内容</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710162013813.png" alt="image-20200710162013813"></p><h3 id="演示8-每行末尾拼接test"><a href="#演示8-每行末尾拼接test" class="headerlink" title="演示8: 每行末尾拼接test"></a>演示8: 每行末尾拼接test</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;s/$/&amp; test&#x27; sed.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> &amp; 用于拼接</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200710164435499.png" alt="image-20200710164435499"></p><h3 id="演示9-每行行首添加注释"><a href="#演示9-每行行首添加注释" class="headerlink" title="演示9: 每行行首添加注释 #"></a>演示9: 每行行首添加注释 <code>#</code></h3><p>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;s/^/#/&#x27; sed.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711111533278.png" alt="image-20200711111533278"></p><h2 id="示例-查询文件或管道中的数据"><a href="#示例-查询文件或管道中的数据" class="headerlink" title="示例: 查询文件或管道中的数据"></a>示例: 查询文件或管道中的数据</h2><h3 id="需求1-查询含有-itcast-的行数据"><a href="#需求1-查询含有-itcast-的行数据" class="headerlink" title="需求1: 查询含有  itcast  的行数据"></a>需求1: 查询含有  <code>itcast</code>  的行数据</h3><p>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n &#x27;/itcast/p&#x27; sed.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711113348831.png" alt="image-20200711113348831"></p><h3 id="需求2-管道过滤查询"><a href="#需求2-管道过滤查询" class="headerlink" title="需求2: 管道过滤查询"></a>需求2: 管道过滤查询</h3><p>管道查询所有进程中含有sshd的进程信息命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | sed -n &#x27;/sshd/p&#x27;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711113226364.png" alt="image-20200711113226364"></p><h2 id="示例-多个sed程序命令执行"><a href="#示例-多个sed程序命令执行" class="headerlink" title="示例: 多个sed程序命令执行"></a>示例: 多个sed程序命令执行</h2><p>将sed.txt文件中的第1行删除并将 <code>itheima</code> 替换为 <code>itcast</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一种方式, 多个sed程序命令 在每个命令之前使用 -e 参数</span></span><br><span class="line">sed -e &#x27;1d&#x27; -e &#x27;s/itheima/itcast/g&#x27; sed.txt </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二种方式</span></span><br><span class="line">sed  &#x27;1d;s/itheima/itcast/g&#x27; sed.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711105707546.png" alt="image-20200711105707546"></p><h2 id="sed高级用法-缓存区数据交换"><a href="#sed高级用法-缓存区数据交换" class="headerlink" title="sed高级用法: 缓存区数据交换"></a>sed高级用法: 缓存区数据交换</h2><h3 id="模式空间与暂存空间介绍"><a href="#模式空间与暂存空间介绍" class="headerlink" title="模式空间与暂存空间介绍"></a>模式空间与暂存空间介绍</h3><ol><li><p>首先需要明白, sed处理文件是逐行处理的, 即<strong>读取一行处理一行,输出一行</strong>;</p></li><li><p>sed把文件读出来每一行存放的空间叫模式空间, 会在该空间中对读到的内容做相应处理;</p></li><li><p>此外sed还有一个额外的空间即暂存空间, 暂存空间刚开始里边只有个空行, 记住这一点;</p></li><li><p>sed可使用相应的命令从模式空间往暂存空间放入内容或从暂存空间取内容放入模式空间;</p><blockquote><p>2个缓存空间传输数据的目的是为了更好的处理数据, 一会参考案例学习  </p></blockquote></li></ol><h3 id="关于缓存区sed程度命令"><a href="#关于缓存区sed程度命令" class="headerlink" title="关于缓存区sed程度命令"></a>关于缓存区sed程度命令</h3><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>h</td><td>将<strong>模式空间</strong>里面的内容复制到<strong>暂存空间</strong>缓存区(覆盖方式)</td></tr><tr><td>H</td><td>将<strong>模式空间</strong>里面的内容复制到<strong>暂存空间</strong>缓存区(追加方式)</td></tr><tr><td>g</td><td>将<strong>暂存空间</strong>里面的内容复制到<strong>模式空间</strong>缓存区(覆盖方式)</td></tr><tr><td>G</td><td>将<strong>暂存空间</strong>里面的内容复制到<strong>模式空间</strong>缓存区(追加方式)</td></tr><tr><td>x</td><td>交换2个空间的内容</td></tr></tbody></table><h2 id="示例-缓存空间数据交换"><a href="#示例-缓存空间数据交换" class="headerlink" title="示例: 缓存空间数据交换"></a>示例: 缓存空间数据交换</h2><h3 id="演示1-第一行粘贴到最后1行"><a href="#演示1-第一行粘贴到最后1行" class="headerlink" title="演示1: 第一行粘贴到最后1行"></a>演示1: 第一行粘贴到最后1行</h3><p>将模式空间第一行复制到暂存空间(覆盖方式),并将暂存空间的内容复制到模式空间中的最后一行(追加方式)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;1h;$G&#x27; sed.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1h 从模式空间中将第一行数据复制到暂存空间(覆盖方式)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$G</span> 将暂存空间中的内容复制到模式空间中最后一行(追加方式)</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711103556835.png" alt="image-20200711103556835"></p><h3 id="演示2-第一行删除后粘贴到最后1行"><a href="#演示2-第一行删除后粘贴到最后1行" class="headerlink" title="演示2: 第一行删除后粘贴到最后1行"></a>演示2: 第一行删除后粘贴到最后1行</h3><p>将模式空间第一行复制到暂存空间(覆盖方式)并删除, 最后将暂存空间的内容复制到模式空间中的最后一行(追加方式)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;1&#123;h;d&#125;;$G&#x27; sed.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1&#123;h;d&#125;对模式空间中的第一行数据同时进行复制到暂存空间(覆盖方式)和删除模式空间中的第一行数据</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711103901519.png" alt="image-20200711103901519"></p><h3 id="演示3-第一行数据复制粘贴替换其他行数据"><a href="#演示3-第一行数据复制粘贴替换其他行数据" class="headerlink" title="演示3: 第一行数据复制粘贴替换其他行数据"></a>演示3: 第一行数据复制粘贴替换其他行数据</h3><p>将模式空间第一行复制到暂存空间(覆盖方式), 最后将暂存空间的内容复制到模式空间中替换从第2行开始到最后一行的每一行数据(覆盖方式)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;1h;2,$g&#x27; sed.txt</span><br></pre></td></tr></table></figure><p>运行命令</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711104451987.png" alt="image-20200711104451987"></p><h3 id="演示4-将前3行数据数据复制粘贴到最后一行"><a href="#演示4-将前3行数据数据复制粘贴到最后一行" class="headerlink" title="演示4: 将前3行数据数据复制粘贴到最后一行"></a>演示4: 将前3行数据数据复制粘贴到最后一行</h3><p>将前3行数据复制到暂存空间(追加方式), 之后将暂存空间的所有内容复制粘贴到模式空间最后一行(追加方式)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;1,3H;$G&#x27; sed.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711104856968.png" alt="image-20200711104856968"></p><h2 id="示例-给每一行添加空行"><a href="#示例-给每一行添加空行" class="headerlink" title="示例: 给每一行添加空行"></a>示例: 给每一行添加空行</h2><p>插入空行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed G -i sed.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> G 每行后面添加一个空行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -i 修改源文件</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711095724616.png" alt="image-20200711095724616"></p><h2 id="示例-删除所有的空行"><a href="#示例-删除所有的空行" class="headerlink" title="示例: 删除所有的空行"></a>示例: 删除所有的空行</h2><p>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;/^$/d&#x27; sed.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711095844232.png" alt="image-20200711095844232"></p><h1 id="Shell好用的工具：awk"><a href="#Shell好用的工具：awk" class="headerlink" title="Shell好用的工具：awk"></a>Shell好用的工具：awk</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时,显得尤为强大简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理, 因为切开的部分使用awk可以定义变量,运算符, 使用流程控制语句进行深度加工与分析。</p><blockquote><p>创始人 Alfred V. <strong>A</strong>ho、Peter J. <strong>W</strong>einberger和Brian W. <strong>K</strong>ernighan  awk由来是姓氏的首字母</p></blockquote><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk [options] &#x27;pattern&#123;action&#125;&#x27; &#123;filenames&#125;</span><br></pre></td></tr></table></figure><blockquote><p>pattern：表示AWK在数据中查找的内容，就是匹配模式</p><p>action：在找到匹配内容时所执行的一系列命令</p></blockquote><p>选项参数说明</p><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-F</td><td>指定输入文件拆分分隔符</td></tr><tr><td>-v</td><td>赋值一个用户定义变量</td></tr></tbody></table><h2 id="awk内置变量"><a href="#awk内置变量" class="headerlink" title="awk内置变量"></a>awk内置变量</h2><table><thead><tr><th>内置变量</th><th>含义</th></tr></thead><tbody><tr><td>ARGC</td><td>命令行参数个数</td></tr><tr><td>ARGV</td><td>命令行参数排列</td></tr><tr><td>ENVIRON</td><td>支持队列中系统环境变量的使用</td></tr><tr><td>FILENAME</td><td>awk浏览的文件名</td></tr><tr><td>FNR</td><td>浏览文件的记录数</td></tr><tr><td>FS</td><td>设置输入域分隔符，等价于命令行 -F选项</td></tr><tr><td>NF</td><td>浏览记录的域的个数, 根据分隔符分割后的列数</td></tr><tr><td>NR</td><td>已读的记录数, 也是行号</td></tr><tr><td>OFS</td><td>输出域分隔符</td></tr><tr><td>ORS</td><td>输出记录分隔符</td></tr><tr><td>RS</td><td>控制记录分隔符</td></tr><tr><td><code>$n</code></td><td><code>$0</code>变量是指整条记录。<code>$1</code>表示当前行的第一个域,<code>$2</code>表示当前行的第二个域,……以此类推。</td></tr><tr><td>$NF</td><td>$NF是number finally,表示最后一列的信息，跟变量NF是有区别的，变量NF统计的是每行列的总数</td></tr></tbody></table><h2 id="数据准备-1"><a href="#数据准备-1" class="headerlink" title="数据准备"></a>数据准备</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/passwd ./</span><br></pre></td></tr></table></figure><h2 id="示例-默认每行空格切割数据"><a href="#示例-默认每行空格切割数据" class="headerlink" title="示例 : 默认每行空格切割数据"></a>示例 : 默认每行空格切割数据</h2><p>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;abc 123 456&quot; | awk &#x27;&#123;print $1&quot;&amp;&quot;$2&quot;&amp;&quot;$3&#125;&#x27;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200712145458252.png" alt="image-20200712145458252"></p><h2 id="示例-打印含有匹配信息的行"><a href="#示例-打印含有匹配信息的行" class="headerlink" title="示例: 打印含有匹配信息的行"></a>示例: 打印含有匹配信息的行</h2><p>搜索passwd文件有root关键字的所有行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;/root/&#x27; passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">&#x27;/root/&#x27;</span> 是查找匹配模式, 没有action命令, 默认输出所有符合的行数据</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711163917949.png" alt="image-20200711163917949"></p><h2 id="示例-打印匹配行中第7列数据"><a href="#示例-打印匹配行中第7列数据" class="headerlink" title="示例: 打印匹配行中第7列数据"></a>示例: 打印匹配行中第7列数据</h2><p>搜索passwd文件有root关键字的所有行, 然后以”:”拆分并打印输出第7列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk -F: &#x27;/root/&#123;print $7&#125;&#x27; passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> -F: 以<span class="string">&#x27;:&#x27;</span>分隔符拆分每一个列(域)数据</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711164512294.png" alt="image-20200711164512294"></p><h2 id="示例-打印文件每行属性信息"><a href="#示例-打印文件每行属性信息" class="headerlink" title="示例: 打印文件每行属性信息"></a>示例: 打印文件每行属性信息</h2><p>统计passwd:  文件名，每行的行号，每行的列数，对应的完整行内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk -F &#x27;:&#x27; &#x27;&#123;print &quot;文件名:&quot; FILENAME &quot;,行号:&quot; NR &quot;,列数:&quot; NF &quot;,内容:&quot; $0&#125;&#x27; passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">&quot;文件名:&quot;</span> 用于拼接字符串</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711165433352.png" alt="image-20200711165433352"></p><p>使用printf替代print,可以让代码阅读型更好</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">awk -F &#x27;:&#x27; &#x27;&#123;printf(&quot;文件名:%5s,行号:%2s, 列数:%1s, 内容:%2s\n&quot;,FILENAME,NR,NF,$O)&#125;&#x27; passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">printf</span>(格式字符串,变量1,变量2,...)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式字符串: %ns 输出字符串,n 是数字，指代输出几个字符, n不指定自动占长度</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式字符串: %ni 输出整数,n 是数字，指代输出几个数字</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式字符串: %m.nf 输出浮点数,m 和 n 是数字，指代输出的整数位数和小数位数。如 %8.2f 代表共输出 8 位数，其中 2 位是小数，6 位是整数；</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711170720468.png" alt="image-20200711170720468"></p><h2 id="示例-打印第二行信息"><a href="#示例-打印第二行信息" class="headerlink" title="示例: 打印第二行信息"></a>示例: 打印第二行信息</h2><p>打印/etc/passwd/的第二行信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F &#x27;:&#x27; &#x27;NR==2&#123;printf(&quot;filename:%s,%s\n&quot;,FILENAME,$0)&#125;&#x27; passwd</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711171311183.png" alt="image-20200711171311183"></p><h2 id="示例-查找以c开头的资源"><a href="#示例-查找以c开头的资源" class="headerlink" title="示例: 查找以c开头的资源"></a>示例: 查找以c开头的资源</h2><p>awk过滤的使用,  查找当前目录下文件名以c开头的文件列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -a | awk &#x27;/^c/&#x27;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711171918200.png" alt="image-20200711171918200"></p><h2 id="示例-打印第一列"><a href="#示例-打印第一列" class="headerlink" title="示例: 打印第一列"></a>示例: 打印第一列</h2><p>按照”:” 分割查询第一列打印输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F &#x27;:&#x27; &#x27;&#123;print $1&#125;&#x27; passwd</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711172121503.png" alt="image-20200711172121503"></p><h2 id="示例-打印最后1列"><a href="#示例-打印最后1列" class="headerlink" title="示例: 打印最后1列"></a>示例: 打印最后1列</h2><p>按照”:” 分割查询最后一列打印输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F: &#x27;&#123;print $NF&#125;&#x27; passwd</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711172417497.png" alt="image-20200711172417497"></p><h2 id="示例-打印倒数第二列"><a href="#示例-打印倒数第二列" class="headerlink" title="示例: 打印倒数第二列"></a>示例: 打印倒数第二列</h2><p>按照”:” 分割查询倒数第二列打印输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk -F: &#x27;&#123;print $(NF-1)&#125;&#x27; passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> $(NF-N) N是几, 就是倒数第几列</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711173518580.png" alt="image-20200711173518580"></p><h2 id="示例-打印10到20行的第一列"><a href="#示例-打印10到20行的第一列" class="headerlink" title="示例: 打印10到20行的第一列"></a>示例: 打印10到20行的第一列</h2><p>获取第10到20行的第一列的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F: &#x27;&#123;if(NR&gt;=10 &amp;&amp; NR&lt;=20) print $1&#125;&#x27; passwd</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711173734821.png" alt="image-20200711173734821"></p><h2 id="示例-多分隔符使用"><a href="#示例-多分隔符使用" class="headerlink" title="示例: 多分隔符使用"></a>示例: 多分隔符使用</h2><p>“one:two/three”字符串按照多个分隔符”:”或者”/“ 分割, 并打印分割后每个列数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;one:two/three&quot; | awk -F &#x27;[:/]&#x27; &#x27;&#123;printf(&quot;%s\n%s\n%s\n%s\n&quot;,$0,$1,$2,$3)&#125;&#x27;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711174827654.png" alt="image-20200711174827654"></p><h2 id="示例-添加开始与结束内容"><a href="#示例-添加开始与结束内容" class="headerlink" title="示例: 添加开始与结束内容"></a>示例: 添加开始与结束内容</h2><p>给数据添加开始与结束</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo -e  &quot;abc\nabc&quot; | awk &#x27;BEGIN&#123;print &quot;开始...&quot;&#125; &#123;print $0&#125; END&#123;print &quot;结束...&quot;&#125;&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> BEGIN 在所有数据读取行之前执行；END 在所有数据执行之后执行。</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711181845642.png" alt="image-20200711181845642"></p><h2 id="示例-使用循环拼接分割后的字符串"><a href="#示例-使用循环拼接分割后的字符串" class="headerlink" title="示例 : 使用循环拼接分割后的字符串"></a>示例 : 使用循环拼接分割后的字符串</h2><p>“abc itheima     itcast   21” 使用空格分割后, 通过循环拼接在一起</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;abc itheima     itcast   21&quot; | awk -v str=&quot;&quot; -F &#x27;[ ]+&#x27; &#x27;&#123;for(n=1;n&lt;=NF;n++)&#123; str=str$n&#125; print str &#125;&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -v 定义变量</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711213649299.png" alt="image-20200711213649299"></p><h2 id="示例-操作指定数字运算"><a href="#示例-操作指定数字运算" class="headerlink" title="示例: 操作指定数字运算"></a>示例: 操作指定数字运算</h2><p>将passwd文件中的用户id增加数值1并输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;2.1&quot; | awk -v i=1 &#x27;&#123;print $0+i&#125;&#x27;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711215839824.png" alt="image-20200711215839824"></p><h2 id="示例-切割ip"><a href="#示例-切割ip" class="headerlink" title="示例: 切割ip"></a>示例: 切割ip</h2><p>切割IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig | awk &#x27;/broadcast/&#123;print&#125;&#x27; | awk -F &quot; &quot; &#x27;&#123;print $2&#125;&#x27;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200711220230406.png" alt="image-20200711220230406"></p><h2 id="示例-显示空行行号"><a href="#示例-显示空行行号" class="headerlink" title="示例: 显示空行行号"></a>示例: 显示空行行号</h2><p>查询sed.txt中空行所在的行号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;G&#x27; sed.txt | awk &#x27;/^$/&#123;print NR&#125;&#x27;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200712085616584.png" alt="image-20200712085616584"></p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>grep , sed ,awk , cut 文本字符串操作四剑客的区别</p><blockquote><p>grep：用于查找匹配的行</p><p>cut：  截取数据. 截取某个文件中的列, 重点是按照列分割,  这个命令不适合截取文件中有多个空白字符的字段</p><p>sed： 增删改查数据. sed用于在文件中以行来截取数据进行增\删\改\查</p><p>awk：截取分析数据.  可以在某个文件中是以竖列来截取分析数据,  如果字段之间含有很多空白字符也可以获取需要的数据, awk是一种语言,可以深入分析文件数据</p></blockquote><h1 id="Shell好用的工具：sort"><a href="#Shell好用的工具：sort" class="headerlink" title="Shell好用的工具：sort"></a>Shell好用的工具：sort</h1><h2 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h2><p>能够使用sort对字符串升序或降序排序</p><p>能够使用sort 对数字升序或降序</p><p>能够使用sort 对多列进行排序</p><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><p>sort命令是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出或重定向输出到指定文件。</p><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort (options) 参数</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>==-n==</td><td>number,依照数值的大小排序</td></tr><tr><td>==-r==</td><td>reverse, 以相反的顺序来排序</td></tr><tr><td>==-t 分隔字符==</td><td>设置排序时所用的分隔字符, 默认空格是分隔符</td></tr><tr><td>==-k==</td><td>指定需要排序的列</td></tr><tr><td>-d</td><td>排序时，处理英文字母、数字及空格字符外，忽略其他的字符。</td></tr><tr><td>-f</td><td>排序时，将小写字母视为大写字母</td></tr><tr><td>-b</td><td>忽略每行前面开始出的空格字符</td></tr><tr><td>==-o 输出文件==</td><td>将排序后的结果存入指定的文件</td></tr><tr><td>-u</td><td>意味着是唯一的(unique)，输出的结果是去完重了的</td></tr><tr><td>-m</td><td>将几个排序好的文件进行合并</td></tr></tbody></table><p>参数：指定待排序的文件列表</p><h2 id="数据准备-2"><a href="#数据准备-2" class="headerlink" title="数据准备"></a>数据准备</h2><p>sort.txt文本文件代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">张三 30  </span><br><span class="line">李四 95  </span><br><span class="line">播仔 85 </span><br><span class="line">播仔 85</span><br><span class="line">播仔 86</span><br><span class="line">AA 85</span><br><span class="line">播妞 100</span><br></pre></td></tr></table></figure><h2 id="示例1-数字升序"><a href="#示例1-数字升序" class="headerlink" title="示例1: 数字升序"></a>示例1: 数字升序</h2><p>按照“ ”空格分割后的第2列数字升序排序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sort -t &quot; &quot; -k2n,2 sort.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> -t <span class="string">&quot; &quot;</span> 代表使用空格分隔符拆分列</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -k 2n,2 代表根据从第2列开始到第2列结束进行数字升序, 仅对第2列排序</span></span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713012421583.png" alt="image-20200713012421583"></p><h2 id="示例2-数字升序去重"><a href="#示例2-数字升序去重" class="headerlink" title="示例2: 数字升序去重"></a>示例2: 数字升序去重</h2><p>先按照“ ”空格分割后的,  然后,按照第2列数字升序排序,  最后对所有列去重</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort -t &quot; &quot; -k2n,2 -uk1,2 sort.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713012712536.png" alt="image-20200713012712536"></p><blockquote><p>注意: 先排序再去重</p></blockquote><h2 id="示例3-数字升序去重结果保存到文件"><a href="#示例3-数字升序去重结果保存到文件" class="headerlink" title="示例3: 数字升序去重结果保存到文件"></a>示例3: 数字升序去重结果保存到文件</h2><p>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort -t &quot; &quot; -k2n,2 -uk1,2 -o sort2.txt sort.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713012900639.png" alt="image-20200713012900639"></p><h2 id="示例4-数字降序去重"><a href="#示例4-数字降序去重" class="headerlink" title="示例4: 数字降序去重"></a>示例4: 数字降序去重</h2><p>先按照“ ”空格分割后的,  然后,按照第2列数字降序排序,  最后对所有列去重</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort -t &quot; &quot; -k2nr,2 -uk1,2 sort.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713013216947.png" alt="image-20200713013216947"></p><h2 id="示例5-多列排序"><a href="#示例5-多列排序" class="headerlink" title="示例5: 多列排序"></a>示例5: 多列排序</h2><p>数据准备sort3.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">公司A,部门A,3</span><br><span class="line">公司A,部门B,0</span><br><span class="line">公司A,部门C,10</span><br><span class="line">公司A,部门D,9</span><br><span class="line">公司B,部门A,30</span><br><span class="line">公司B,部门B,40</span><br><span class="line">公司B,部门C,43</span><br><span class="line">公司B,部门D,1</span><br><span class="line">公司C,部门A,30</span><br><span class="line">公司C,部门B,9</span><br><span class="line">公司C,部门C,100</span><br><span class="line">公司C,部门D,80</span><br><span class="line">公司C,部门E,60</span><br></pre></td></tr></table></figure><p>要求:  以”,”分割先对第一列字符串升序,  再对第3列数字降序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort -t &quot;,&quot; -k1,1 -k3nr,3 sort3.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713013821197.png" alt="image-20200713013821197"></p><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><p>能够使用sort对字符串升序或降序排序</p><blockquote><p>字符串升序: <code>sort -kstart,end 文件</code></p><p>字符串降序: <code>sort -kstartr,end 文件</code></p></blockquote><p>能够使用sort 对数字升序或降序</p><blockquote><p>数字升序: <code>sort -kstartn,end 文件</code></p><p>数字降序: <code>sort -kstartnr,end 文件</code></p></blockquote><p>能够使用sort 对多列进行排序</p><blockquote><p><code>sort -kstart[nr],end  -kstart[nr],end ... 文件</code></p></blockquote><h1 id="面试题：查空行"><a href="#面试题：查空行" class="headerlink" title="面试题：查空行"></a>面试题：查空行</h1><p>问题：使用Linux命令查询file.txt中空行所在的行号</p><p>file1.txt数据准备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">itheima itheima</span><br><span class="line"></span><br><span class="line">itcast</span><br><span class="line">123</span><br><span class="line"></span><br><span class="line">itheima</span><br></pre></td></tr></table></figure><p>答案：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;/^$/&#123;print NR&#125;&#x27; file1.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713081907537.png" alt="image-20200713081907537"></p><h1 id="面试题：求一列的和"><a href="#面试题：求一列的和" class="headerlink" title="面试题：求一列的和"></a>面试题：求一列的和</h1><p>问题：有文件file2.txt内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三 40</span><br><span class="line">李四 50</span><br><span class="line">王五 60</span><br></pre></td></tr></table></figure><p>使用Linux命令计算第二列的和并输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;sum+=$2&#125; END&#123;print &quot;求和: &quot;sum&#125;&#x27; file2.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713082237986.png" alt="image-20200713082237986"></p><h1 id="面试题：检查文件是否存在"><a href="#面试题：检查文件是否存在" class="headerlink" title="面试题：检查文件是否存在"></a>面试题：检查文件是否存在</h1><p>问题：Shell脚本里如何检查一个文件是否存在？如果不存在该如何处理？</p><p>答: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if [ -e /root/file1.txt ]; then  echo &quot;文件存在&quot;; else echo &quot;文件不存在&quot;; fi</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713082603013.png" alt="image-20200713082603013"></p><h1 id="面试题：数字排序"><a href="#面试题：数字排序" class="headerlink" title="面试题：数字排序"></a>面试题：数字排序</h1><p>问题：用shell写一个脚本，对文本中无序的一列数字排序</p><p>cat file3.txt文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">10</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>答</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort -n file3.txt | awk &#x27;&#123;sum+=$1; print $1&#125; END&#123;print &quot;求和: &quot;sum&#125;&#x27;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713083045742.png" alt="image-20200713083045742"></p><h1 id="面试题：搜索指定目录下文件内容"><a href="#面试题：搜索指定目录下文件内容" class="headerlink" title="面试题：搜索指定目录下文件内容"></a>面试题：搜索指定目录下文件内容</h1><p>问题：请用shell脚本写出查找当前文件夹（/root）下所有的文本文件内容中包含有字符”123”的文件名称?</p><p>答:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r &quot;123&quot; /root | cut -d &quot;:&quot; -f 1| sort -u</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713083912322.png" alt="image-20200713083912322"></p><h1 id="面试题：批量生成文件名"><a href="#面试题：批量生成文件名" class="headerlink" title="面试题：批量生成文件名"></a>面试题：批量生成文件名</h1><p>问题: 批量生产指定数目的文件,文件名采用”纳秒”命名</p><p>答: file4.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">read -t 30 -p &quot;请输入创建文件的数目:&quot; n</span><br><span class="line">test=$(echo $n | sed &#x27;s/[0-9]//g&#x27;) #检测非数字输入</span><br><span class="line">if [ -n &quot;$n&quot; -a -z &quot;$test&quot; ] #检测空输入</span><br><span class="line">then</span><br><span class="line">        for ((i=0;i&lt;$n;i=i+1 ))</span><br><span class="line">        do</span><br><span class="line">                name=$(date +%N)</span><br><span class="line">                [ ! -d ./temp ] &amp;&amp;  mkdir -p ./temp</span><br><span class="line">                touch &quot;./temp/$name&quot;</span><br><span class="line">                echo &quot;创建 $name 成功!&quot;</span><br><span class="line">        done</span><br><span class="line">        else</span><br><span class="line">                echo &quot;创建失败&quot;</span><br><span class="line">                exit 1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713085107848.png" alt="image-20200713085107848"></p><h1 id="面试题：批量改名"><a href="#面试题：批量改名" class="headerlink" title="面试题：批量改名"></a>面试题：批量改名</h1><p>问题: 将/root/temp目录下所有文件名重命名为”旧文件名-递增数字”?</p><p>重命名命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename 旧文件名 新文件名 旧文件所在位置</span><br></pre></td></tr></table></figure><p>脚本代码file5.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">filenames=$(ls /root/temp)</span><br><span class="line">number=1</span><br><span class="line">for name in $filenames</span><br><span class="line">do</span><br><span class="line">        printf &quot;命令前:%s&quot; $&#123;name&#125;</span><br><span class="line">        newname=$&#123;name&#125;&quot;-&quot;$&#123;number&#125;</span><br><span class="line">        rename $name $&#123;newname&#125; /root/temp/*</span><br><span class="line">        let number++ #每个改名后的文件名后缀数字加1</span><br><span class="line">        printf &quot;重命名后:%s \n&quot; $&#123;newname&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713091236973.png" alt="image-20200713091236973"></p><h1 id="面试题：批量创建用户"><a href="#面试题：批量创建用户" class="headerlink" title="面试题：批量创建用户"></a>面试题：批量创建用户</h1><p>问题: 根据users.txt中提供的用户列表,一个名一行, 批量添加用户到linux系统中</p><p>已知users.txt数据准备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user1</span><br><span class="line">user2</span><br></pre></td></tr></table></figure><p>知识点分析1: 添加用户命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd 用户名</span><br></pre></td></tr></table></figure><p>知识点分析2: 设置每个用户密码默认密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;123456&quot; | passwd --stdin 用户名</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713092318381.png" alt="image-20200713092318381"></p><p>面试题答案: 脚本代码file6.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">ULIST=$(cat /root/users.txt)  ##/root/users.txt  里面存放的是用户名，一个名一行</span><br><span class="line">for UNAME in $ULIST</span><br><span class="line">do</span><br><span class="line">        useradd $UNAME</span><br><span class="line">        echo &quot;123456&quot; | passwd --stdin $UNAME &amp;&gt;/dev/null</span><br><span class="line">        [ $? -eq 0 ] &amp;&amp; echo &quot;$UNAME用户名与密码添加初始化成功!&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713093129265.png" alt="image-20200713093129265"></p><h1 id="面试题：筛选单词"><a href="#面试题：筛选单词" class="headerlink" title="面试题：筛选单词"></a>面试题：筛选单词</h1><p>问题: 根据给出的数据输出里面单词长度大于3的单词</p><p>数据准备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I may not be able to change the past, but I can learn from it.</span><br></pre></td></tr></table></figure><p>shell脚本file7.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;I may not be able to change the past, but I can learn from it.&quot; | awk -F &quot;[ ,.]&quot; &#x27;&#123;for(i=1;i&lt;NF;i++)&#123; if(length($i)&gt;3)&#123;print $i&#125;&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713101959074.png" alt="image-20200713101959074"></p><h1 id="面试题：单词及字母去重排序"><a href="#面试题：单词及字母去重排序" class="headerlink" title="面试题：单词及字母去重排序"></a>面试题：单词及字母去重排序</h1><p>问题</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、按单词出现频率降序排序！</span><br><span class="line"><span class="number">2</span>、按字母出现频率降序排序！</span><br></pre></td></tr></table></figure><p>file8.txt 文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No. The Bible says Jesus had compassion2 on them for He saw them as sheep without a shepherd. They were like lost sheep, lost in their sin. How the Lord Jesus loved them! He knew they were helpless and needed a shepherd. And the Good Shepherd knew He had come to help them. But not just the people way back then. For the Lord Jesus knows all about you, and loves you too, and wants to help you.</span><br></pre></td></tr></table></figure><p>按照单词出现频率降序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F &quot;[,. ]+&quot; &#x27;&#123;for(i=1;i&lt;=NF;i++)S[$i]++&#125;END&#123;for(key in S)print S[key],key&#125;&#x27; file8.txt |sort -rn|head</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713101616727.png" alt="image-20200713101616727"></p><p>按照字符出现频率降序前10个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F &quot;&quot; &#x27;&#123;for(i=1;i&lt;=NF;i++)S[$i]++&#125;END&#123;for(key in S)print S[key],key&#125;&#x27; file8.txt |sort -rn|head</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713101521632.png" alt="image-20200713101521632"></p><h1 id="面试题：扫描网络内存活主机"><a href="#面试题：扫描网络内存活主机" class="headerlink" title="面试题：扫描网络内存活主机"></a>面试题：扫描网络内存活主机</h1><p>问题:  扫描192.168.56.1到192.168.56.254之间ip的是否存活, 并输出是否在线?</p><p>服务器ip存活分析</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping ip地址 -c 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果ip地址存活发送2个数据包会至少接收返回1个数据包</span></span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713021841637.png" alt="image-20200713021841637"></p><p>完整脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">count=0</span><br><span class="line">for i  in 192.168.56.&#123;1..254&#125;</span><br><span class="line">do</span><br><span class="line">    # 使用ping命令发送2个包测试, 并获取返回接收到包的个数</span><br><span class="line">    receive=$(ping $i -c 2|awk &#x27;NR==6&#123;print $4&#125;&#x27;)</span><br><span class="line">    # 接收返回包大于0 说明主机在线</span><br><span class="line">    if [ $&#123;receive&#125; -gt 0 ]</span><br><span class="line">    then</span><br><span class="line">        echo &quot;$&#123;i&#125; 在线&quot;</span><br><span class="line">        ((count+=1))</span><br><span class="line">    else</span><br><span class="line">        echo &quot;$&#123;i&#125; 不在线&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line">echo &quot;在线服务器有:&quot;$count&quot;个&quot;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713021609950.png" alt="image-20200713021609950"></p><h1 id="面试题：MySQL分库备份"><a href="#面试题：MySQL分库备份" class="headerlink" title="面试题：MySQL分库备份"></a>面试题：MySQL分库备份</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">user=root      #用户名</span><br><span class="line">pass=root      #密码</span><br><span class="line">backfile=/root/mysql/backup #备份路径</span><br><span class="line">[ ! -d $backfile ] &amp;&amp; mkdir -p $backfile #判断是否有备份路径</span><br><span class="line">cmd=&quot;mysql -u$user -p$pass&quot;  #登录数据库</span><br><span class="line">dump=&quot;mysqldump -u$user -p$pass &quot; #mysqldump备份参数</span><br><span class="line">dblist=`$cmd -e &quot;show databases;&quot; 2&gt;/dev/null |sed 1d|egrep -v &quot;_schema|mysql&quot;` #获取库名列表</span><br><span class="line">echo &quot;需要备份的数据列表:&quot;</span><br><span class="line">echo $dblist</span><br><span class="line">echo &quot;开始备份:&quot;</span><br><span class="line">for db_name in $dblist #for循环备份库列表</span><br><span class="line">do</span><br><span class="line"> printf &#x27;正在备份数据库:%s&#x27; $&#123;db_name&#125;</span><br><span class="line"><span class="meta"> $</span><span class="bash">dump <span class="variable">$db_name</span> 2&gt;/dev/null |gzip &gt;<span class="variable">$&#123;backfile&#125;</span>/<span class="variable">$&#123;db_name&#125;</span>_$(date +%m%d).sql.gz <span class="comment">#库名+时间备份打包至指定路径下</span></span></span><br><span class="line"> printf &#x27;,备份完成\n&#x27;</span><br><span class="line">done</span><br><span class="line">echo &quot;全部备份完成!!!&quot;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713032753334.png" alt="image-20200713032753334"></p><h1 id="面试题：MySQL数据库分库分表备份"><a href="#面试题：MySQL数据库分库分表备份" class="headerlink" title="面试题：MySQL数据库分库分表备份"></a>面试题：MySQL数据库分库分表备份</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">user=root      #用户名</span><br><span class="line">pass=root      #密码</span><br><span class="line">backfile=/root/mysql/backup #备份路径</span><br><span class="line">[ ! -d $backfile ] &amp;&amp; mkdir -p $backfile #判断是否有备份路径</span><br><span class="line">cmd=&quot;mysql -u$user -p$pass&quot;  #登录数据库</span><br><span class="line">dump=&quot;mysqldump -u$user -p$pass &quot; #mysqldump备份参数</span><br><span class="line">dblist=`$cmd -e &quot;show databases;&quot; 2&gt;/dev/null |sed 1d|egrep -v &quot;_schema|mysql&quot;` #获取库名列表</span><br><span class="line">echo &quot;需要备份的数据列表:&quot;</span><br><span class="line">echo $dblist</span><br><span class="line">echo &quot;开始备份:&quot;</span><br><span class="line">for db_name in $dblist #for循环备份库列表</span><br><span class="line">do</span><br><span class="line"> printf &#x27;正在备份数据库:%s\n&#x27; $&#123;db_name&#125;</span><br><span class="line"> tables=`mysql -u$user -p&quot;$pass&quot; -e &quot;use $db_name;show tables;&quot; 2&gt;/dev/null|sed 1d`</span><br><span class="line"> for j in $tables</span><br><span class="line">  do</span><br><span class="line">    printf &#x27;正在备份数据库 %s 表 %s &#x27; $&#123;db_name&#125; $&#123;j&#125;</span><br><span class="line">    $dump -B --databases $db_name --tables $j 2&gt;/dev/null &gt; $&#123;backfile&#125;/$&#123;db_name&#125;-$&#123;j&#125;-`date +%m%d`.sql</span><br><span class="line">    printf &#x27;,备份完成\n&#x27;</span><br><span class="line">  done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> printf &#x27;数据库 %s 备份完成\n&#x27; $&#123;db_name&#125;</span><br><span class="line">done</span><br><span class="line">echo &quot;全部备份完成!!!&quot;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200713032458346.png" alt="image-20200713032458346"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Shell好用的工具：-cut&quot;&gt;&lt;a href=&quot;#Shell好用的工具：-cut&quot; class=&quot;headerlink&quot; title=&quot;Shell好用的工具： cut&quot;&gt;&lt;/a&gt;Shell好用的工具： cut&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="运维" scheme="http://liujun1997.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Linux Shell" scheme="http://liujun1997.github.io/tags/Linux-Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell-3</title>
    <link href="http://liujun1997.github.io/2021/09/04/Shell-3/"/>
    <id>http://liujun1997.github.io/2021/09/04/Shell-3/</id>
    <published>2021-09-04T11:39:55.000Z</published>
    <updated>2022-04-23T12:25:27.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell计算命令：expr命令详解"><a href="#Shell计算命令：expr命令详解" class="headerlink" title="Shell计算命令：expr命令详解"></a>Shell计算命令：expr命令详解</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>expr (evaluate expressions 的缩写)，译为“表达式求值”。Shell expr 是一个功能强大，并且比较复杂的命令，它除了可以实现整数计算，还可以结合一些选项对字符串进行处理，例如计算字符串长度、字符串比较、字符串匹配、字符串提取等.</p><h2 id="求值表达式-已讲"><a href="#求值表达式-已讲" class="headerlink" title="求值表达式(已讲)"></a>求值表达式(已讲)</h2><p>计算语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">expr 算术运算符表达式</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如: expr 1 + 1  返回: 2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如: expr \( 10 + 10 \) \* 2 + 100 返回:140</span></span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703102043699.png" alt="image-20200703102043699"></p><p>获取计算结果赋值给新变量语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result=`expr 算术运算符表达式`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如: result=`expr 1 + 1`  输出result得到结果: 2</span></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="字符串语法"><a href="#字符串语法" class="headerlink" title="字符串语法"></a>字符串语法</h2><p>计算字符串的长度语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr length 字符串</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如: expr length <span class="string">&quot;itheima&quot;</span>  返回: 7</span></span><br></pre></td></tr></table></figure><p>截取字符串语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">expr substr 字符串 start end</span><br><span class="line"><span class="meta">#</span><span class="bash"> start 截取字符串的起始位置, 从1开始</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> end 截取字符串的结束位置, 包含这个位置截取</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如 expr substr <span class="string">&quot;itheima&quot;</span> 1 2  返回: it</span></span><br></pre></td></tr></table></figure><p>获取第一个字符在字符串中出现的位置语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr index 被查找字符串  需要查找的字符</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如 expr index <span class="string">&quot;itheima&quot;</span> t  会返回: 2</span> </span><br></pre></td></tr></table></figure><p>正则表达式匹配1语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">expr match 字符串 正则表达式</span><br><span class="line"><span class="meta">#</span><span class="bash"> 正则表达式默认带有^ ,  代表以什么开头</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回值为符合匹配字符的长度, 否则返回为0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如: expr match <span class="string">&quot;itheima&quot;</span> <span class="string">&quot;.*m&quot;</span>  会返回: 6</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 正则表达式通配符<span class="string">&quot;.&quot;</span>代表任意一个字符</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 正则表达式通配符<span class="string">&quot;*&quot;</span>代表签名的字符可以出现0到多次</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">&quot;.*m&quot;</span> 含义为匹配字符串中m前面的字符串长度</span> </span><br></pre></td></tr></table></figure><p>正则表表达式匹配2语法,  功能与语法1一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">expr 字符串 : 正则表达式</span><br><span class="line"><span class="meta">#</span><span class="bash"> 正则表达式默认带有^ ,  代表以什么开头</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回值为符合匹配字符的长度, 否则返回为0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如: expr <span class="string">&quot;itheima&quot;</span> : <span class="string">&quot;.*m&quot;</span>  会返回: 6</span></span><br></pre></td></tr></table></figure><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>需求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 四则运算: ( 10 + 10 ) * 2 + 100</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算<span class="string">&quot;itheima&quot;</span>字符串的长度</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取<span class="string">&quot;itheima&quot;</span>字符串中<span class="string">&quot;t&quot;</span>第一个字符在字符串中出现的位置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 正则表达式match匹配查找itheima字符串中m前面任意字符的总长度</span></span><br></pre></td></tr></table></figure><p>cal1.sh脚本文件代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 四则运算</span></span><br><span class="line">result=`expr \( 10 + 10 \) \* 2 + 100`</span><br><span class="line">echo &quot;(10+10)*2+100=$&#123;result&#125;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算字符串的长度</span></span><br><span class="line">echo &quot;itheima字符串长度=`expr length &quot;itheima&quot;`&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取第一个字符在字符串中出现的位置</span></span><br><span class="line">echo &quot;itheima字符串中第一个t的位置=`expr index &quot;itheima&quot; t`&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 正则表达式匹配1</span></span><br><span class="line">echo &quot;正则表达式match匹配查找itheima字符串中m前面任意字符的总长度=`expr match &quot;itheima&quot; &quot;.*m&quot;`&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 正则表达式匹配2</span></span><br><span class="line">echo &quot;正则表达式匹配查找itheima字符串中m前面任意字符的总长度=`expr &quot;itheima&quot; : &quot;.*m&quot;`&quot;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703104041895.png" alt="image-20200703104041895"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>expr命令的作用</p><blockquote><ol><li><p>整数计算</p><p><code>expr 整数运算表达式</code></p></li><li><p>字符串操作</p><p><code>expr length 字符串</code>  获取字符串的长度</p><p><code>expr substr 字符串 start end</code>  截取字符串</p><p><code>expr index 字符串  查找的字符</code>  查找字符在字符串中第一次出现的位置,  位置从1开始的</p><p><code>expr match 字符串  正则表达式</code></p><p><code>expr 字符串: 正则表达式</code></p></li></ol></blockquote><h1 id="Shell计算命令：-命令详解"><a href="#Shell计算命令：-命令详解" class="headerlink" title="Shell计算命令：(())命令详解"></a>Shell计算命令：(())命令详解</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>能够使用(())进行整数的数学运算</p><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>双小括号 (( )) , 用于进行数学运算表达式的执行 , 将数学运算表达式放在<code>((</code>和<code>))</code>之间。</p><p>可以使用<code>$</code>获取 (( )) 表达式命令的结果，这和使用<code>$</code>获得变量值是一样的。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((表达式))</span><br></pre></td></tr></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><table><thead><tr><th>运算操作符/运算命令</th><th>说明</th></tr></thead><tbody><tr><td>((a=1+6))<br> ((b=a-1)) <br>((c=a+b))</td><td>这种写法可以在计算完成后给变量赋值。以 ((b=a-1)) 为例，<br>即将 a-1 的运算结果赋值给变量 c。  注意，使用变量时不用加<code>$</code>前缀，<br>(( )) 会自动解析变量名。</td></tr><tr><td><code>a=$((1+6)</code><br> <code>b=$((a-1))</code><br> <code>c=$((a+b))</code></td><td>可以在 (( )) 前面加上<code>$</code>符号获取 (( )) 命令的执行结果，<br>也即获取整个表达式的值。以 <code>c=$((a+b))</code> 为例，即将 a+b 这个<br>表达式的运算结果赋值给变量 c。  注意，如果 c=((a+b)) 这样的写<br>法是错误的，不加<code>$</code>就不能取得表达式的结果。</td></tr><tr><td>((a&gt;7 &amp;&amp; b==c))</td><td>(( )) 也可以进行逻辑运算，在 if 语句中常会使用逻辑运算。</td></tr><tr><td>echo $((a+10))</td><td>需要立即输出表达式的运算结果时，可以在 (( )) 前面加<code>$</code>符号。</td></tr><tr><td>((a=3+5, b=a+10))</td><td>对多个表达式同时进行计算, 多表表达式使用”,”号隔开</td></tr></tbody></table><blockquote><p>注意:  符号之间有无空格都可以 , (( a = 1 + 6 )) 等价于 ((a=1+6))</p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>需求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 计算1+6赋值给变量a</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算变量a-1赋值给变量b</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算变量a+变量b赋值给变量c</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印变量a,变量b, 变量c的值</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> $赋值写法</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (())多个表达式计算赋值</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span>输出直接使用(())</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (()) 用于逻辑表达式 在<span class="keyword">if</span>中使用</span></span><br></pre></td></tr></table></figure><p>calculatej2.sh脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算1+6赋值给变量a</span></span><br><span class="line">((a=1+6))</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算变量a-1赋值给变量b</span></span><br><span class="line">((b=a-1))</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算变量a+变量b赋值给变量c</span></span><br><span class="line">((c=a+b))</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印变量a,变量b, 变量c的值</span></span><br><span class="line">echo &quot;a=$&#123;a&#125;,b=$&#123;b&#125;,c=$&#123;c&#125;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> $赋值写法</span></span><br><span class="line">a=$((1+6)) b=$((a-1)) c=$((a+b))</span><br><span class="line">echo &quot;a=$&#123;a&#125;,b=$&#123;b&#125;,c=$&#123;c&#125;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (())多个表达式计算赋值</span></span><br><span class="line">((a=1+6,b=a-1,c=a+b))</span><br><span class="line">echo &quot;a=$&#123;a&#125;,b=$&#123;b&#125;,c=$&#123;c&#125;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span>输出直接使用(())</span></span><br><span class="line">echo &quot;1+6=$((1+6))&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (()) 用于逻辑表达式 在<span class="keyword">if</span>中使用</span></span><br><span class="line">if ((a&gt;7 &amp;&amp; b==c))</span><br><span class="line">then</span><br><span class="line">        echo &quot;a&gt;7 &amp;&amp; b==c 成立&quot;</span><br><span class="line">else</span><br><span class="line">        echo &quot;a&gt;7 &amp;&amp; b==c 不成立&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703112053690.png" alt="image-20200703112053690"></p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>(())的用法</p><blockquote><p>括号内赋值:  ((变量名=整数表达式))</p><p>括号外赋值: 变量名=$((整数表达式))</p><p>多表达式赋值: ((变量名1=整数表达式1,变量名2=整数表达式2,…))</p><p>与if条件句配合使用:  if ((整数表达式))</p></blockquote><h1 id="Shell计算命令：let命令详解"><a href="#Shell计算命令：let命令详解" class="headerlink" title="Shell计算命令：let命令详解"></a>Shell计算命令：let命令详解</h1><h2 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h2><p>能够使用let进行整数的数学运算赋值</p><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>let 命令和双小括号 (( )) 在数字计算方面功能一样.  但是没有(())功能强大,  let只能用于赋值计算, 不能直接输出, 不可以条件判断一起使用</p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let 赋值表达式</span><br></pre></td></tr></table></figure><blockquote><p>注意</p><ol><li><p>语法功能等价于<code>((表达式))</code></p></li><li><p>多个表达式之间使用空格,  不是”,”号</p></li><li><p>对于类似<code>let a+b</code>这样的写法，Shell 虽然计算了 a+b 的值，但却将结果丢弃, 如果 <code>echo let a+b</code> 会直接输出字符串 <code>a+b</code> ；若不想这样，可以使用<code>let sum=a+b</code>将 a+b 的结果保存在变量 sum 中。</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703113800668.png" alt="image-20200703113800668"></p><p>输出建议使用(())</p></li></ol></blockquote><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><p>需求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 计算变量a-1赋值给变量b</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算变量a+变量b赋值给变量c</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印变量a,变量b, 变量c的值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">let</span>多个表达式计算赋值</span></span><br></pre></td></tr></table></figure><p>calculate3.sh脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算1+6赋值给变量a</span></span><br><span class="line">let a=1+6</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算变量a-1赋值给变量b</span></span><br><span class="line">let b=a-1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算变量a+变量b赋值给变量c</span></span><br><span class="line">let c=a+b</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印变量a,变量b, 变量c的值</span></span><br><span class="line">echo &quot;a=$&#123;a&#125;,b=$&#123;b&#125;,c=$&#123;c&#125;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">let</span>多个表达式计算赋值</span></span><br><span class="line">let a=1+6 b=a-1 c=a+b</span><br><span class="line">echo &quot;a=$&#123;a&#125;,b=$&#123;b&#125;,c=$&#123;c&#125;&quot;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703114726267.png" alt="image-20200703114726267"></p><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><p>let数字计算用法</p><p>作用: 用于赋值,是最简洁的整数运算赋值命令</p><blockquote><p>计算赋值用法: let 变量名=整数运算表达式</p><p>多个表达式计算赋值用法:   let 变量名1=整数运算表达式1  变量名2=整数运算表达式2 …</p></blockquote><h1 id="Shell计算命令：-命令详解-1"><a href="#Shell计算命令：-命令详解-1" class="headerlink" title="Shell计算命令：$[]命令详解"></a>Shell计算命令：$[]命令详解</h1><h2 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h2><p>能够使用$[]进行整数的数学运算</p><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><p>和 (())、let 命令类似，$[] 也只能进行整数运算。但是只能对单个表达式的计算求值与输出</p><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">[表达式]</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><p>$[] 会对<code>表达式</code>进行计算，并取得计算结果</p></li><li><p>表达式内部不可以赋值给变量</p></li></ol></blockquote><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h2><p>calculate4.sh脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算1+6赋值给变量a</span></span><br><span class="line">a=$[1+6]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算变量a-1赋值给变量b</span></span><br><span class="line">b=$[a-1]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算变量a+变量b赋值给变量c</span></span><br><span class="line">c=$[a+b]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印变量a,变量b, 变量c的值</span></span><br><span class="line">echo &quot;a=$&#123;a&#125;,b=$&#123;b&#125;,c=$&#123;c&#125;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 直接输出</span></span><br><span class="line">echo &quot;$[1+6],$[7-1],$[7+6]&quot;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703135351633.png" alt="image-20200703135351633"></p><h2 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h2><p>执行整数表达式命令的总结, 推荐使用哪个</p><blockquote><p>expr</p><p>​    优点: 可以直接输出</p><p>​    缺点:  计算表达式里面引用变量使用$,  特殊字符需要转义  只能计算一个表达式</p><p>(()) (直接求值输出推荐方式)</p><p>​     优点:  直接输出, 里面直接使用变量名, 特殊字符不需要转义, 多个表达式赋值</p><p>​     缺点: 需要获取值以后才可以输出</p><p>let  (赋值推荐方式)</p><p>​     优点: 赋值简单,特殊字符不需要转义, </p><p>​     缺点: 不能直接输出</p><p>$[]</p><p>​    优点: ,特殊字符不需要转义, </p><p>​    缺点: 不能多表达是计算,</p></blockquote><h1 id="Shell计算命令：bc命令详解"><a href="#Shell计算命令：bc命令详解" class="headerlink" title="Shell计算命令：bc命令详解"></a>Shell计算命令：bc命令详解</h1><h2 id="目标-3"><a href="#目标-3" class="headerlink" title="目标"></a>目标</h2><p>理解bc命令的作用</p><p>能够在bc中进行互动式的数学运算</p><p>能够在shell中进行非互动式的bc管道运算</p><p>能够在shell中非互动式的输入重定向bc运算</p><h2 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h2><p>Bash shell内置了对整数运算的支持，但是并不支持浮点运算，而 linux bc (basic calculator)命令可以很方便的进行浮点运算. bc命令是Linux简单的计算器,能进行进制转换与计算。能转换的进制包括十六进制、十进制、八进制、二进制等。可以使用的运算符号包括(+)加法、(-)减法、(*)乘法、(/)除法、(^)指数、(%)余数等</p><h2 id="bc命令"><a href="#bc命令" class="headerlink" title="bc命令"></a>bc命令</h2><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bc [options] [参数]</span><br></pre></td></tr></table></figure><h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-h</td><td>help，帮助信息</td></tr><tr><td>-v</td><td>version，显示命令版本信息</td></tr><tr><td>==-l==</td><td>mathlib, 使用标准数学库, 例如使用内置函数就需要使用这个参数</td></tr><tr><td>-i</td><td>interactive, 强制交互</td></tr><tr><td>-w</td><td>warn, 显示 POSIX 的警告信息</td></tr><tr><td>-s</td><td>standard, 使用 POSIX 标准来处理</td></tr><tr><td>==-q==</td><td>quiet, 不显示欢迎信息</td></tr></tbody></table><blockquote><p>默认使用bc命令后回车会有很多欢迎信息，  可以使用  <code>bc -q</code>  回车后不会有欢迎信息 </p></blockquote><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>文件： 指定包含计算任务的文件。</p><h3 id="示例：bc执行计算任务的文件"><a href="#示例：bc执行计算任务的文件" class="headerlink" title="示例：bc执行计算任务的文件"></a>示例：bc执行计算任务的文件</h3><p>创建task.txt文件, 编辑文件内容(一个计算表达式一行)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">108*67+12345</span><br><span class="line">58+2007*11</span><br></pre></td></tr></table></figure><p>执行命令</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703153959498.png" alt="image-20200703153959498"></p><blockquote><p>可以使用 <code>quit</code> 命令退出bc</p></blockquote><h2 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h2><table><thead><tr><th>变量名</th><th>作 用</th></tr></thead><tbody><tr><td>scale</td><td>指定精度，也即小数点后的位数, 对计算结果指定保留小数；默认为 0，也即不使用小数部分。</td></tr><tr><td>ibase</td><td>指定输入的数字的进制，默认为十进制。</td></tr><tr><td>obase</td><td>指定输出的数字的进制，默认为十进制。</td></tr><tr><td>last 或者 .</td><td>获取最近计算打印结果的数字</td></tr></tbody></table><h2 id="内置数学函数"><a href="#内置数学函数" class="headerlink" title="内置数学函数"></a>内置数学函数</h2><table><thead><tr><th>函数名</th><th>作用</th></tr></thead><tbody><tr><td>s(x)</td><td>计算 x 的正弦值，x 是弧度值。</td></tr><tr><td>c(x)</td><td>计算 x 的余弦值，x 是弧度值。</td></tr><tr><td>a(x)</td><td>计算 x 的反正切值，返回弧度值。</td></tr><tr><td>l(x)</td><td>计算 x 的自然对数。</td></tr><tr><td>e(x)</td><td>求 e 的 x 次方。</td></tr><tr><td>j(n, x)</td><td>贝塞尔函数，计算从 n 到 x 的阶数。</td></tr></tbody></table><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>通常在linux下bc当计算器用, 具体有3个用法</p><ol><li>bc中互动式的数学运算</li><li>shell中非互动式的管道运算</li><li>shell中非互动式的输入重定向运算</li></ol><h2 id="示例：bc中互动式的数学运算"><a href="#示例：bc中互动式的数学运算" class="headerlink" title="示例：bc中互动式的数学运算"></a>示例：bc中互动式的数学运算</h2><h3 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h3><p>使用 <code>bc -q</code> 命令，回车即可,  直接进行计算器进行运算</p><h3 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h3><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703151035148.png" alt="image-20200703151035148"></p><p>退出bc使用 <code>quit</code></p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703151349964.png" alt="image-20200703151349964"></p><h2 id="示例：shell中非互动式的管道运算"><a href="#示例：shell中非互动式的管道运算" class="headerlink" title="示例：shell中非互动式的管道运算"></a>示例：shell中非互动式的管道运算</h2><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h3><p>在 Shell 脚本中，我们可以借助管道使用 bc 计算器。</p><h3 id="借助管道使用-bc-计算器语法"><a href="#借助管道使用-bc-计算器语法" class="headerlink" title="借助管道使用 bc 计算器语法"></a>借助管道使用 bc 计算器语法</h3><p>直接进行bc的表达式计算输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;expression&quot; | bc [options]</span><br></pre></td></tr></table></figure><blockquote><p>“expression” 表达式必须复合bc命令要求的公式</p><p>“expression”  表达式里面可以引用shell变量</p><p>例如:  Shell变量 <code>a=2</code>   在表达式里面引用的语法:  <code>$a</code></p></blockquote><p>将bc计算结果赋值给Shell变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一种方式</span></span><br><span class="line">var_name=`echo &quot;expression&quot; | bc [options]`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二种方式</span></span><br><span class="line">var_name=$(echo &quot;expression&quot; | bc [options])</span><br></pre></td></tr></table></figure><blockquote><p>$() 与 `` 功能一样, 都是执行里面的命令</p><p>区别</p><p>​     `` 是所有linux系统支持的方式,  兼容性较好, 但是容易与引号产生混淆</p><p>​      $() 不是所有linux系统都支持的方式,  兼容性较差, 但是不容易产生混淆</p></blockquote><h3 id="演示-2"><a href="#演示-2" class="headerlink" title="演示"></a>演示</h3><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703154646821.png" alt="image-20200703154646821"></p><p>引用shell变量进行计算</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703155152427.png" alt="image-20200703155152427"></p><blockquote><p>注意 b是bc中定义的新变量, 与shell变量没有任何关系,  所以不可以在shell中获取b变量</p></blockquote><p>进制转换</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703155732347.png" alt="image-20200703155732347"></p><h2 id="示例：shell中非互动式的输入重定向运算"><a href="#示例：shell中非互动式的输入重定向运算" class="headerlink" title="示例：shell中非互动式的输入重定向运算"></a>示例：shell中非互动式的输入重定向运算</h2><h3 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h3><p>将计算表达式输出给bc去执行, 特点类似于文件中输入,可以输入多行表达式, 更加清晰</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一种方式</span></span><br><span class="line">var_name=`bc [options] &lt;&lt; EOF</span><br><span class="line">第一行表达式1</span><br><span class="line">第二行表达式2</span><br><span class="line">...</span><br><span class="line">EOF</span><br><span class="line">`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二种方式</span></span><br><span class="line">var_name=$(bc [options] &lt;&lt; EOF</span><br><span class="line">第一行表达式1</span><br><span class="line">第二行表达式2</span><br><span class="line">...</span><br><span class="line">EOF</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p><code>var_name</code> 这是Shell变量的名字</p><p><code>bc</code> 执行bc的命令</p><p><code>EOF..EOF</code>  输入流的多行表达式</p><p>含义:  将EOF中间多行表达式输入给到bc去执行, j将bc执行的结果给到Shell变量var_name</p></blockquote><h3 id="演示-3"><a href="#演示-3" class="headerlink" title="演示"></a>演示</h3><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703161628360.png" alt="image-20200703161628360"></p><blockquote><p>如果有大量的数学计算，那么使用输入重定向就比较方便，因为数学表达式可以换行，写起来更加清晰。</p></blockquote><h2 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h2><p>bc命令的作用</p><blockquote><p>是一个任意精度计算器</p></blockquote><p>在bc中进行互动式的数学运算</p><blockquote><p>bc -q  进入bc环境  直接输入一个算术表达式后回车 bc就会计算出结果输出</p></blockquote><p>在shell中进行非互动式的bc管道运算</p><blockquote><p>直接输出结果:  echo “bc表达式” |bc [options]<br>赋值给变量:  变量名=$(echo “bc表达式” |bc [options])</p></blockquote><p>在shell中非互动式的输入重定向bc运算</p><blockquote><p>变量名=$(bc &lt;&lt;  EOF</p><p>bc表达式</p><p>EOF</p><p>)</p><p>适合大量计算表达式</p></blockquote><h1 id="流程控制：if-else语句"><a href="#流程控制：if-else语句" class="headerlink" title="流程控制：if else语句"></a>流程控制：if else语句</h1><h2 id="目标-4"><a href="#目标-4" class="headerlink" title="目标"></a>目标</h2><p>能够使用if条件语句进行条件判断</p><h2 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h2><p>if条件判断逻辑控制语句</p><h2 id="if语法"><a href="#if语法" class="headerlink" title="if语法"></a>if语法</h2><p>多行写法语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if  条件</span><br><span class="line">then</span><br><span class="line">    命令</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><blockquote><p>可以将if语句放入一行语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if 条件; then 命令; fi</span><br></pre></td></tr></table></figure></blockquote><h2 id="if-else-语法"><a href="#if-else-语法" class="headerlink" title="if else 语法"></a>if else 语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if  条件</span><br><span class="line">then</span><br><span class="line">   命令</span><br><span class="line">else</span><br><span class="line">   命令</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="if-elif-else-语法"><a href="#if-elif-else-语法" class="headerlink" title="if elif else 语法"></a>if elif else 语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if  条件1</span><br><span class="line">then</span><br><span class="line">   命令1</span><br><span class="line">elif 条件2</span><br><span class="line">then</span><br><span class="line">    命令2</span><br><span class="line">elif 条件3</span><br><span class="line">then</span><br><span class="line">    命令3</span><br><span class="line">……</span><br><span class="line">else</span><br><span class="line">   命令N</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="演示-4"><a href="#演示-4" class="headerlink" title="演示"></a>演示</h2><p>需求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">提示&quot;请输入你的考试成绩:&quot; 接收用户输入一个成绩, 之后使用if else条件句判断</span><br><span class="line">要求1: 小于 60 输出&quot;不及格&quot;</span><br><span class="line">要求2: 大于等于70 并且 小于80 输出&quot;中等&quot;</span><br><span class="line">要求3: 大于等于80 并且 小于90 输出&quot;良好&quot;</span><br><span class="line">要求4: 大于等于90 并且 小于等于100 输出&quot;优秀&quot;</span><br><span class="line">要求5: 以上不符合输出&quot;成绩不合法&quot;</span><br></pre></td></tr></table></figure><p>control1.sh脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">read -p &quot;请输入你的考试成绩:&quot; score</span><br><span class="line">if (( $score &lt; 60 )); then</span><br><span class="line">    echo &quot;不及格&quot;</span><br><span class="line">elif (( $score &gt;= 60 &amp;&amp; $score &lt; 70 )); then</span><br><span class="line">    echo &quot;及格&quot;</span><br><span class="line">elif (( $score &gt;= 70 &amp;&amp; $score &lt; 80 )); then</span><br><span class="line">    echo &quot;中等&quot;</span><br><span class="line">elif (( $score &gt;= 80 &amp;&amp; $score &lt; 90 )); then</span><br><span class="line">    echo &quot;良好&quot;</span><br><span class="line">elif (( $score &gt;= 90 &amp;&amp; $score &lt;= 100 )); then</span><br><span class="line">    echo &quot;优秀&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;成绩不合法&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><blockquote><p><code>(())</code>是一种数学计算命令，它除了可以进行最基本的加减乘除运算，还可以进行大于、小于、等于等关系运算，以及与、或、非逻辑运算。当 a 和 b 相等时，<code>(( $a == $b ))</code>判断条件成立，进入 if，执行 then 后边的 echo 语句</p></blockquote><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703165220020.png" alt="image-20200703165220020"></p><h2 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h2><p>使用if条件语句进行条件判断</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if 条件1 </span><br><span class="line">then</span><br><span class="line">命令1</span><br><span class="line">elif 条件2 </span><br><span class="line">then</span><br><span class="line">命令2</span><br><span class="line">elif 条件3 </span><br><span class="line">then</span><br><span class="line">命令3</span><br><span class="line">...</span><br><span class="line">else </span><br><span class="line">命令n</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h1 id="if条件判断句的退出状态"><a href="#if条件判断句的退出状态" class="headerlink" title="if条件判断句的退出状态"></a>if条件判断句的退出状态</h1><h2 id="目标-5"><a href="#目标-5" class="headerlink" title="目标"></a>目标</h2><ol><li><p>理解什么是退出状态</p></li><li><p>能够查询每个命令的退出状态</p></li></ol><h2 id="介绍-9"><a href="#介绍-9" class="headerlink" title="介绍"></a>介绍</h2><p>linux任何命令的的执行都会有一个退出状态,  无论是内置命令还是外部文件命令. 还是自定义的 Shell 函数，当它退出（运行结束）时，都会返回一个比较小的整数值给调用（使用）它的程序，这就是命令的<strong>退出状态</strong></p><p>大多数命令状态0代表成功, 非0代表失败. 也有特殊的命令,比如 diff 命令用来比较两个文件的不同，对于“没有差别”的文件返回 0，对于“找到差别”的文件返回 1，对无效文件名返回 2</p><p> Shell 中，有多种方式取得命令的退出状态，其中 <code>$?</code> 是最常见的一种.</p><h2 id="演示-5"><a href="#演示-5" class="headerlink" title="演示"></a>演示</h2><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703172613295.png" alt="image-20200703172613295"></p><h2 id="退出状态和逻辑运算符的组合"><a href="#退出状态和逻辑运算符的组合" class="headerlink" title="退出状态和逻辑运算符的组合"></a>退出状态和逻辑运算符的组合</h2><p>Shell if 语句使用逻辑运算符将多个退出状态组合起来，这样就可以一次判断多个条件了。</p><table><thead><tr><th>运算符</th><th>使用格式</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp; 或 -a</td><td>条件1 &amp;&amp; 条件2</td><td>逻辑与运算符，当 条件1 和 条件2 同时成立时，<br>整个表达式才成立。  如果检测到 条件1 的退出状态为 0，<br>就不会再检测 条件2 了，因为不管 条件2 的退出状态是什么，<br>整个表达式必然都是不成立的，检测了也是多此一举。</td></tr><tr><td>|| 或 -o</td><td>条件1 || 条件2</td><td>逻辑或运算符，条件1 和 条件2 两个表<br>达式中只要有一个成立，整个表达式就成立。  如果检<br>测到 条件1 的退出状态为 1，就不会再检测 条件2 了，因为<br>不管 条件2 的退出状态是什么，整个表达式必然都是成立的，<br>检测了也是多此一举。</td></tr><tr><td>!</td><td>!条件</td><td>逻辑非运算符，相当于“取反”的效果。如果 条件 成立，那么整<br>个表达式就不成立；如果 条件 不成立，那么整个表达式就成立。</td></tr></tbody></table><h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>提示输入”请输入文件全名: “和”请输入数据:” 并接收文件名与数据</p><p>使用逻辑运算符判断满足2 条件 :  文件需要具有可写权限  和   输入的数据长度不为0</p><p>满足以上2个条件 将用户输入的 数据 写入到指定的文件中去</p><h3 id="演示-6"><a href="#演示-6" class="headerlink" title="演示"></a>演示</h3><p>创建itheima.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch itheima.txt</span><br></pre></td></tr></table></figure><p>control2.sh脚本文件代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">read -p &quot;请输入文件全名: &quot; filename</span><br><span class="line">read -p &quot;请输入数据:&quot; data</span><br><span class="line">if [ -w $filename -a -n $data ]</span><br><span class="line">then</span><br><span class="line">        echo $data</span><br><span class="line">        echo $data &gt; $filename</span><br><span class="line">        echo &quot;成功&quot;</span><br><span class="line">else</span><br><span class="line">        echo &quot;失败&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><blockquote><p>test命令用于对文件或字符串进行检测,  <code>-w</code> 判断文件是否存在并且可写,  <code>-n</code> 用于检测字符串是否非空, 后续讲解.</p><p><code>$data &gt; $filename</code>   其中 <code>&gt;</code>  用于将内容输出到指定文件中去</p></blockquote><p>运行结果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703183031637.png" alt="image-20200703183031637"></p><h2 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h2><ol><li><p>什么是退出状态</p><blockquote><p>每个命令运行后都会返回一个退出状态值,</p><p>大多数返回0代表成功,  非0 代表失败</p></blockquote></li><li><p>查询每个命令的退出状态</p><blockquote><p>常见命令 <code>$?</code></p></blockquote></li></ol><h1 id="Shell内置命令：test"><a href="#Shell内置命令：test" class="headerlink" title="Shell内置命令：test"></a>Shell内置命令：test</h1><h2 id="目标-6"><a href="#目标-6" class="headerlink" title="目标"></a>目标</h2><ol><li>理解test命令对整数比较测试</li><li>理解test命令对字符串</li><li>能够使用test命令对文件测试</li></ol><h2 id="介绍-10"><a href="#介绍-10" class="headerlink" title="介绍"></a>介绍</h2><p>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p><p>功能与[]一样</p><h2 id="整数比较测试"><a href="#整数比较测试" class="headerlink" title="整数比较测试"></a>整数比较测试</h2><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if test 数字1 options 数字2 </span><br><span class="line">then  </span><br><span class="line">...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>options具体如下</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-eq</td><td align="left">等于则为真</td></tr><tr><td align="left">-ne</td><td align="left">不等于则为真</td></tr><tr><td align="left">-gt</td><td align="left">大于则为真</td></tr><tr><td align="left">-ge</td><td align="left">大于等于则为真</td></tr><tr><td align="left">-lt</td><td align="left">小于则为真</td></tr><tr><td align="left">-le</td><td align="left">小于等于则为真</td></tr></tbody></table><h3 id="演示-7"><a href="#演示-7" class="headerlink" title="演示"></a>演示</h3><p>control3.sh脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">num1=1 num2=1 num3=2</span><br><span class="line">echo &quot;num1=$&#123;num1&#125;,num2=$&#123;num2&#125;,num3=$&#123;num3&#125;&quot;</span><br><span class="line"></span><br><span class="line">if test $num1 -eq $num2</span><br><span class="line">then</span><br><span class="line">    echo &#x27;num1和num2两个数相等！&#x27;</span><br><span class="line">else</span><br><span class="line">    echo &#x27;num1和num2两个数不相等！&#x27;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if test $num2 -eq $num3</span><br><span class="line">then</span><br><span class="line">    echo &#x27;num2和num3两个数相等！&#x27;</span><br><span class="line">else</span><br><span class="line">    echo &#x27;num2和num3两个数不相等！&#x27;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704063911230.png" alt="image-20200704063911230"></p><h2 id="字符串比较测试"><a href="#字符串比较测试" class="headerlink" title="字符串比较测试"></a>字符串比较测试</h2><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">= 或  ==</td><td align="left">等于, 等于返回0代表成功,否则返回1代表失败</td></tr><tr><td align="left">!=</td><td align="left">不等于</td></tr><tr><td align="left"><code>\&lt;</code></td><td align="left">小于</td></tr><tr><td align="left"><code>\&gt;</code></td><td align="left">大于</td></tr><tr><td align="left">-z 字符串</td><td align="left">字符串的长度为零则为真</td></tr><tr><td align="left">-n 字符串</td><td align="left">字符串的长度不为零则为真</td></tr></tbody></table><h3 id="演示-8"><a href="#演示-8" class="headerlink" title="演示"></a>演示</h3><p>control4.sh脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">str1=&quot;itheima&quot; str2=&quot;itcast&quot; str3=&quot;&quot;</span><br><span class="line">echo &quot;str1=$&#123;str1&#125;,str2=$&#123;str2&#125;,str3=$&#123;str3&#125;&quot;</span><br><span class="line"></span><br><span class="line">if test $str1 = $str2</span><br><span class="line">then</span><br><span class="line">    echo &#x27;str1和str2两个字符串相等&#x27;</span><br><span class="line">else</span><br><span class="line">    echo &#x27;str1和str2两个字符串不相等&#x27;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if test $str1 \&gt; $str2</span><br><span class="line">then</span><br><span class="line">    echo &#x27;str1大于str2&#x27;</span><br><span class="line">else</span><br><span class="line">    echo &#x27;str1小于str2&#x27;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if test -z $str2</span><br><span class="line">then</span><br><span class="line">echo &quot;str2字符串长度为0&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;str2字符串长度不为0&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if test -z $str3</span><br><span class="line">then</span><br><span class="line">echo &quot;str3字符串长度为0&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;str3字符串长度不为0&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704114310717.png" alt="image-20200704114310717"></p><h2 id="文件测试"><a href="#文件测试" class="headerlink" title="文件测试"></a>文件测试</h2><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">==-e 文件名==</td><td align="left">exists, 如果文件存在则为真</td></tr><tr><td align="left">==-r 文件名==</td><td align="left">read,如果文件存在且可读则为真</td></tr><tr><td align="left">==-w 文件名==</td><td align="left">write,如果文件存在且可写则为真</td></tr><tr><td align="left">==-x 文件名==</td><td align="left">execute,如果文件存在且可执行则为真</td></tr><tr><td align="left">==-s 文件名==</td><td align="left">string,如果文件存在且至少有一个字符则为真</td></tr><tr><td align="left">==-d 文件名==</td><td align="left">directory,如果文件存在且为目录则为真</td></tr><tr><td align="left">-f 文件名</td><td align="left">file,如果文件存在且为普通文件则为真</td></tr><tr><td align="left">-c 文件名</td><td align="left">character,如果文件存在且为字符型特殊文件则为真</td></tr><tr><td align="left">-b 文件名</td><td align="left">如果文件存在且为块特殊文件则为真</td></tr></tbody></table><h3 id="演示-9"><a href="#演示-9" class="headerlink" title="演示"></a>演示</h3><p>查询control1.sh与control2.sh文件</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704074537077.png" alt="image-20200704074537077"></p><p>control5.sh脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if test -w ./control1.sh</span><br><span class="line">then</span><br><span class="line">    echo &#x27;文件已存在并且可写!&#x27;</span><br><span class="line">else</span><br><span class="line">    echo &#x27;文件不存在或不可写!&#x27;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if test -e ./control1.sh -a -e ./control2.sh</span><br><span class="line">then</span><br><span class="line">    echo &#x27;两个文件都存在!&#x27;</span><br><span class="line">else</span><br><span class="line">    echo &#x27;可能有一个或两个文件不存在&#x27;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><blockquote><p>Shell提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为：”!”最高，”-a”次之，”-o”最低,  语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test 条件1 -o 条件2 -a 条件3 ...</span><br></pre></td></tr></table></figure></blockquote><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704074322642.png" alt="image-20200704074322642"></p><h2 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h2><ol><li><p>test命令对整数比较测试</p><blockquote><p><code>test  整数1 options 整数2</code></p><p>options:  <code>lt le gt ge eq ne</code></p></blockquote></li><li><p>test命令对字符串比较测试</p><blockquote><p><code>test 变量1 options 变量2</code></p><p>options: <code>&gt; &lt; != = ==</code> </p><p><code>&lt; &gt;</code> 需要转义</p></blockquote></li><li><p>使用test命令对文件测试</p><blockquote><p><code>test options 文件路径字符串</code></p><p>options: <code>-w -r -e -x -s -d</code></p></blockquote></li></ol><p>​      注意: test命令与[] 功能一样</p><h1 id="流程控制：case语句"><a href="#流程控制：case语句" class="headerlink" title="流程控制：case语句"></a>流程控制：case语句</h1><h2 id="目标-7"><a href="#目标-7" class="headerlink" title="目标"></a>目标</h2><p>理解使用case多分支条件判断</p><h2 id="介绍-11"><a href="#介绍-11" class="headerlink" title="介绍"></a>介绍</h2><p>Shell case语句为多选择语句。可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令;</p><p>当分支较多，并且判断条件比较简单时，使用 case in 语句就比较方便了。</p><h2 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">case 值 in</span><br><span class="line">匹配模式1)</span><br><span class="line">    命令1</span><br><span class="line">    命令2</span><br><span class="line">    ...</span><br><span class="line">    ;;</span><br><span class="line">匹配模式2）</span><br><span class="line">    命令1</span><br><span class="line">    命令2</span><br><span class="line">    ...</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    命令1</span><br><span class="line">    命令2</span><br><span class="line">    ...</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>每一匹配模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;(类似break, 不可以替代否则语法报错)。取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。</p><p>case、in 和 esac 都是 Shell 关键字,   esac就是case的反写在这里代表结束case</p><p>匹配模式:  可以是一个数字、一个字符串，甚至是一个简单正则表达式。</p><p>简单正则表达式支持如下通配符</p><table><thead><tr><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>表示任意字符串。</td></tr><tr><td>[abc]</td><td>表示 a、b、c 三个字符中的任意一个。比如，[15ZH] 表示 1、5、Z、H 四个字符中的任意一个。</td></tr><tr><td>[m-n]</td><td>表示从 m 到 n 的任意一个字符。比如，[0-9] 表示任意一个数字，[0-9a-zA-Z] 表示字母或数字。</td></tr><tr><td>|</td><td>表示多重选择，类似逻辑运算中的或运算。比如，abc | xyz 表示匹配字符串 “abc” 或者 “xyz”。</td></tr></tbody></table><h2 id="演示-10"><a href="#演示-10" class="headerlink" title="演示"></a>演示</h2><p>control6.sh脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">read -p &quot;请输入一个0~7的数字:&quot; number</span><br><span class="line">case $number in</span><br><span class="line">1)</span><br><span class="line">    echo &quot;星期一&quot;</span><br><span class="line">;;</span><br><span class="line">2)</span><br><span class="line">    echo &quot;星期二&quot;</span><br><span class="line">    ;;</span><br><span class="line">3)</span><br><span class="line">    echo &quot;星期三&quot;</span><br><span class="line">    ;;</span><br><span class="line">4)</span><br><span class="line">    echo &quot;星期四&quot;</span><br><span class="line">    ;;</span><br><span class="line">5)</span><br><span class="line">    echo &quot;星期五&quot;</span><br><span class="line">    ;;</span><br><span class="line">6)</span><br><span class="line">    echo &quot;星期六&quot;</span><br><span class="line">    ;;</span><br><span class="line">0|7)</span><br><span class="line">    echo &quot;星期日&quot;</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    echo &quot;您输入的数字无效&quot;</span><br><span class="line">    ;; </span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704142506942.png" alt="image-20200704142506942"></p><h2 id="小结-8"><a href="#小结-8" class="headerlink" title="小结"></a>小结</h2><p>使用case多分支条件判断语法</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">case 表达式 in</span><br><span class="line">模式1)</span><br><span class="line">命令</span><br><span class="line">...</span><br><span class="line">;;</span><br><span class="line">模式2)</span><br><span class="line">命令</span><br><span class="line">...</span><br><span class="line">;;</span><br><span class="line">...</span><br><span class="line">*)</span><br><span class="line">命令</span><br><span class="line">...</span><br><span class="line">;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h1 id="流程控制：while语句"><a href="#流程控制：while语句" class="headerlink" title="流程控制：while语句"></a>流程控制：while语句</h1><h2 id="目标-8"><a href="#目标-8" class="headerlink" title="目标"></a>目标</h2><p>理解whlie循环的使用</p><h2 id="介绍-12"><a href="#介绍-12" class="headerlink" title="介绍"></a>介绍</h2><p>while用于循环执行一系列命令</p><h2 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h2><p>多行写法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">while 条件</span><br><span class="line">do</span><br><span class="line">命令1</span><br><span class="line">命令2</span><br><span class="line">...</span><br><span class="line">continue; # 结束当前这一次循环, 进入下一次循环</span><br><span class="line">break; # 结束当前循环</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>一行写法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while 条件; do 命令; done;</span><br></pre></td></tr></table></figure><h2 id="演示-11"><a href="#演示-11" class="headerlink" title="演示"></a>演示</h2><p>control7.sh脚本文件代码: 输出指定多少次的hello world</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">read -p &quot;请输入一个数字:&quot; number</span><br><span class="line">i=0</span><br><span class="line">while [[ $i &lt; $number ]]</span><br><span class="line">do</span><br><span class="line">  echo &quot;hello world&quot;</span><br><span class="line">  ((i++))</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704145024719.png" alt="image-20200704145024719"></p><h2 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while :</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="小结-9"><a href="#小结-9" class="headerlink" title="小结"></a>小结</h2><p>whlie循环的使用语法</p><blockquote><p>while 条件</p><p>do</p><p>​    命令</p><p>done</p></blockquote><h1 id="流程控制：until语句"><a href="#流程控制：until语句" class="headerlink" title="流程控制：until语句"></a>流程控制：until语句</h1><h2 id="目标-9"><a href="#目标-9" class="headerlink" title="目标"></a>目标</h2><p>理解until循环结构的使用</p><h2 id="介绍-13"><a href="#介绍-13" class="headerlink" title="介绍"></a>介绍</h2><p>until 也是循环结构语句,  until 循环与 while 循环在处理方式上刚好相反,  循环条件为false会一致循环, 条件为true停止循环.</p><h2 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until 条件</span><br><span class="line">do</span><br><span class="line">    命令</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>条件如果返回值为1(代表false)，则继续执行循环体内的语句，否则跳出循环。</p><h2 id="演示-12"><a href="#演示-12" class="headerlink" title="演示"></a>演示</h2><p>control8.sh脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">read -p &quot;请输入一个数字:&quot; number</span><br><span class="line">i=0</span><br><span class="line">until [[ ! $i &lt; $number ]]</span><br><span class="line">do</span><br><span class="line">  echo &quot;hello world&quot;</span><br><span class="line">  ((i++))</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704155626936.png" alt="image-20200704155626936"></p><h2 id="小结-10"><a href="#小结-10" class="headerlink" title="小结"></a>小结</h2><p>until循环结构的使用语法</p><blockquote><p>until 条件</p><p>do</p><p>​    命令</p><p>done</p><p>条件为false继续循环, 为true停止循环</p></blockquote><h1 id="流程控制：for语句"><a href="#流程控制：for语句" class="headerlink" title="流程控制：for语句"></a>流程控制：for语句</h1><h2 id="目标-10"><a href="#目标-10" class="headerlink" title="目标"></a>目标</h2><p>能够使用for进行循环操作</p><h2 id="介绍-14"><a href="#介绍-14" class="headerlink" title="介绍"></a>介绍</h2><p>Shell支持for循环,  与其他编程语言类似.</p><h2 id="循环方式1"><a href="#循环方式1" class="headerlink" title="循环方式1"></a>循环方式1</h2><h3 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h3><p>多行写法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for var in item1 item2 ... itemN</span><br><span class="line">do</span><br><span class="line">    命令1</span><br><span class="line">    命令2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>一行写法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for var in item1 item2 ... itemN; do 命令1; 命令2…; done;</span><br></pre></td></tr></table></figure><blockquote><p>var是循环变量</p><p>item1 item2 … itemN 是循环的范围</p></blockquote><h3 id="演示-13"><a href="#演示-13" class="headerlink" title="演示"></a>演示</h3><p>control9.sh脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for i in 1 2 3 4 5</span><br><span class="line">do</span><br><span class="line"> echo &quot;hello world&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704164037719.png" alt="image-20200704164037719"></p><h2 id="循环方式2"><a href="#循环方式2" class="headerlink" title="循环方式2"></a>循环方式2</h2><h3 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h3><p>多行写法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for var in &#123;start..end&#125;</span><br><span class="line">do</span><br><span class="line">命令</span><br><span class="line">done</span><br></pre></td></tr></table></figure><blockquote><p>start:  循环范围的起始值,必须为整数</p><p>end: 循环范围的结束值, 必须为整数</p></blockquote><p>一行写法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for var in &#123;start..end&#125;; do 命令; done</span><br></pre></td></tr></table></figure><h3 id="演示-14"><a href="#演示-14" class="headerlink" title="演示"></a>演示</h3><p>循环1到5并打印</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in &#123;1..5&#125;; do echo $i; done</span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704162438406.png" alt="image-20200704162438406"></p><h2 id="循环方式3"><a href="#循环方式3" class="headerlink" title="循环方式3"></a>循环方式3</h2><h3 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h3><p>多行写法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for((i=start;i&lt;=end;i++))</span><br><span class="line">do</span><br><span class="line">命令</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>一行写法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for((i=start;i&lt;=end;i++)); do 命令; done</span><br></pre></td></tr></table></figure><h3 id="演示-15"><a href="#演示-15" class="headerlink" title="演示"></a>演示</h3><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704165553702.png" alt="image-20200704165553702"></p><h2 id="无限循环-1"><a href="#无限循环-1" class="headerlink" title="无限循环"></a>无限循环</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for((;;)); do 命令; done</span><br></pre></td></tr></table></figure><h2 id="小结-11"><a href="#小结-11" class="headerlink" title="小结"></a>小结</h2><p>使用for进行循环操作的3种方式</p><blockquote><p>方式1:  <code>for i in item1 item2 ...; do 命令; done</code></p><p>方式2:  <code>for i in &#123;start..end&#125;; do 命令; done</code></p><p>方式3:  <code>for((i=start;i&lt;=end;i++)); do 命令; done</code></p></blockquote><h1 id="流程控制：select语句"><a href="#流程控制：select语句" class="headerlink" title="流程控制：select语句"></a>流程控制：select语句</h1><h2 id="目标-11"><a href="#目标-11" class="headerlink" title="目标"></a>目标</h2><p>能够使用select语句进行菜单选择输入</p><h2 id="介绍-15"><a href="#介绍-15" class="headerlink" title="介绍"></a>介绍</h2><p>select in 循环用来增强交互性，它可以显示出带编号的菜单，用户输入不同的编号就可以选择不同的菜单，并执行不同的功能.   select in 是 Shell 独有的一种循环，非常适合终端（Terminal）这样的交互场景, 其他语言没有;</p><h2 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select var in menu1 menu2 ...</span><br><span class="line">do</span><br><span class="line">    命令</span><br><span class="line">done</span><br></pre></td></tr></table></figure><blockquote><p>注意: select 是无限循环（死循环），输入空值，或者输入的值无效，都不会结束循环，只有遇到 break 语句，或者按下 Ctrl+D 组合键才能结束循环。</p><p>执行命令过程中: 终端会输出 <code>#?</code>  代表可以输入选择的菜单编号</p></blockquote><h2 id="演示1"><a href="#演示1" class="headerlink" title="演示1"></a>演示1</h2><p>脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;你的爱好是什么?&quot;</span><br><span class="line">select hobby in &quot;编程&quot; &quot;游戏&quot; &quot;篮球&quot; &quot;游泳&quot;</span><br><span class="line">do</span><br><span class="line">echo $hobby</span><br><span class="line">    break</span><br><span class="line">done</span><br><span class="line">echo &quot;你的爱好是:$&#123;hobby&#125;&quot;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200709171835755.png" alt="image-20200709171835755"></p><h2 id="演示2"><a href="#演示2" class="headerlink" title="演示2"></a>演示2</h2><p>脚本文件代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;你的爱好是什么&quot;</span><br><span class="line">select hobby in &quot;编程&quot; &quot;游戏&quot; &quot;篮球&quot; &quot;游泳&quot;</span><br><span class="line">do</span><br><span class="line">    case $hobby in</span><br><span class="line">        &quot;编程&quot;)</span><br><span class="line">            echo &quot;编程,多敲代码&quot;</span><br><span class="line">            break</span><br><span class="line">            ;;</span><br><span class="line">        &quot;游戏&quot;)</span><br><span class="line">            echo &quot;少玩游戏&quot;</span><br><span class="line">            break</span><br><span class="line">            ;;</span><br><span class="line">        &quot;篮球&quot;|&quot;游泳&quot;)</span><br><span class="line">            echo &quot;运动有利健康&quot;</span><br><span class="line">            break</span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            echo &quot;输入错误，请重新输入&quot;</span><br><span class="line">    esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200709172353670.png" alt="image-20200709172353670"></p><h2 id="小结-12"><a href="#小结-12" class="headerlink" title="小结"></a>小结</h2><p>select的作用</p><blockquote><p>用于交互式循环输入选择菜单</p><p>常与 case in 一起配合使用</p></blockquote><h1 id="Shell函数：系统函数"><a href="#Shell函数：系统函数" class="headerlink" title="Shell函数：系统函数"></a>Shell函数：系统函数</h1><h2 id="目标-12"><a href="#目标-12" class="headerlink" title="目标"></a>目标</h2><ol><li>理解函数的分类</li><li>理解常用的系统函数</li></ol><h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h2><p>Shell编程和其他编程语言一样, 有函数,  函数是由若干条shell命令组成的语句块，实现Shell脚本代码重用和模块化编程。</p><h2 id="函数分类"><a href="#函数分类" class="headerlink" title="函数分类"></a>函数分类</h2><ol><li>系统函数</li><li>自定义函数</li></ol><h2 id="系统函数介绍"><a href="#系统函数介绍" class="headerlink" title="系统函数介绍"></a>系统函数介绍</h2><p>系统自带提供的函数, 可以直接使用.</p><h2 id="basename系统函数"><a href="#basename系统函数" class="headerlink" title="basename系统函数"></a>basename系统函数</h2><h3 id="介绍-16"><a href="#介绍-16" class="headerlink" title="介绍"></a>介绍</h3><p>basename函数用于获取文件名的函数,  根据给出的文件路径截取出文件名</p><h3 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">basename [string / pathname] [suffix]  </span><br></pre></td></tr></table></figure><blockquote><p>根据根据指定字符串或路径名进行截取文件名,  比如:  根据路径”/one/two/aa.txt”,  可以截取出aa.txt</p><p>suffix: 用于截取的时候去掉指定的后缀名.</p></blockquote><h3 id="演示-16"><a href="#演示-16" class="headerlink" title="演示"></a>演示</h3><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704175505682.png" alt="image-20200704175505682"></p><h2 id="dirname系统函数"><a href="#dirname系统函数" class="headerlink" title="dirname系统函数"></a>dirname系统函数</h2><h3 id="介绍-17"><a href="#介绍-17" class="headerlink" title="介绍"></a>介绍</h3><p>从指定的文件绝对路径,  去除文件名，返回剩下的前缀目录路径</p><h3 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirname 文件绝对路径</span><br></pre></td></tr></table></figure><h3 id="演示-17"><a href="#演示-17" class="headerlink" title="演示"></a>演示</h3><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704184207793.png" alt="image-20200704184207793"></p><h2 id="小结-13"><a href="#小结-13" class="headerlink" title="小结"></a>小结</h2><ol><li><p>函数的分类</p><blockquote><p>系统函数</p><p>自定义函数</p></blockquote></li><li><p>常用的系统函数</p><blockquote><p>basename 用于从指定路径中获取文件名</p><p>dirname 用于从指定的路径中获取目录名, 去掉文件名</p></blockquote></li></ol><h1 id="Shell函数：自定义函数"><a href="#Shell函数：自定义函数" class="headerlink" title="Shell函数：自定义函数"></a>Shell函数：自定义函数</h1><h2 id="目标-13"><a href="#目标-13" class="headerlink" title="目标"></a>目标</h2><ol><li>能够使用Shell的自定义函数实现代码重用</li><li>能够说出Shell程序命令与函数的区别</li></ol><h2 id="介绍-18"><a href="#介绍-18" class="headerlink" title="介绍"></a>介绍</h2><p>开发人员可以通过自定义开发函数,实现代码重用.</p><h2 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 函数的定义</span></span><br><span class="line">[ function ] funname ()</span><br><span class="line">&#123;</span><br><span class="line">    命令</span><br><span class="line">    [return 返回值]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用函数</span></span><br><span class="line">funname 传递参数1 传递参数2 ...</span><br></pre></td></tr></table></figure><blockquote><ol><li><p>可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</p></li><li><p>参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0~255)</p></li></ol></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>必须在调用函数地方之前，先声明函数，shell脚本是逐行运行,  只要先运行了函数, 后面才可以时使用函数</p><h2 id="示例：无参无返回值函数"><a href="#示例：无参无返回值函数" class="headerlink" title="示例：无参无返回值函数"></a>示例：无参无返回值函数</h2><p>文件脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">demo()</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;执行了函数&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用函数</span></span><br><span class="line">demo</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200709173619130.png" alt="image-20200709173619130"></p><h2 id="示例：无参有返回值函数"><a href="#示例：无参有返回值函数" class="headerlink" title="示例：无参有返回值函数"></a>示例：无参有返回值函数</h2><p>fun2.sh文件脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">sum()</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;求两个数的和...&quot;</span><br><span class="line">    read -p &quot;输入第一个数字: &quot; n1</span><br><span class="line">    read -p &quot;输入第二个数字: &quot; n2</span><br><span class="line">    echo &quot;两个数字分别为 $n1 和 $n2 &quot;</span><br><span class="line">    return $(($n1+$n2))</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用函数</span></span><br><span class="line">sum</span><br><span class="line">echo &quot;两个数字的和为: $? &quot;  # 获取函数返回值</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704211609666.png" alt="image-20200704211609666"></p><h2 id="示例：有参函数"><a href="#示例：有参函数" class="headerlink" title="示例：有参函数"></a>示例：有参函数</h2><h3 id="介绍-19"><a href="#介绍-19" class="headerlink" title="介绍"></a>介绍</h3><p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 <code>$n</code> 的形式来获取参数的值，例如，<code>$1</code> 表示第一个参数，<code>$2</code> 表示第二个参数…</p><p>其他参数介绍</p><table><thead><tr><th align="left">参数处理</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">$#</td><td align="left">传递到脚本或函数的参数个数</td></tr><tr><td align="left">$*</td><td align="left">以一个单字符串显示所有向脚本传递的参数</td></tr><tr><td align="left">$$</td><td align="left">脚本运行的当前进程ID号</td></tr><tr><td align="left">$!</td><td align="left">后台运行的最后一个进程的ID号</td></tr><tr><td align="left">$@</td><td align="left">与$*相同，但是使用时加引号，并在引号中返回每个参数。</td></tr><tr><td align="left">$?</td><td align="left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><h3 id="演示-18"><a href="#演示-18" class="headerlink" title="演示"></a>演示</h3><p>fun3.sh文件脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">funParam()&#123;</span><br><span class="line">    echo &quot;第一个参数为 $1 !&quot;</span><br><span class="line">    echo &quot;第二个参数为 $2 !&quot;</span><br><span class="line">    echo &quot;第十个参数为 $10 !&quot;</span><br><span class="line">    echo &quot;第十个参数为 $&#123;10&#125; !&quot;</span><br><span class="line">    echo &quot;第十一个参数为 $&#123;11&#125; !&quot;</span><br><span class="line">    echo &quot;参数总数有 $# 个!&quot;</span><br><span class="line">    echo &quot;作为一个字符串输出所有参数 $* !&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用函数</span></span><br><span class="line">funParam 1 2 3 4 5 6 7 8 9 10 22</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704213119988.png" alt="image-20200704213119988"></p><h2 id="Shell程序与函数的区别"><a href="#Shell程序与函数的区别" class="headerlink" title="Shell程序与函数的区别"></a>Shell程序与函数的区别</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>函数和shell程序比较相似，区别在于：<br>    Shell 程序(内置命令和外部脚本文件),  外部脚本文件是在子Shell中运行,  会开启独立的进程运行<br>    Shell函数在当前Shell的进程中运行</p><h3 id="演示-19"><a href="#演示-19" class="headerlink" title="演示"></a>演示</h3><p>fun4.sh脚本文件代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">demo()&#123;</span><br><span class="line">        echo &quot;函数中打印当前进程ID:$$&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;当前脚本文件(Shell程序)打印当前进程ID:$$&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用函数</span></span><br><span class="line">demo</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704214505694.png" alt="image-20200704214505694"></p><h2 id="小结-14"><a href="#小结-14" class="headerlink" title="小结"></a>小结</h2><ol><li><p>使用Shell的自定义函数实现代码重用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">函数名()&#123;</span><br><span class="line">命令</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用<span class="variable">$n</span>获取函数的参数</span></span><br><span class="line">[return 返回值]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>说出Shell程序命令与函数的区别</p><blockquote><p>Shell程序命令:  运行命令时开启一个子进程运行命令</p><p>函数: 在当前Shell环境中运行, 没有开启进程</p></blockquote></li></ol><h1 id="Shell重定向输入输出"><a href="#Shell重定向输入输出" class="headerlink" title="Shell重定向输入输出"></a>Shell重定向输入输出</h1><h2 id="目标-14"><a href="#目标-14" class="headerlink" title="目标"></a>目标</h2><ol><li>理解Shell重定向的含义</li><li>能够使用重定向输出数据到文件中保存</li><li>能够使用重定向从文件中读取输入数据</li></ol><h2 id="重定向介绍"><a href="#重定向介绍" class="headerlink" title="重定向介绍"></a>重定向介绍</h2><h3 id="标准输入介绍"><a href="#标准输入介绍" class="headerlink" title="标准输入介绍"></a>标准输入介绍</h3><p>从键盘读取用户输入的数据，然后再把数据拿到Shell程序中使用；</p><h3 id="标准输出介绍"><a href="#标准输出介绍" class="headerlink" title="标准输出介绍"></a>标准输出介绍</h3><p>Shell程序产生的数据，这些数据一般都是呈现到显示器上供用户浏览查看;</p><h3 id="默认输入输出文件"><a href="#默认输入输出文件" class="headerlink" title="默认输入输出文件"></a>默认输入输出文件</h3><p>每个 Unix/Linux 命令运行时都会打开三个文件,  文件如下</p><table><thead><tr><th>文件名</th><th>类型</th><th>文件描述符(file description, fd)</th><th>功能</th></tr></thead><tbody><tr><td>stdin</td><td>(standard input)<br>标准输入文件</td><td>0</td><td>获取键盘的输入数据</td></tr><tr><td>stdout</td><td>(standard output)<br/>标准输出文件</td><td>1</td><td>将正确数据输出到显示器上</td></tr><tr><td>stderr</td><td>(standard error)<br/>标准错误输出文件</td><td>2</td><td>将错误信息输出到显示器上</td></tr></tbody></table><blockquote><p>每个文件都有一个唯一的 <strong>文件描述符fd</strong>,  后面会通过唯一 <strong>文件描述符fd</strong> 操作对应的信息</p></blockquote><p>Shell程序操作输入输出时用到这3个文件</p><ol><li>Shell程序默认会从stdin文件中读取输入数据</li><li>Shell程序默认会向stdout文件输出正确数据</li><li>Shell程序默认会项stderr文件中输出错误信息</li></ol><p>这3个文件用于临时传输数据使用</p><h3 id="重定向输入输出介绍"><a href="#重定向输入输出介绍" class="headerlink" title="重定向输入输出介绍"></a>重定向输入输出介绍</h3><ol><li><p>标准输入是数据默认从键盘流向程序，如果改变了它的方向，数据就从其它地方流入，这就是输入重定向。</p></li><li><p>标准输出是数据默认从程序流向显示器，如果改变了它的方向，数据就流向其它地方，这就是输出重定向。</p><blockquote><p>Linux Shell 重定向分为两种，一种输入重定向，一种是输出重定向；</p></blockquote></li></ol><h2 id="重定向的作用"><a href="#重定向的作用" class="headerlink" title="重定向的作用"></a>重定向的作用</h2><p>输出重定向是指命令的结果不再输出到显示器上，而是输出到其它地方，一般是文件中。这样做的最大好处就是把命令的结果保存起来，当我们需要的时候可以随时查询。</p><h2 id="重定向语法"><a href="#重定向语法" class="headerlink" title="重定向语法"></a>重定向语法</h2><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">命令 &gt; file</td><td align="left">将正确数据重定向输出到 file 文件中, 覆盖方式</td></tr><tr><td align="left">命令 &lt; file</td><td align="left">将输入重定向从 file 文件中读取数据</td></tr><tr><td align="left">命令 &gt;&gt; file</td><td align="left">将正确数据重定向输出到 file 文件中, 追加方式</td></tr><tr><td align="left">命令 &lt; file1 &gt; file2</td><td align="left">从file文件读取数据, 输出数据到file2文件中</td></tr><tr><td align="left">命令 fd&gt; file</td><td align="left">根据指定的文件描述符fd 将数据重定向输出到 file 文件中, 覆盖方式</td></tr><tr><td align="left">命令 fd&gt;&gt; file</td><td align="left">根据指定的文件描述符fd 将数据重定向输出到 file 文件中, 追加方式</td></tr><tr><td align="left">命令 &gt; file fd1&gt;&amp; fd2</td><td align="left">将 fd1 和 fd2 文件描述符合并 输出到文件。</td></tr><tr><td align="left">fd1&lt;&amp; fd2</td><td align="left">将 fd1 和 fd2 文件描述符合并 从文件读取输入.</td></tr><tr><td align="left">&lt;&lt; tag</td><td align="left">读取终端输入数据,  将开始标记 tag 和结束标记 tag 之间的内容作为输入。<br>标记名tag可以任意</td></tr></tbody></table><blockquote><p>在输出重定向中，<code>&gt;</code>代表的是覆盖输出，<code>&gt;&gt;</code>代表的是追加输出。</p><p>fd是文件描述符 </p><p>​        0 通常是标准输入（STDIN），</p><p>​        1 是标准输出（STDOUT），</p><p>​        2 是标准错误输出（STDERR）。</p><p>fd&gt;  或  fd&gt;&gt;  中间不可以有空格</p></blockquote><h2 id="输出示例：正确信息重定向输出"><a href="#输出示例：正确信息重定向输出" class="headerlink" title="输出示例：正确信息重定向输出"></a>输出示例：正确信息重定向输出</h2><p>创建文件redirect1.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch redirect1.txt</span><br></pre></td></tr></table></figure><p>执行who命令重定向输出到redirect1.txt文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;itheima&quot; &gt;&gt; redirect1.txt</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200705211524230.png" alt="image-20200705211524230"></p><h2 id="输出示例：错误信息重定向输出"><a href="#输出示例：错误信息重定向输出" class="headerlink" title="输出示例：错误信息重定向输出"></a>输出示例：错误信息重定向输出</h2><p>预览错误消息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls java</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200705214312724.png" alt="image-20200705214312724"></p><p>没有java目录所以报错</p><p>将错误消息输出到error.log文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls java 2&gt; redirect2.txt</span><br></pre></td></tr></table></figure><blockquote><p>2 是标准错误输出（STDERR）, 注意</p><p><code>&gt;</code> 覆盖方式输出</p><p><code>2&gt;</code> 注意fd与&gt;符号之间不能有空格 </p></blockquote><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200705215617076.png" alt="image-20200705215617076"></p><h2 id="输出示例：正确和错误信息同时输出"><a href="#输出示例：正确和错误信息同时输出" class="headerlink" title="输出示例：正确和错误信息同时输出"></a>输出示例：正确和错误信息同时输出</h2><p>将正确信息与错误信息都保存到一个文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;itcast&quot; &gt; redirect2.txt 2&gt;&amp;1</span><br></pre></td></tr></table></figure><blockquote><p>数字 1 代表正确输出的结果输出到文件中<br>数字 2 代表错误结果输出到文件中</p><p><code>2&gt;&amp; 1</code> 将正确和错误都输出到文件中.  <code>2&gt;&amp;</code> 中间不能有空格,  写法有2种</p><p>​        合并第一种写法:  <code>2&gt;&amp; 1</code></p><p>​        合并第二种写法:  <code>2&gt;&amp;1</code></p></blockquote><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200705221517251.png" alt="image-20200705221517251"></p><h2 id="输入示例：统计文件数据行数"><a href="#输入示例：统计文件数据行数" class="headerlink" title="输入示例：统计文件数据行数"></a>输入示例：统计文件数据行数</h2><h3 id="wc命令介绍"><a href="#wc命令介绍" class="headerlink" title="wc命令介绍"></a>wc命令介绍</h3><p>Linux wc 命令可以用来对文本进行统计，包括单词个数、行数、字节数</p><h3 id="wc命令语法"><a href="#wc命令语法" class="headerlink" title="wc命令语法"></a>wc命令语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc  [options]  [文件名]</span><br></pre></td></tr></table></figure><p> options有如下:</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-c</code></td><td>character, 统计字节数</td></tr><tr><td><code>-w</code></td><td>word, 统计单词数</td></tr><tr><td><code>-l</code></td><td>line, 统计行数</td></tr></tbody></table><h3 id="演示-20"><a href="#演示-20" class="headerlink" title="演示"></a>演示</h3><p>统计文件redirect2.txt中数据行数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc -l &lt; redirect2.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200705225942198.png" alt="image-20200705225942198"></p><h2 id="输入示例：逐行读取文件数据"><a href="#输入示例：逐行读取文件数据" class="headerlink" title="输入示例：逐行读取文件数据"></a>输入示例：逐行读取文件数据</h2><p>循环读取文件每一行数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while read str; do echo $str; done &lt; redirect2.txt</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200705230840431.png" alt="image-20200705230840431"></p><h2 id="输入示例：读取终端输入数据的行数"><a href="#输入示例：读取终端输入数据的行数" class="headerlink" title="输入示例：读取终端输入数据的行数"></a>输入示例：读取终端输入数据的行数</h2><p><img src="https://file.coderstudy.cn/image/Pic/image-20200705231347332.png" alt="image-20200705231347332"></p><h2 id="小结-15"><a href="#小结-15" class="headerlink" title="小结"></a>小结</h2><ol><li><p>Shell重定向的含义</p><blockquote><p>改变标准数据流动的方向,  </p><p>a.可以将数据输出到文件中, 叫重定向输出</p><p>b.可以读取文件中的数据作为输入, 叫重定向输入</p></blockquote></li><li><p>使用重定向输出数据到文件中保存</p><blockquote><p>命令 &gt; file</p><p>命令 &gt;&gt; file</p><p>命令 2 &gt;&gt; file</p><p>命令 &gt; file 2&amp;&gt;1</p></blockquote></li><li><p>使用重定向从文件中读取输入数据</p><blockquote><p>命令 &lt; file</p><p>命令 &lt; file1 &gt; file2</p></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Shell计算命令：expr命令详解&quot;&gt;&lt;a href=&quot;#Shell计算命令：expr命令详解&quot; class=&quot;headerlink&quot; title=&quot;Shell计算命令：expr命令详解&quot;&gt;&lt;/a&gt;Shell计算命令：expr命令详解&lt;/h1&gt;&lt;h2 id=&quot;介</summary>
      
    
    
    
    <category term="运维" scheme="http://liujun1997.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Linux Shell" scheme="http://liujun1997.github.io/tags/Linux-Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell-2</title>
    <link href="http://liujun1997.github.io/2021/09/04/Shell-2/"/>
    <id>http://liujun1997.github.io/2021/09/04/Shell-2/</id>
    <published>2021-09-04T07:50:55.000Z</published>
    <updated>2022-04-23T12:25:27.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell字符串变量：格式介绍"><a href="#Shell字符串变量：格式介绍" class="headerlink" title="Shell字符串变量：格式介绍"></a>Shell字符串变量：格式介绍</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>字符串（String）就是一系列字符的组合。字符串是 Shell 编程中最常用的数据类型之一（除了数字和字符串，也没有其他类型了）</p><h2 id="字符串的3种格式"><a href="#字符串的3种格式" class="headerlink" title="字符串的3种格式"></a>字符串的3种格式</h2><ol><li><p>单引号方式</p></li><li><p>双引号方式, 推荐</p></li><li><p>不用引号方式</p></li></ol><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610164651589.png" alt="image-20200610164651589"> </p><h2 id="字符串的3种格式区别"><a href="#字符串的3种格式区别" class="headerlink" title="字符串的3种格式区别"></a>字符串的3种格式区别</h2><ol><li><p>使用单引号 <code>&#39;&#39;</code>  的字符串：</p><p>任何字符都会原样输出，在拼接字符串中使用变量是无效的。</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610163234693.png" alt="image-20200610163234693"></p></li><li><p>由双引号<code>&quot; &quot;</code>包围的字符串：</p><p>其中包含了变量，那么该变量会被解析得到值，而不是原样输出。</p><p>字符串中还可以出现双引号的子字符串，但是需要转义。</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610163716853.png" alt="image-20200610163716853"></p></li><li><p>不被引号包围的字符串</p><p>不被引号包围的字符串中出现变量时也会被解析，这一点和双引号<code>&quot; &quot;</code>包围的字符串一样。</p><p>字符串中不能出现空格，否则空格后边的字符串会作为其他命令解析。</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610164851784.png" alt="image-20200610164851784"></p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610164953256.png" alt="image-20200610164953256"></p></li></ol><h2 id="获取字符串的长度"><a href="#获取字符串的长度" class="headerlink" title="获取字符串的长度"></a>获取字符串的长度</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;<span class="comment">#字符串变量名&#125;</span></span></span><br></pre></td></tr></table></figure><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>获取字符串的字符长度</p><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610165428148.png" alt="image-20200610165428148"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>能够使用字符串的3种方式</p><blockquote><p>单引号方式</p><p>双引号方式[推荐]</p><p>不使用引号方式</p></blockquote><p>掌握3种方式的区别</p><blockquote><p>单引号,  原样输出, 不会解析里面的变量</p><p>双引号,  会解析里面的变量, 并且可以使用子双引号, 需要转义</p><p>不使用引号, 也会解析里面的变量, 但是不能含有空格, 空格后面的字符串会作为命令去执行</p></blockquote><p>能够获取字符串的长度</p><blockquote><p>${&#35;var_name}</p></blockquote><h1 id="Shell字符串变量：拼接"><a href="#Shell字符串变量：拼接" class="headerlink" title="Shell字符串变量：拼接"></a>Shell字符串变量：拼接</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>掌握Shell字符串拼接</p><h2 id="字符串拼接方式"><a href="#字符串拼接方式" class="headerlink" title="字符串拼接方式"></a>字符串拼接方式</h2><ol><li><p>无符号拼接</p></li><li><p>双引号拼接</p></li><li><p>混合拼接</p></li></ol><h2 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h2><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610171003827.png" alt="image-20200610171003827"></p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><ol><li><p>无符号拼接</p></li><li><p>双引号拼接</p></li><li><p>混合拼接</p></li></ol><h1 id="Shell字符串变量：字符串截取"><a href="#Shell字符串变量：字符串截取" class="headerlink" title="Shell字符串变量：字符串截取"></a>Shell字符串变量：字符串截取</h1><h2 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h2><p>掌握shell字符串截取的常用格式</p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><table><thead><tr><th>格式</th><th>说明</th></tr></thead><tbody><tr><td><code>$&#123;变量名:start:length&#125;</code></td><td>从 string 字符串的左边第 start 个字符开始，<br>向右截取 length 个字符。start从0开始</td></tr><tr><td><code>$&#123;变量名:start&#125;</code></td><td>从 string 字符串的左边第 start 个字符开始截取，直到最后。</td></tr><tr><td><code>$&#123;变量名:0-start:length&#125;</code></td><td>从 string 字符串的右边第 start 个字符开始，<br>向右截取 length 个字符。start从1开始, 代表右侧第一个字符</td></tr><tr><td><code>$&#123;变量名:0-start&#125;</code></td><td>从 string 字符串的右边第 start 个字符开始截取，直到最后。</td></tr><tr><td><code>$&#123;变量名#*chars&#125;</code></td><td>从 string 字符串左边第一次出现 *chars 的位置开始，<br>截取 *chars 右边的所有字符。</td></tr><tr><td><code>$&#123;变量名##*chars&#125;</code></td><td>从 string 字符串左边最后一次出现 *chars 的位置开始，<br>截取 *chars 右边的所有字符。</td></tr><tr><td><code>$&#123;变量名%chars*&#125;</code></td><td>从 string 字符串右边第一次出现 chars* 的位置开始，<br>截取 chars* 左边的所有字符。</td></tr><tr><td><code>$&#123;变量名%%chars*&#125;</code></td><td>从 string 字符串右边最后一次出现 chars* 的位置开始，<br>截取 chars* 左边的所有字符</td></tr></tbody></table><h2 id="示例要求"><a href="#示例要求" class="headerlink" title="示例要求"></a>示例要求</h2><p>字符串”welcome to itheima”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从左侧第0个开始,向左截取2个字符</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从左侧第11个开始,向左截取所有字符</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从右侧第5个开始,向右截取2个字符</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 截取左边第一次出现字符e右边的所有字符</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 截取左边最后一次出现字符e右边的所有字符</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 截取右边第一次次出现字符e左边的所有字符</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 截取右边最后一次出现字符e左边的所有字符</span></span><br></pre></td></tr></table></figure><h2 id="截取演示"><a href="#截取演示" class="headerlink" title="截取演示"></a>截取演示</h2><p>从左侧第0个开始,向左截取2个字符</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200707151451728.png" alt="image-20200707151451728"></p><p>从左侧第11个开始,向左截取所有字符</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200707151735114.png" alt="image-20200707151735114"></p><p>从右侧第5个开始,向右截取2个字符</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200707151355501.png" alt="image-20200707151355501"></p><p>截取左边第一次出现字符e右边的所有字符</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200707151952438.png" alt="image-20200707151952438"></p><p>截取左边最后一次出现字符e右边的所有字符</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200707152103808.png" alt="image-20200707152103808"></p><p>截取右边第一次次出现字符e左边的所有字符</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200707152615594.png" alt="image-20200707152615594"></p><p>截取右边最后一次出现字符e左边的所有字符</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200707152632316.png" alt="image-20200707152632316"></p><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><table><thead><tr><th>格式</th><th>说明</th></tr></thead><tbody><tr><td><code>$&#123;变量名: start :length&#125;</code></td><td>从左边start位置开始截取length个字符长度, 从0开始</td></tr><tr><td><code>$&#123;变量名: start&#125;</code></td><td>从左边start位置开始截取到最后所有字符</td></tr></tbody></table><h1 id="Shell索引数组变量：定义-获取-拼接-删除"><a href="#Shell索引数组变量：定义-获取-拼接-删除" class="headerlink" title="Shell索引数组变量：定义-获取-拼接-删除"></a>Shell索引数组变量：定义-获取-拼接-删除</h1><h2 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h2><ol><li><p>能够定义Shell数组</p></li><li><p>能够获取Shell数组数据</p></li><li><p>能够进行Shell数组的拼接, 删除</p></li></ol><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>Shell 支持数组（Array）,   数组是若干数据的集合，其中的每一份数据都称为数组的元素。</p><blockquote><p>注意Bash Shell 只支持一维数组，不支持多维数组。</p></blockquote><h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>在 Shell 中，用括号<code>( )</code>来表示数组，数组元素之间用空格来分隔. 语法为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array_name=(item1  item2 ...)  # 方式1</span><br><span class="line">array_name=([索引下标1]=item1  [索引下标2]=item2  ...)  # 方式2</span><br></pre></td></tr></table></figure><blockquote><p>注意，赋值号 <code>=</code> 两边不能有空格</p></blockquote><h3 id="演示-2"><a href="#演示-2" class="headerlink" title="演示"></a>演示</h3><p>1.定义数字存储100,3,22,58,77,17,20</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums=(29 100 13 8 91 44)</span><br></pre></td></tr></table></figure><p>2.Shell 是弱类型的，它并不要求所有数组元素的类型必须相同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr=(20 56 &quot;http://www.itcast.cn/&quot;)</span><br></pre></td></tr></table></figure><p>Shell数组元素定义后不是固定的,  定义后还可以赋值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[6]=100</span><br></pre></td></tr></table></figure><p>3.可以给指定元素赋值初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr2=([0]=1 [2]=100 [4]=aa)</span><br></pre></td></tr></table></figure><blockquote><p>由于上面只赋值了3个元素, 所以数组的长度是3</p></blockquote><p><img src="https://file.coderstudy.cn/image/Pic/image-20200629143058345.png" alt="image-20200629143058345"></p><h2 id="数组的获取"><a href="#数组的获取" class="headerlink" title="数组的获取"></a>数组的获取</h2><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><p>1.通过下标获取元素值,index从0开始</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;arr[index]&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意使用<code>&#123; &#125;</code></p></blockquote><p>2.获取值同时复制给其他变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">item=$&#123;arr[index]&#125;</span><br></pre></td></tr></table></figure><p>3.使用 <code>@</code> 或 <code>*</code> 可以获取数组中的所有元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;arr[@]&#125;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;arr[*]&#125;</span></span><br></pre></td></tr></table></figure><p>4.获取数组的长度或个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;<span class="comment">#arr[@]&#125;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;<span class="comment">#arr[*]&#125;</span></span></span><br></pre></td></tr></table></figure><p>5.获取数组指定元素的字符长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;<span class="comment">#arr[索引]&#125;</span></span></span><br></pre></td></tr></table></figure><h3 id="演示-3"><a href="#演示-3" class="headerlink" title="演示"></a>演示</h3><p><img src="https://file.coderstudy.cn/image/Pic/image-20200629143255421.png" alt="image-20200629143255421"></p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200629144217560.png" alt="image-20200629144217560"></p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200629144245753.png" alt="image-20200629144245753"></p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200629144359259.png" alt="image-20200629144359259"></p><h2 id="数组的拼接"><a href="#数组的拼接" class="headerlink" title="数组的拼接"></a>数组的拼接</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>所谓 Shell 数组拼接（数组合并），就是将两个数组连接成一个数组</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><p>使用 <code>@</code> 和 <code>*</code> 获取数组所有元素之后进行拼接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array_new=($&#123;array1[@]&#125; $&#123;array2[@]&#125; ...)</span><br><span class="line">array_new=($&#123;array1[*]&#125; $&#123;array2[*]&#125; ...)</span><br></pre></td></tr></table></figure><h3 id="演示-4"><a href="#演示-4" class="headerlink" title="演示"></a>演示</h3><p><img src="https://file.coderstudy.cn/image/Pic/image-20200629145734269.png" alt="image-20200629145734269"></p><h2 id="数组的删除"><a href="#数组的删除" class="headerlink" title="数组的删除"></a>数组的删除</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>删除数组指定元素数据和删除整个数组数据</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><p>删除数组指定元素数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset array_name[index]</span><br></pre></td></tr></table></figure><p>删除整个数组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset array_name</span><br></pre></td></tr></table></figure><h3 id="演示-5"><a href="#演示-5" class="headerlink" title="演示"></a>演示</h3><p><img src="https://file.coderstudy.cn/image/Pic/image-20200629163807706.png" alt="image-20200629163807706"></p><h2 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h2><p>1.能够定义Shell数组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array_name=(item1 item2 ...)</span><br><span class="line">array_name=([索引1]=item1 [索引2]=item2 ...)</span><br></pre></td></tr></table></figure><p>2.能够获取Shell数组数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;array_name[索引下标]&#125;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;array_name[*]&#125;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;array_name[@]&#125;</span></span><br></pre></td></tr></table></figure><p>3.数组的拼接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_newname=($&#123;array_name1[*]&#125; $&#123;array_name2[*]&#125; ...)</span><br></pre></td></tr></table></figure><p>4.数组的删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unset array_name[索引]  </span><br><span class="line">unset array_name</span><br></pre></td></tr></table></figure><h1 id="Shell内置命令：alias设置别名"><a href="#Shell内置命令：alias设置别名" class="headerlink" title="Shell内置命令：alias设置别名"></a>Shell内置命令：alias设置别名</h1><h2 id="目标-3"><a href="#目标-3" class="headerlink" title="目标"></a>目标</h2><p>1.理解内置命令的含义</p><p>2.能够使用alias内置命令进行给命令定义别名</p><h2 id="内置命令介绍"><a href="#内置命令介绍" class="headerlink" title="内置命令介绍"></a>内置命令介绍</h2><p>Shell 内置命令，就是由 Bash Shell 自身提供的命令，而不是文件系统中的可执行脚本文件。</p><p>使用type 来确定一个命令是否是内置命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type 命令</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200630083936549.png" alt="image-20200630083936549"></p><p>通常来说，内置命令会比外部命令执行得更快，执行外部命令时不但会触发磁盘 I/O，还需要 fork 出一个单独的进程来执行，执行完成后再退出。而执行内置命令相当于调用当前 Shell 进程的一个函数, 还是在当前Shell环境进程内, 减少了上下文切换。</p><h2 id="内置命令列表"><a href="#内置命令列表" class="headerlink" title="内置命令列表"></a>内置命令列表</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>:</td><td>扩展参数列表，执行重定向操作</td></tr><tr><td>.</td><td>读取并执行指定文件中的命令（在当前 shell 环境中）</td></tr><tr><td>alias</td><td>为指定命令定义一个别名</td></tr><tr><td>bg</td><td>将作业以后台模式运行</td></tr><tr><td>bind</td><td>将键盘序列绑定到一个 readline 函数或宏</td></tr><tr><td>break</td><td>退出 for、while、select 或 until 循环</td></tr><tr><td>builtin</td><td>执行指定的 shell 内建命令</td></tr><tr><td>caller</td><td>返回活动子函数调用的上下文</td></tr><tr><td>cd</td><td>将当前目录切换为指定的目录</td></tr><tr><td>command</td><td>执行指定的命令，无需进行通常的 shell 查找</td></tr><tr><td>compgen</td><td>为指定单词生成可能的补全匹配</td></tr><tr><td>complete</td><td>显示指定的单词是如何补全的</td></tr><tr><td>compopt</td><td>修改指定单词的补全选项</td></tr><tr><td>continue</td><td>继续执行 for、while、select 或 until 循环的下一次迭代</td></tr><tr><td>declare</td><td>声明一个变量或变量类型。</td></tr><tr><td>dirs</td><td>显示当前存储目录的列表</td></tr><tr><td>disown</td><td>从进程作业表中刪除指定的作业</td></tr><tr><td>echo</td><td>将指定字符串输出到 STDOUT</td></tr><tr><td>enable</td><td>启用或禁用指定的内建shell命令</td></tr><tr><td>eval</td><td>将指定的参数拼接成一个命令，然后执行该命令</td></tr><tr><td>exec</td><td>用指定命令替换 shell 进程</td></tr><tr><td>==exit</td><td>强制 shell 以指定的退出状态码退出</td></tr><tr><td>export</td><td>设置子 shell 进程可用的变量</td></tr><tr><td>fc</td><td>从历史记录中选择命令列表</td></tr><tr><td>fg</td><td>将作业以前台模式运行</td></tr><tr><td>getopts</td><td>分析指定的位置参数</td></tr><tr><td>hash</td><td>查找并记住指定命令的全路径名</td></tr><tr><td>help</td><td>显示帮助文件</td></tr><tr><td>history</td><td>显示命令历史记录</td></tr><tr><td>jobs</td><td>列出活动作业</td></tr><tr><td>kill</td><td>向指定的进程 ID(PID) 发送一个系统信号</td></tr><tr><td>let</td><td>计算一个数学表达式中的每个参数</td></tr><tr><td>local</td><td>在函数中创建一个作用域受限的变量</td></tr><tr><td>logout</td><td>退出登录 shell</td></tr><tr><td>mapfile</td><td>从 STDIN 读取数据行，并将其加入索引数组</td></tr><tr><td>popd</td><td>从目录栈中删除记录</td></tr><tr><td>printf</td><td>使用格式化字符串显示文本</td></tr><tr><td>pushd</td><td>向目录栈添加一个目录</td></tr><tr><td>pwd</td><td>显示当前工作目录的路径名</td></tr><tr><td>read</td><td>从 STDIN 读取一行数据并将其赋给一个变量</td></tr><tr><td>readarray</td><td>从 STDIN 读取数据行并将其放入索引数组</td></tr><tr><td>readonly</td><td>从 STDIN 读取一行数据并将其赋给一个不可修改的变量</td></tr><tr><td>return</td><td>强制函数以某个值退出，这个值可以被调用脚本提取</td></tr><tr><td>set</td><td>设置并显示环境变量的值和 shell 属性</td></tr><tr><td>shift</td><td>将位置参数依次向下降一个位置</td></tr><tr><td>shopt</td><td>打开/关闭控制 shell 可选行为的变量值</td></tr><tr><td>source</td><td>读取并执行指定文件中的命令（在当前 shell 环境中）</td></tr><tr><td>suspend</td><td>暂停 Shell 的执行，直到收到一个 SIGCONT 信号</td></tr><tr><td>test</td><td>基于指定条件返回退出状态码 0 或 1</td></tr><tr><td>times</td><td>显示累计的用户和系统时间</td></tr><tr><td>trap</td><td>如果收到了指定的系统信号，执行指定的命令</td></tr><tr><td>type</td><td>显示指定的单词如果作为命令将会如何被解释</td></tr><tr><td>typeset</td><td>声明一个变量或变量类型。</td></tr><tr><td>ulimit</td><td>为系统用户设置指定的资源的上限</td></tr><tr><td>umask</td><td>为新建的文件和目录设置默认权限</td></tr><tr><td>unalias</td><td>刪除指定的别名</td></tr><tr><td>unset</td><td>刪除指定的环境变量或 shell 属性</td></tr><tr><td>wait</td><td>等待指定的进程完成，并返回退出状态码</td></tr></tbody></table><h2 id="alisa-介绍"><a href="#alisa-介绍" class="headerlink" title="alisa 介绍"></a>alisa 介绍</h2><p>alisa 用于给命令创建别名。</p><p>好处:  可以将经常操作比较复杂的命令进行设置别名, 通过别名的操作提高工作效率</p><p>若该命令且不带任何参数，则显示当前 Shell 进程中的所有别名列表。</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200630084814561.png" alt="image-20200630084814561"></p><p>上面是系统为了方便命令操作默认将部分命令创建为别名  <code>ll</code> 的命令与<code>ls -l</code>的效果一样,   就是因为ll是别名</p><h2 id="alias别名定义语法"><a href="#alias别名定义语法" class="headerlink" title="alias别名定义语法"></a>alias别名定义语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias 别名=&quot;命令&quot;</span><br></pre></td></tr></table></figure><blockquote><p>这里使用单引号或双引号都可以</p></blockquote><h2 id="unalias-别名删除语法"><a href="#unalias-别名删除语法" class="headerlink" title="unalias 别名删除语法"></a>unalias 别名删除语法</h2><p>删除指定的别名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unalias 别名</span><br></pre></td></tr></table></figure><p>删除当前Shell环境中所有的别名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unalias -a</span><br></pre></td></tr></table></figure><blockquote><p>注意:  以上2种方式删除都是临时删除当前Shell的别名,  如果想永久删除必须去配置文件中手动删除</p></blockquote><h2 id="alias演示"><a href="#alias演示" class="headerlink" title="alias演示"></a>alias演示</h2><p>输出所有进行信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux</span><br></pre></td></tr></table></figure><p>给上面的命令起别名为psList, 并使用psList输出</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200630091546806.png" alt="image-20200630091546806"></p><p>删除psList别名</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200630091747276.png" alt="image-20200630091747276"></p><h2 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h2><p>1.理解内置命令的含义</p><blockquote><p>就是Shell内部提供的命令, 可以直接使用</p><p>内置命令与外部的脚本文件执行区别</p><p>​     内置命令: 执行速度快, 内置命令执行是当前Shell环境的一部分, 就在当前进程内执行, 减少了上下文切换</p><p>​     外部的脚本文件:  执行速度慢, 需要磁盘I/O操作, 并且是fork一个新的进程运行脚本文件,导致进程之间上下文切换</p></blockquote><p>2.能够使用alias内置命令</p><blockquote><p>定义别名语法:  <code>alias 别名=&quot;命令&quot;</code></p><p>删除别名: <code>unalias 别名</code></p></blockquote><h1 id="Shell内置命令：echo输出字符串"><a href="#Shell内置命令：echo输出字符串" class="headerlink" title="Shell内置命令：echo输出字符串"></a>Shell内置命令：echo输出字符串</h1><h2 id="目标-4"><a href="#目标-4" class="headerlink" title="目标"></a>目标</h2><p>1.能够echo输出不换行的字符串</p><p>2.能够使用echo输出转义字符</p><h2 id="echo命令介绍"><a href="#echo命令介绍" class="headerlink" title="echo命令介绍"></a>echo命令介绍</h2><p>echo 是一个 Shell 内置命令，用于在终端输出字符串，并在最后默认加上换行符</p><h2 id="echo输出语法"><a href="#echo输出语法" class="headerlink" title="echo输出语法"></a>echo输出语法</h2><p>默认输出换行语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 字符串</span><br></pre></td></tr></table></figure><p>输出不换行语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -n  字符串</span><br></pre></td></tr></table></figure><h2 id="输出演示"><a href="#输出演示" class="headerlink" title="输出演示"></a>输出演示</h2><p>1.创建echo1.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch echo1.sh</span><br></pre></td></tr></table></figure><p>2.编辑文件内容并保存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim echo1.sh</span><br></pre></td></tr></table></figure><p>文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;hello&quot;</span><br><span class="line">echo &quot;world&quot;</span><br><span class="line">echo -n &quot;itheima &quot;</span><br><span class="line">echo -n &quot;shell &quot;</span><br></pre></td></tr></table></figure><p>3.运行echo1.sh文件观察效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200630094335603.png" alt="image-20200630094335603"></p><p>itheima shell输出为一行</p><h2 id="echo输出转义字符"><a href="#echo输出转义字符" class="headerlink" title="echo输出转义字符"></a>echo输出转义字符</h2><h3 id="n-转义字符"><a href="#n-转义字符" class="headerlink" title="\n 转义字符"></a><code>\n</code> 转义字符</h3><p>用于echo输出字符串非结尾处的换行,  但是默认echo无法解析<code>/n</code> 转义字符</p><p>演示</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200630100606558.png" alt="image-20200630100606558"></p><h3 id="e-参数"><a href="#e-参数" class="headerlink" title="-e 参数"></a><code>-e</code> 参数</h3><p><code>-e</code> 参数用于解析转义字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e &#x27;字符串中含有转义字符&#x27;</span><br></pre></td></tr></table></figure><p>演示</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200630100653445.png" alt="image-20200630100653445"></p><h3 id="c-转义字符"><a href="#c-转义字符" class="headerlink" title="/c 转义字符"></a><code>/c</code> 转义字符</h3><p><code>/c</code> 用于强制清除echo的结尾换行输出</p><p>演示</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200630100953178.png" alt="image-20200630100953178"></p><h2 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h2><p>1.echo输出不换行的字符串</p><blockquote><p><code>echo -n 输出的数据</code></p></blockquote><p>2.echo输出转义字符有哪些</p><blockquote><p>\n 换行字符</p><p>\c 清除echo结尾的换行</p><p><code>echo  -e  含有转义字符的数据</code></p></blockquote><h1 id="Shell内置命令：read读取控制台输入"><a href="#Shell内置命令：read读取控制台输入" class="headerlink" title="Shell内置命令：read读取控制台输入"></a>Shell内置命令：read读取控制台输入</h1><h2 id="目标-5"><a href="#目标-5" class="headerlink" title="目标"></a>目标</h2><p>理解read命令的作用</p><p>使用read给多个变量赋值</p><p>使用read读取1个字符</p><p>使用read限制时间输入</p><h2 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h2><p>read 是 Shell 内置命令，用于从标准输入中读取数据并赋值给变量。如果没有进行重定向，默认就是从终端控制台读取用户输入的数据；如果进行了重定向，那么可以从文件中读取数据。</p><blockquote><p>后续讲解Shell重定向</p></blockquote><h2 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read [-options] [var1 var2 ...]</span><br></pre></td></tr></table></figure><blockquote><p><code>options</code>表示选项，如下表所示；<code>var</code>表示用来存储数据的变量，可以有一个，也可以有多个。</p><p><code>options</code>和<code>var</code>都是可选的，如果没有提供变量名，那么读取的数据将存放到环境变量 <code>REPLY</code> 变量中。</p><p>$REPLY保存read最后一个读入命令的数据</p></blockquote><p>options支持的参数</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-a array</td><td>把读取的数据赋值给数组 array，从下标 0 开始。</td></tr><tr><td>-d delimiter</td><td>用字符串 delimiter 指定读取结束的位置，而不是一个换行符（读取到的数据不包括 delimiter）。</td></tr><tr><td>-e</td><td>在获取用户输入的时候，对功能键进行编码转换，不会直接显式功能键对应的字符。</td></tr><tr><td>==-n num==</td><td>读取 num 个字符，而不是整行字符。</td></tr><tr><td>==-p  prompt==</td><td>显示提示信息，提示内容为 prompt。</td></tr><tr><td>-r</td><td>原样读取（Raw mode），不把反斜杠字符解释为转义字符。</td></tr><tr><td>==-s==</td><td>静默模式（Silent mode），不会在屏幕上显示输入的字符。<br>当输入密码和其它确认信息的时候，这是很有必要的。</td></tr><tr><td>==-t seconds==</td><td>设置超时时间，单位为秒。如果用户没有在指定时间内输入完成，<br>那么 read 将会返回一个非 0 的退出状态，表示读取失败。</td></tr><tr><td>-u fd</td><td>使用文件描述符 fd 作为输入源，而不是标准输入，类似于重定向。</td></tr></tbody></table><h2 id="示例1：多个变量赋值"><a href="#示例1：多个变量赋值" class="headerlink" title="示例1：多个变量赋值"></a>示例1：多个变量赋值</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>使用 read 命令给多个变量赋值</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>编辑文件read1.sh脚本文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用<span class="built_in">read</span>命令读取数据,要有提示信息<span class="string">&quot;请输入姓名,年龄,爱好:&quot;</span> 将数据赋值给多个变量</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印每一个变量的值</span></span><br></pre></td></tr></table></figure><h3 id="演示-6"><a href="#演示-6" class="headerlink" title="演示"></a>演示</h3><p>创建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch read1.sh</span><br></pre></td></tr></table></figure><p>编辑文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim read1.sh</span><br></pre></td></tr></table></figure><p>read1.sh文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">read -p &quot;请输入姓名,年龄,爱好: &quot; name age hobby</span><br><span class="line">echo &quot;姓名：$name&quot;</span><br><span class="line">echo &quot;年龄：$age&quot;</span><br><span class="line">echo &quot;爱好：$hobby&quot;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200630112030560.png" alt="image-20200630112030560"></p><h2 id="示例2：读取一个字符"><a href="#示例2：读取一个字符" class="headerlink" title="示例2：读取一个字符"></a>示例2：读取一个字符</h2><h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><p>从终端控制台只读取一个字符</p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><p>编辑文件read2.sh脚本文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用<span class="built_in">read</span>命令读取数据,要有提示信息<span class="string">&quot;您确定要删除数据吗?(请输入y/n):&quot;</span> 并且设置读取一个字符</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印这个字符输出</span></span><br></pre></td></tr></table></figure><h3 id="演示-7"><a href="#演示-7" class="headerlink" title="演示"></a>演示</h3><p>创建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch read2.sh</span><br></pre></td></tr></table></figure><p>编辑文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim read2.sh</span><br></pre></td></tr></table></figure><p>read2.sh文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">read -n 1 -p &#x27;请输入一个字符: &#x27; char</span><br><span class="line">printf &#x27;\n&#x27;</span><br><span class="line">echo &#x27;你输入的字符为:&#x27;$char</span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p><code>-n 1</code>只读取一个字符。运行脚本后，只要输入的一个字符，立即读取结束，不用等待用户按下回车键。</p><p><code>printf &#39;\n&#39;</code>语句用于换行，否则 echo 的输出结果会和用户输入的内容位于同一行，不容易区分</p></blockquote><p>运行效果<br><img src="https://file.coderstudy.cn/image/Pic/image-20200630113542863.png" alt="image-20200630113542863"></p><h2 id="示例3：限制时间输入"><a href="#示例3：限制时间输入" class="headerlink" title="示例3：限制时间输入"></a>示例3：限制时间输入</h2><h4 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h4><p>在终端控制台输入时, 设置指定时间内输入密码</p><h4 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h4><p>编辑文件read3.sh脚本文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用<span class="built_in">read</span>命令读取数据,要有提示信息<span class="string">&quot;请输入密码(20秒内):&quot;</span> 并且设置限制时间20秒</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出一个换行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用<span class="built_in">read</span>命令读取数据,要有提示信息<span class="string">&quot;请再次输入密码(20秒内):&quot;</span> 并且设置限制时间20秒</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出一个换行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 校验密码与再次输入的密码是否一致</span></span><br></pre></td></tr></table></figure><h4 id="演示-8"><a href="#演示-8" class="headerlink" title="演示"></a>演示</h4><p>创建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch read3.sh</span><br></pre></td></tr></table></figure><p>编辑文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim read3.sh</span><br></pre></td></tr></table></figure><p>read3.sh文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">read -t 20 -sp &#x27;请输入密码(20秒内):&#x27; pwd1</span><br><span class="line">printf &#x27;\n&#x27;</span><br><span class="line">read -t 20 -sp &#x27;请再次输入密码(20秒内):&#x27; pwd2</span><br><span class="line">printf &#x27;\n&#x27;</span><br><span class="line">if</span><br><span class="line">        [ $pwd1 == $pwd2 ]</span><br><span class="line">then</span><br><span class="line">        echo &#x27;密码与确认密码一致, 验证通过&#x27;</span><br><span class="line">else</span><br><span class="line">        echo &#x27;密码与确认密码不一致,验证失败&#x27;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>执行文件运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200630115148158.png" alt="image-20200630115148158"></p><h2 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h2><p>read命令是什么</p><blockquote><p>用于读取标准输入(终端控制台用户输入的数据)</p></blockquote><p>read给多个变量赋值</p><blockquote><p><code>read var1 var2 ...</code></p></blockquote><p>read读取1个字符</p><blockquote><p><code>read -n 1 var1</code></p></blockquote><p>read限制时间输入</p><blockquote><p><code>read -t 秒数 var1</code></p></blockquote><h1 id="Shell内置命令：exit退出"><a href="#Shell内置命令：exit退出" class="headerlink" title="Shell内置命令：exit退出"></a>Shell内置命令：exit退出</h1><h2 id="目标-6"><a href="#目标-6" class="headerlink" title="目标"></a>目标</h2><p>掌握exit的应用场景</p><h2 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h2><p><code>exit</code> 用于退出当前Shell环境进程结束运行, 并且可以返回一个状态码.一般使用 <code>$?</code> 可以获取退出状态码</p><h2 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h2><p>正确退出语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit  # 默认返回状态码0, 一般代表命令执行成功</span><br></pre></td></tr></table></figure><p>错误退出语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit 非0数字 # 数字建议的范围0~255,  一般代表命令执行失败</span><br></pre></td></tr></table></figure><h2 id="exit应用场景"><a href="#exit应用场景" class="headerlink" title="exit应用场景"></a>exit应用场景</h2><p>1.结束当前Shell进程</p><p>2.当Shell 进程执行出错退出时，可以返回不同的状态值代表不同的错误</p><blockquote><p>比如执行一个脚本文件里面操作一个文件时，可以返回1 表示文件不存在，2 表示文件没有读取权限，3 表示文件类型不对。</p></blockquote><h2 id="示例：Shell脚本文件中使用exit退出"><a href="#示例：Shell脚本文件中使用exit退出" class="headerlink" title="示例：Shell脚本文件中使用exit退出"></a>示例：Shell脚本文件中使用exit退出</h2><h3 id="需求-3"><a href="#需求-3" class="headerlink" title="需求"></a>需求</h3><p>编写Shell脚本使用exit 退出,  退出时返回一个非0数字状态值,  执行脚本文件并打印返回状态值</p><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤"></a>步骤</h3><p>1.创建exit.sh文件</p><p>2.编辑exit.sh文件, 使用<code>exit 数字</code> 退出结束当前Shell</p><p>3.执行文件,打印返回状态值</p><h3 id="演示-9"><a href="#演示-9" class="headerlink" title="演示"></a>演示</h3><p>创建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch exit.sh</span><br></pre></td></tr></table></figure><p>编辑文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim exit.sh</span><br></pre></td></tr></table></figure><p>exit.sh文件内容: 使用<code>exit 数字</code> 退出结束当前Shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &#x27;one&#x27;</span><br><span class="line">exit 6</span><br><span class="line">echo &#x27;two&#x27;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200630150541964.png" alt="image-20200630150541964"></p><h2 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h2><p>exit的应用场景</p><blockquote><p>1.结束当前Shell进程</p><p>2.可以返回不同的状态码, 用于不同的业务处理</p></blockquote><h1 id="Shell内置命令：declare设置变量"><a href="#Shell内置命令：declare设置变量" class="headerlink" title="Shell内置命令：declare设置变量"></a>Shell内置命令：declare设置变量</h1><h2 id="目标-7"><a href="#目标-7" class="headerlink" title="目标"></a>目标</h2><p>1.能够使用declare设置变量的属性</p><p>2.能够使用declare查看全部Shell变量与函数</p><p>3.能够使用declare实现索引数组与关联数组变量</p><h2 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h2><p>declare命令用于声明 shell 变量。可用来声明变量并设置变量的属性，也可用来显示shell函数。若不加上任何参数，则会显示全部的shell变量与函数(与执行set指令的效果相同)。</p><h2 id="declare命令作用"><a href="#declare命令作用" class="headerlink" title="declare命令作用"></a>declare命令作用</h2><p>1.declare设置变量的属性[重要]</p><p>2.查看全部Shell变量与函数</p><p>3.实现关联数组变量[重要]</p><h2 id="declare设置变量的属性语法"><a href="#declare设置变量的属性语法" class="headerlink" title="declare设置变量的属性语法"></a>declare设置变量的属性语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare [+/-][aArxif][变量名称＝设置值]</span><br></pre></td></tr></table></figure><blockquote><p>+/- 　“-“可用来指定变量的属性，”+”则是取消变量所设的属性。</p><p>a    array,设置为普通索引数组</p><p>A    Array,设置为key-value关联数组</p><p>r 　readonly,将变量设置为只读,  也可以使用readonly</p><p>x 　exprot,设置变量成为全局变量，也可以使用export</p><p>i 　int,设置为整型变量。</p><p>f     function,设置为一个函数变量</p></blockquote><h2 id="示例1：设置变量属性"><a href="#示例1：设置变量属性" class="headerlink" title="示例1：设置变量属性"></a>示例1：设置变量属性</h2><h3 id="需求-4"><a href="#需求-4" class="headerlink" title="需求"></a>需求</h3><p>操作一个变量属性,  设置为整型\ 取消整型\设置为只读等操作</p><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤"></a>步骤</h3><ol><li>使用declare设置一个整型变量并赋值</li><li>取消变量的整型类型, 尝试设置其他类型值尝试</li><li>设置变量只读, 尝试赋值测试</li></ol><h3 id="演示-10"><a href="#演示-10" class="headerlink" title="演示"></a>演示</h3><p><img src="https://file.coderstudy.cn/image/Pic/image-20200630164537518.png" alt="image-20200630164537518"></p><h2 id="查看全部Shell变量与函数定义语法"><a href="#查看全部Shell变量与函数定义语法" class="headerlink" title="查看全部Shell变量与函数定义语法"></a>查看全部Shell变量与函数定义语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare [-fF]</span><br></pre></td></tr></table></figure><blockquote><p>declare 后无参数, 查询全部Shell变量与函数定义, 与set功能一模一样</p><p>-f 　查询仅显示函数定义。</p><p>-F    查询仅显示函数名字</p></blockquote><h2 id="示例2：查看当前Shell所有函数名"><a href="#示例2：查看当前Shell所有函数名" class="headerlink" title="示例2：查看当前Shell所有函数名"></a>示例2：查看当前Shell所有函数名</h2><p>查看所有变量与所有函数 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200701093735283.png" alt="image-20200701093735283"></p><p>查看所有函数与定义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare -f</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200701094119327.png" alt="image-20200701094119327"></p><p>查询所有函数名列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare -F</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200701094553443.png" alt="image-20200701094553443"></p><h2 id="实现key-value关联数组变量语法"><a href="#实现key-value关联数组变量语法" class="headerlink" title="实现key-value关联数组变量语法"></a>实现key-value关联数组变量语法</h2><p>关联数组也称为“键值对（key-value）”数组，键（key）也即字符串形式的数组下标，值（value）也即元素值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare -A 关联数组变量名=([字符串key1]=值1 [字符串key2]=值2 ...)</span><br></pre></td></tr></table></figure><blockquote><p>declare也可以用于定义普通索引数组,  <code>-a</code> 参数创建普通或索引数组   <code>-A</code> 创建关联数组</p><p><code>declare -a 关联数组变量名=(值1 值2 ...)</code>  </p><p><code>declare -a 关联数组变量名=([0]=值1 [1]=值2 ...)</code>  </p></blockquote><p>获取指定key的值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;关联数组变量名[key]&#125;</span></span><br></pre></td></tr></table></figure><p>获取所有值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;关联数组变量名[*]&#125; <span class="comment"># 方式1</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;关联数组变量名[@]&#125; <span class="comment"># 方式2</span></span></span><br></pre></td></tr></table></figure><h2 id="示例3：实现普通索引数组"><a href="#示例3：实现普通索引数组" class="headerlink" title="示例3：实现普通索引数组"></a>示例3：实现普通索引数组</h2><h3 id="需求-5"><a href="#需求-5" class="headerlink" title="需求"></a>需求</h3><p>使用declare定义一普通数组,并获取打印元素数据的值</p><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤"></a>步骤</h3><p>1.创建declare1.sh文件</p><p>2.编辑declare1.sh文件内容,  使用declare定义普通数组数据与打印</p><p>2.执行文件</p><h3 id="演示-11"><a href="#演示-11" class="headerlink" title="演示"></a>演示</h3><p>创建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch declare1.sh</span><br></pre></td></tr></table></figure><p>编辑文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim declare1.sh</span><br></pre></td></tr></table></figure><p>declare1.sh文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">declare -a arr1=(1 2 3 aa)</span><br><span class="line">echo $&#123;arr1[1]&#125;</span><br><span class="line">echo $&#123;arr1[*]&#125;</span><br><span class="line"></span><br><span class="line">declare -a arr2=([0]=1 [1]=2  [2]=3  [4]=aa)</span><br><span class="line">echo $&#123;arr2[1]&#125;</span><br><span class="line">echo $&#123;arr2[*]&#125;</span><br><span class="line"></span><br><span class="line">declare -a arr2[3]=4</span><br><span class="line">echo $&#123;arr2[*]&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200701101651788.png" alt="image-20200701101651788"></p><h2 id="示例4：实现key-value关联数组"><a href="#示例4：实现key-value关联数组" class="headerlink" title="示例4：实现key-value关联数组"></a>示例4：实现key-value关联数组</h2><h3 id="需求-6"><a href="#需求-6" class="headerlink" title="需求"></a>需求</h3><p>使用declare定义关联数组并打印输出</p><h3 id="演示-12"><a href="#演示-12" class="headerlink" title="演示"></a>演示</h3><p><img src="https://file.coderstudy.cn/image/Pic/image-20200701105943576.png" alt="image-20200701105943576"></p><blockquote><p>注意: 使用参数<code>-A</code>  才是关联数组  , 关联数组无法使用索引获取</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200708093710733.png" alt="image-20200708093710733"></p></blockquote><h2 id="小结-8"><a href="#小结-8" class="headerlink" title="小结"></a>小结</h2><p>1.使用declare设置变量的属性(重点)</p><blockquote><p><code>declare [+/-][aArxif] 变量名=变量值</code></p></blockquote><p>2.使用declare查看全部Shell变量与函数</p><blockquote><p>declare</p><p>declare -f 查询所有函数的定义</p><p>declcare -F 查询所欲函数的名称列表</p></blockquote><p>3.使用declare实现普通索引数组和关联数组变量(重点)</p><blockquote><p>索引数组: <code>declare -a array_name=(item1 item2 ...)</code></p><p>关联数组: <code>declare -A array_name=([字符串key1]=item1 [字符串key2]=item2 ...)</code></p></blockquote><h1 id="Shell运算符：算术运算符"><a href="#Shell运算符：算术运算符" class="headerlink" title="Shell运算符：算术运算符"></a>Shell运算符：算术运算符</h1><h2 id="目标-8"><a href="#目标-8" class="headerlink" title="目标"></a>目标</h2><p>掌握算术运算符的使用</p><p>掌握expr求值表达式命令</p><h2 id="expr命令"><a href="#expr命令" class="headerlink" title="expr命令"></a>expr命令</h2><h3 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h3><p>expr 是 evaluate expressions 的缩写，译为“求值表达式”。Shell expr 是一个功能强大，并且比较复杂的命令，它除了可以实现整数计算，还可以结合一些选项对字符串进行处理，例如计算字符串长度、字符串比较、字符串匹配、字符串提取等, 后续讲解。</p><h3 id="expr语法"><a href="#expr语法" class="headerlink" title="expr语法"></a>expr语法</h3><p>计算语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr 算术运算符表达式</span><br></pre></td></tr></table></figure><blockquote><p>注意: 运算表达式</p></blockquote><p>获取计算结果赋值给新变量语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result=`expr 算术运算符表达式`</span><br></pre></td></tr></table></figure><h3 id="演示-13"><a href="#演示-13" class="headerlink" title="演示"></a>演示</h3><p><img src="https://file.coderstudy.cn/image/Pic/image-20200701150021331.png" alt="image-20200701150021331"></p><blockquote><p>注意:  运算符表达式中每个数字与符号之间要有空格</p></blockquote><h2 id="算术运算符介绍"><a href="#算术运算符介绍" class="headerlink" title="算术运算符介绍"></a>算术运算符介绍</h2><p>下表列出了常用的算术运算符，假定变量 a 为 1，变量 b 为 2：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法</td><td align="left"><code>expr $a + $b</code> 结果为 3</td></tr><tr><td align="left">-</td><td align="left">减法</td><td align="left"><code>expr $a - $b</code> 结果为 -1</td></tr><tr><td align="left">*</td><td align="left">乘法</td><td align="left"><code>expr $a \* $b</code> 结果为  2</td></tr><tr><td align="left">/</td><td align="left">除法</td><td align="left"><code>expr $b / $a</code> 结果为 2</td></tr><tr><td align="left">%</td><td align="left">取余</td><td align="left"><code>expr $b % $a</code> 结果为 0</td></tr><tr><td align="left">=</td><td align="left">赋值</td><td align="left">a=$b 将把变量 b 的值赋给 a</td></tr></tbody></table><blockquote><p>四则运算中如果使用了(), 也需要转义 <code>\( 1 + 1 \)</code></p></blockquote><h2 id="算术运算符演示"><a href="#算术运算符演示" class="headerlink" title="算术运算符演示"></a>算术运算符演示</h2><p>operation1.sh脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">a=1 b=2          # 声明变量a=1和b=2</span><br><span class="line">echo &quot;a=$&#123;a&#125; b=$&#123;b&#125;&quot;</span><br><span class="line">echo &quot;a + b = `expr $a + $b`&quot;</span><br><span class="line">echo &quot;a * b = `expr $a \* $b`&quot;</span><br><span class="line">echo &quot;a - b = `expr $a - $b`&quot;</span><br><span class="line">echo &quot;a * b = `expr $a \* $b`&quot;</span><br><span class="line">echo &quot;b / a = `expr $b / $a`&quot;</span><br><span class="line">echo &quot;b % a = `expr $b % $a`&quot;</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200708095733194.png" alt="image-20200708095733194"></p><h2 id="小结-9"><a href="#小结-9" class="headerlink" title="小结"></a>小结</h2><p>常见算术运算符的使用</p><blockquote><p><code>+ - \* / % </code></p></blockquote><p>expr执行运算命令</p><blockquote><p><code>expr 表达式</code></p><p>变量名=`expr 表达式`</p></blockquote><h1 id="Shell运算符：-比较运算符"><a href="#Shell运算符：-比较运算符" class="headerlink" title="Shell运算符： 比较运算符"></a>Shell运算符： 比较运算符</h1><h2 id="目标-9"><a href="#目标-9" class="headerlink" title="目标"></a>目标</h2><ol><li><p>了解有哪些比较运算符</p></li><li><p>掌握推荐使用哪个比较运算符</p></li></ol><h2 id="整数比较运算符"><a href="#整数比较运算符" class="headerlink" title="整数比较运算符"></a>整数比较运算符</h2><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><p>下表列出了常用的比较运算符，假定变量 a 为 1，变量 b 为 2：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left"><code>-eq</code></td><td align="left">equals 检测两个数是否相等，相等返回 0, 否则返回1。</td><td align="left"><code>[ $a -eq $b ]</code> 返回 1。</td></tr><tr><td align="left"><code>-ne</code></td><td align="left">not equals检测两个数是否不相等，不相等返回 true。</td><td align="left"><code>[ $a -ne $b ]</code> 返回 0。</td></tr><tr><td align="left"><code>-gt</code></td><td align="left">greater than检测左边的数是否大于右边的,<br>是返回0, 否则1</td><td align="left"><code>[ $a -gt $b ]</code> 返回 1。</td></tr><tr><td align="left"><code>-lt</code></td><td align="left">lower than检测左边的数是否小于右边的,<br>是返回0, 否则1</td><td align="left"><code>[ $a -lt $b ]</code> 返回 0。</td></tr><tr><td align="left"><code>-ge</code></td><td align="left">greater equals检测左边的数是否大于等于右边的,<br>是返回0, 否则1</td><td align="left"><code>[ $a -ge $b ] </code>返回 1。</td></tr><tr><td align="left"><code>-le</code></td><td align="left">lower equals检测左边的数是否小于等于右边的,<br>是返回0, 否则1</td><td align="left"><code>[ $a -le $b ] </code>返回 0。</td></tr><tr><td align="left"><code>&lt;</code></td><td align="left">检测左边的数是否小于右边的,<br/>是返回0, 否则1</td><td align="left"><code>(($a&lt;$b))</code> 返回0</td></tr><tr><td align="left"><code>&lt;=</code></td><td align="left">检测左边的数是否小于等于右边的,<br/>是返回0, 否则1</td><td align="left"><code>(($a&lt;=$b))</code> 返回0</td></tr><tr><td align="left"><code>&gt;</code></td><td align="left">检测左边的数是否大于右边的,<br/>是返回0, 否则1</td><td align="left"><code>(($a&gt;$b))</code> 返回1</td></tr><tr><td align="left"><code>&gt;=</code></td><td align="left">检测左边的数是否大于等于右边的,<br/>是返回0, 否则1</td><td align="left"><code>(($a&gt;=$b))</code> 返回1</td></tr><tr><td align="left"><code>==</code></td><td align="left">检测左边的数是否等于右边的,<br/>是返回0, 否则1</td><td align="left"><code>(($a==$b))</code> 返回1</td></tr><tr><td align="left"><code>!=</code></td><td align="left">检测左边的数是否不等于右边的,<br/>是返回0, 否则1</td><td align="left"><code>(($a!=$b))</code> 返回0</td></tr></tbody></table><blockquote><p>注意:</p><p> 整数比较运算符只支持整数，不支持小数与字符串(字符串比较后续讲解)，除非字符串的值是整数数字。</p><p>每个命令都有返回值,  这个后面我们会讲解退出状态再具体说明,  返回0代表成功, 返回1代表失败</p></blockquote><h3 id="演示-14"><a href="#演示-14" class="headerlink" title="演示"></a>演示</h3><p>operation2.sh脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">a=1 b=2</span><br><span class="line">echo &quot;a=$&#123;a&#125; b=$&#123;b&#125;&quot;</span><br><span class="line">if [ $a -eq $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a -eq $b : a 等于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a -eq $b: a 不等于 b&quot;  # 输出这个</span><br><span class="line">fi</span><br><span class="line">if [ $a -ne $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a -ne $b: a 不等于 b&quot;  # 输出这个</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a -ne $b : a 等于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a -gt $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a -gt $b: a 大于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a -gt $b: a 不大于 b&quot;  # 输出这个</span><br><span class="line">fi</span><br><span class="line">if [ $a -lt $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a -lt $b: a 小于 b&quot;   # 输出这个</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a -lt $b: a 不小于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a -ge $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a -ge $b: a 大于或等于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a -ge $b: a 小于 b&quot;  # 输出这个</span><br><span class="line">fi</span><br><span class="line">if [ $a -le $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a -le $b: a 小于或等于 b&quot;  # 输出这个</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a -le $b: a 大于 b&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if (($a &gt; $b))</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a &gt; $b: a 大于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a &gt; $b: a 不大于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if (($a &lt; $b))</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a &lt; $b: a 小于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a &lt; $b: a 不小于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if (($a &gt;= $b))</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a &gt;= $b: a 大于或等于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a &gt;= $b: a 小于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if (($a &lt;= $b))</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a &lt;= $b: a 小于或等于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a &lt;= $b: a 大于 b&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704084311714.png" alt="image-20200704084311714"></p><h2 id="字符串比较运算符"><a href="#字符串比较运算符" class="headerlink" title="字符串比较运算符"></a>字符串比较运算符</h2><h3 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h3><p>可以比较2个变量, 变量的类型可以为数字（整数，小数）与字符串</p><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p><p>字符串比较可以使用 <code>[[]]</code> 和 <code>[]</code> 2种方式</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">== 或 =</td><td align="left">相等。用于比较两个字符串或数字，相同则返回 0。可以使用<code>=</code></td><td align="left"><code>[ $a == $b ] </code>返回1 <br><code>[  $a = $b ]</code> 返回 1<br><code>[[ $a == $b ]]</code> 返回1<br><code>[[ $a = $b ]]</code> 返回1</td></tr><tr><td align="left">!=</td><td align="left">不相等。用于比较两个字符串或数字，不相同则返回 0。</td><td align="left"><code>[ $a != $b ]</code> 返回 0<br><code>[[ $a != $b ]]</code> 返回 0</td></tr><tr><td align="left">&lt;</td><td align="left">小于, 用于比较两个字符串或数字， 小于返回0， 否则返回1</td><td align="left"><code>[ $a \&lt; $b ]</code> 返回 0<br/><code>[[ $a &lt; $b ]]</code> 返回 0</td></tr><tr><td align="left">&gt;</td><td align="left">大于, 用于比较两个字符串或数字， 大于返回0， 否则返回1</td><td align="left"><code>[ $a \&gt; $b ]</code> 返回 1<br/><code>[[ $a &gt; $b ]]</code> 返回 1</td></tr><tr><td align="left">-z</td><td align="left">检测字符串长度是否为0，如果长度为0返回则返回0, 否则返回1。</td><td align="left">[ -z $a ] 返回 false。</td></tr><tr><td align="left">-n</td><td align="left">检测字符串长度是否不为 0，如果长度不为 0 则返回0, 否则返回1。</td><td align="left">[ -n “$a” ] 返回 true。</td></tr><tr><td align="left">$</td><td align="left">检测字符串是否不为空，不为空返回0, 为空返回1。</td><td align="left">[ $a ] 返回 true。</td></tr></tbody></table><blockquote><p>字符串比较没有 <code>&lt;=</code>  可以通过 <code>[[ &quot;a&quot; &lt; &quot;b&quot; &amp;&amp; &quot;a&quot; == &quot;b&quot; ]]</code></p></blockquote><h3 id="演示-15"><a href="#演示-15" class="headerlink" title="演示"></a>演示</h3><p>operation6.sh脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=&quot;itheima&quot; b=&quot;itcast&quot; c=1 d=2</span><br><span class="line">echo &quot;a=$&#123;a&#125;,b=$&#123;b&#125;,c=$&#123;c&#125;,d=$&#123;d&#125;&quot;</span><br><span class="line"></span><br><span class="line">if [ $a = $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a = $b : a 等于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a = $b: a 不等于 b&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $a != $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a != $b : a 不等于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a != $b: a 等于 b&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $a &gt; $b ]]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a &gt; $b : a 大于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a &gt; $b: a 不大于 b&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $a \&gt; $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a &gt; $b : a 大于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a &gt; $b: a 不大于 b&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $c &gt; $d ]]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$c &gt; $d : c 大于 d&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$c &gt; $d: c 不大于 d&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z $a ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;-z $a : 字符串长度为 0&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;-z $a : 字符串长度不为 0&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$a&quot; ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;-n $a : 字符串长度不为 0&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;-n $a : 字符串长度为 0&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $a ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a : 字符串不为空&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a : 字符串为空&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704110751421.png" alt="image-20200704110751421"></p><h2 id="和-的区别"><a href="#和-的区别" class="headerlink" title="[[]]  和 [] 的区别"></a><code>[[]]</code>  和 <code>[]</code> 的区别</h2><h3 id="区别1-word-splitting的发生"><a href="#区别1-word-splitting的发生" class="headerlink" title="区别1: word splitting的发生"></a>区别1: word splitting的发生</h3><h4 id="区别说明"><a href="#区别说明" class="headerlink" title="区别说明"></a>区别说明</h4><p><code>[[]]</code> 不会有word splitting发生</p><p><code>[]</code> 会有word splitting发生</p><h4 id="word-splitting介绍"><a href="#word-splitting介绍" class="headerlink" title="word splitting介绍"></a>word splitting介绍</h4><p>会将含有空格字符串进行分拆分割后比较</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704092823470.png" alt="image-20200704092823470"></p><blockquote><p>通过 <code>$?</code>  获取上一个命令的退出状态, 0代表成功, 1代表失败</p></blockquote><h3 id="区别2-转义字符"><a href="#区别2-转义字符" class="headerlink" title="区别2: 转义字符"></a>区别2: 转义字符</h3><h4 id="区别说明-1"><a href="#区别说明-1" class="headerlink" title="区别说明"></a>区别说明</h4><p><code>[[]]</code>  对 <code>&lt;</code> 不需要转义, 格式为 <code> [[ 字符串1 &lt; 字符串2 ]]</code>    </p><p><code>[]</code> 需要对 <code>&lt;,&gt;</code> 转义 ,  格式为 <code> [ 字符串1 \&lt; 字符串2 ]</code>    </p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p><code>[]</code> 执行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704100701687.png" alt="image-20200704100701687"></p><p><code>[[]]</code> 执行效果, 不需要转义执行结果正确</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200704100843230.png" alt="image-20200704100843230"></p><h2 id="小结-10"><a href="#小结-10" class="headerlink" title="小结"></a>小结</h2><ol><li><p>了解有哪些比较运算符</p><p>整数比较运算符</p><blockquote><p>比较方式: <code>[]</code> 和 <code>(())</code></p></blockquote><blockquote><p>方式1: <code>[  整数1 options 整数2 ]</code></p><p><code>options:  -eq  -gt -ge -lt -le -ne</code></p><p>方式2: <code>((整数1 options 整数2))</code></p><p><code>options: &lt; &lt;= &gt; &gt;= == !=</code>  注意判断等于不可以使用<code>=</code> ,等于在(())里面是赋值的含义 </p></blockquote><p>字符串,数字比较运算符</p><blockquote><p>介绍: 可以比较2个变量, 变量的类型可以为字符串, 数字(整数,小数)</p><p>比较方式: <code>[]</code> 和 <code>[[]]</code></p></blockquote><blockquote><p>方式1:  <code>[  变量1 options 整数2 ]</code></p><p>​    <code>options:  &lt;,&gt;,==,=,!=</code> </p><p>​    <code>&lt;,&gt;</code> 需要转义</p><p>​     会发生word splitting</p><p>方式2: <code>[[ 变量1 options 变量2]]</code></p><p>​    <code>options:  &lt;,&gt;,==,=,!=</code> </p><p>​    <code>&lt;,&gt;</code> 不需要转义</p><p>   不会发生word splitting</p></blockquote></li><li><p>推荐使用哪个比较运算符?</p><p><code>[[ 表达式 ]]</code>  即可以实现数字和字符串比较,  并且不需要转义, 不会word splitting</p></li></ol><h1 id="Shell运算符：-布尔运算符"><a href="#Shell运算符：-布尔运算符" class="headerlink" title="Shell运算符： 布尔运算符"></a>Shell运算符： 布尔运算符</h1><h2 id="目标-10"><a href="#目标-10" class="headerlink" title="目标"></a>目标</h2><p>掌握布尔运算符的使用</p><h2 id="介绍-9"><a href="#介绍-9" class="headerlink" title="介绍"></a>介绍</h2><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">!</td><td align="left">非运算，取反, 表达式为 true 则返回 false，<br>否则返回 true。</td><td align="left"><code>[ ! 表达式 ]</code> 取反。</td></tr><tr><td align="left">-o</td><td align="left">or 或运算，有一个表达式为 true 则返回 true。</td><td align="left"><code>[ 表达式1 -o 表达式2 ]</code></td></tr><tr><td align="left">-a</td><td align="left">and 与运算，两个表达式都为 true 才返回 true。</td><td align="left"><code>[ 表达式1 -a 表达式2 ]</code></td></tr></tbody></table><blockquote><p>注意布尔运算符放在<code>[]</code> 或 与test命令配合使用才有效  </p><p>布尔运算符常与与test命令配合使用, 后续讲解</p></blockquote><h2 id="演示-16"><a href="#演示-16" class="headerlink" title="演示"></a>演示</h2><p>operation4.sh脚本代码脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">a=1 b=2</span><br><span class="line"></span><br><span class="line">if [ $a -lt 2 -a $b -gt 10 ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a 小于 2 且 $b 大于 10 : 返回 true&quot;   </span><br><span class="line">else</span><br><span class="line">   echo &quot;$a 小于 2 且 $b 大于 10 : 返回 false&quot;  # $b -gt 10不成立, 输出这个表达式</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $a -lt 10 -o $b -gt 10 ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a 小于 10 或 $b 大于 10 : 返回 true&quot;  # $a -lt 10 成立, 输出这个表达式</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a 小于 10 或 $b 大于 10 : 返回 false&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ ! $a -gt $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a 大于 $b 取反 : 返回 true&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a 大于 $b 取反 : 返回 false&quot;   # $a -gt $b 为true , 取反为false, 输出这个表达式</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200701170127507.png" alt="image-20200701170127507"></p><h2 id="小结-11"><a href="#小结-11" class="headerlink" title="小结"></a>小结</h2><p>布尔运算符的使用</p><blockquote><p><code>!</code>  取反</p><p><code>-o</code>  or, 或者, 只要有一个表达式成立返回0, 那么就返回0</p><p><code>-a</code>  and, 并且, 需要多个表达式必须全部成立才返回0, 否则返回1</p><p>布尔运算符必须与[]使用  或者  与test命令一起使用,  后续讲解test命令</p></blockquote><h1 id="Shell运算符：-逻辑运算符"><a href="#Shell运算符：-逻辑运算符" class="headerlink" title="Shell运算符： 逻辑运算符"></a>Shell运算符： 逻辑运算符</h1><h2 id="目标-11"><a href="#目标-11" class="headerlink" title="目标"></a>目标</h2><ol><li>能够使用逻辑运算符</li><li>能够理解逻辑运算符与布尔运算符区别</li></ol><h2 id="介绍-10"><a href="#介绍-10" class="headerlink" title="介绍"></a>介绍</h2><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">逻辑的 AND</td><td align="left"><code>[[ 表达式1 &amp;&amp; 表达式2 ]]</code></td></tr><tr><td align="left">`</td><td align="left"></td><td align="left">`</td></tr><tr><td align="left">!</td><td align="left">逻辑非</td><td align="left"><code>[[ ! 表达式 ]]</code></td></tr></tbody></table><blockquote><p>注意</p><p> 使用<code>&amp;&amp;</code>  和  <code>||</code>  的运算符必须放在 <code>[[]]</code>  或 <code>(())</code>中才有效, 否则报错</p><p><code>!</code> 可以用在<code>[]</code>,<code>[[]]</code>中, 不可以在(())</p></blockquote><h2 id="演示-17"><a href="#演示-17" class="headerlink" title="演示"></a>演示</h2><p>operation5.sh脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=1 b=2</span><br><span class="line"></span><br><span class="line">if [[ $a -lt 10 &amp;&amp; $b -gt 10 ]]</span><br><span class="line">then</span><br><span class="line">   echo &quot;返回 true&quot; </span><br><span class="line">else</span><br><span class="line">   echo &quot;返回 false&quot;  # $b -gt 10 不成立, 输出false</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $a -lt 10 || $b -gt 10 ]]</span><br><span class="line">then</span><br><span class="line">   echo &quot;返回 true&quot;   # $a -lt 10 成立,  输出true</span><br><span class="line">else</span><br><span class="line">   echo &quot;返回 false&quot;  </span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200701172201560.png" alt="image-20200701172201560"></p><h2 id="小结-12"><a href="#小结-12" class="headerlink" title="小结"></a>小结</h2><ol><li><p>使用逻辑运算符</p><blockquote><p><code>!</code> 逻辑非</p><p><code>&amp;&amp;</code> 逻辑与</p><p><code>||</code>  逻辑或</p></blockquote></li><li><p>理解逻辑运算符与布尔运算符区别</p><blockquote><p>布尔运算符: <code>! -o  -a</code></p><p>​                     必须有[] 或test命令执行</p><p>逻辑运算符: <code>! ||  &amp;&amp;</code></p><p>​                       <code>|| &amp;&amp;</code>  必须有[[]] 或 (()) 执行</p><p>​                        <code>!</code> 可以用在 [] 或 [[]]  , 不可以用在(())</p></blockquote></li></ol><h1 id="Shell运算符：-文件测试运算符"><a href="#Shell运算符：-文件测试运算符" class="headerlink" title="Shell运算符： 文件测试运算符"></a>Shell运算符： 文件测试运算符</h1><h2 id="目标-12"><a href="#目标-12" class="headerlink" title="目标"></a>目标</h2><p>能够使用常用文件测试运算符检查文件</p><p>例如:  文件是否存在\是否可读\是否可执行\是否为空\是否可写\是否是目录\是否是普通文件</p><h2 id="linux系统文件类型介绍"><a href="#linux系统文件类型介绍" class="headerlink" title="linux系统文件类型介绍"></a>linux系统文件类型介绍</h2><p>-：普通文件</p><p>d：目录文件</p><p>l：链接文件</p><p>b：块设备文件</p><p>c：字符设备文件</p><blockquote><p>块设备文件: 比如计算机硬盘/dev/sda</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200708123349968.png" alt="image-20200708123349968"></p><p>字符设备文件: 比如计算机的USB文件/dev/usb    </p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200708123407345.png" alt="image-20200708123407345"></p><p>设备文件都是对应计算机硬件的,  不同的设备文件代表不同的传输数据方式</p></blockquote><p>p：管道文件</p><h2 id="介绍-11"><a href="#介绍-11" class="headerlink" title="介绍"></a>介绍</h2><p>文件测试运算符用于检测文件的各种属性。</p><p>属性检测描述如下：</p><table><thead><tr><th align="left">操作符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">-b file</td><td align="left">检测文件是否是块设备文件，如果是，则返回 true。</td><td align="left">[ -b $file ] 返回 false。</td></tr><tr><td align="left">-c file</td><td align="left">检测文件是否是字符设备文件，如果是，则返回 true。</td><td align="left">[ -c $file ] 返回 false。</td></tr><tr><td align="left">==-d file==</td><td align="left">directory, 检测文件是否是目录，如果是，则返回 true。</td><td align="left">[ -d $file ] 返回 false。</td></tr><tr><td align="left">==-f file==</td><td align="left">file, 检测文件是否是普通文件（既不是目录，也不是设备文件）<br>，如果是，则返回 true。</td><td align="left">[ -f $file ] 返回 true。</td></tr><tr><td align="left">-g file</td><td align="left">检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td align="left">[ -g $file ] 返回 false。</td></tr><tr><td align="left">-k file</td><td align="left">检测文件是否设置了粘着位(Sticky Bit)，如果是，<br>则返回 true。</td><td align="left">[ -k $file ] 返回 false。</td></tr><tr><td align="left">-p file</td><td align="left">检测文件是否是有名管道文件，如果是，则返回 true。</td><td align="left">[ -p $file ] 返回 false。</td></tr><tr><td align="left">-u file</td><td align="left">检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td align="left">[ -u $file ] 返回 false。</td></tr><tr><td align="left">==-r file==</td><td align="left">read,检测文件是否可读，如果是，则返回 true。</td><td align="left">[ -r $file ] 返回 true。</td></tr><tr><td align="left">==-w file==</td><td align="left">write,检测文件是否可写，如果是，则返回 true。</td><td align="left">[ -w $file ] 返回 true。</td></tr><tr><td align="left">==-x file==</td><td align="left">execute, 检测文件是否可执行，如果是，则返回 true。</td><td align="left">[ -x $file ] 返回 true。</td></tr><tr><td align="left">==-s file==</td><td align="left">size, 检测文件是否为空（文件大小是否大于0）<br>，不为空返回 true。</td><td align="left">[ -s $file ] 返回 true。</td></tr><tr><td align="left">==-e file==</td><td align="left">exists, 检测文件（包括目录）是否存在，如果是，<br>则返回 true。</td><td align="left">[ -e $file ] 返回 true。</td></tr><tr><td align="left">file1 -nt file2</td><td align="left">new than(nt),  file1是否比file2新</td><td align="left">[ file1 -nt file2 ]</td></tr><tr><td align="left">file1 -ot file2</td><td align="left">old than(ot), file1是否比file2旧</td><td align="left">[ file1 -ot file2 ]</td></tr></tbody></table><p>其他检查符：</p><ul><li>-S: 判断某文件是否 socket。</li><li>-L: link, 检测文件是否存在并且是一个符号链接。</li></ul><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ options 文件路径字符串]</span><br><span class="line">或</span><br><span class="line">[[ options 文件路径字符串 ]]</span><br></pre></td></tr></table></figure><h2 id="演示-18"><a href="#演示-18" class="headerlink" title="演示"></a>演示</h2><p>operation6.sh脚本代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">file=&quot;/root/operation1.sh&quot;</span><br><span class="line">if [ -w $file ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;文件可写&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;文件不可写&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -r $file ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;文件可读&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;文件不可读&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -x $file ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;文件可执行&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;文件不可执行&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -f $file ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;文件是普通文件&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;文件是特殊文件&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -s $file ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;文件不是空&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;文件是空&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -e $file ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;文件存在&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;文件不存在&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -d $file ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;文件是目录&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;文件不是目录&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">file2=&quot;/root/operation2.sh&quot;</span><br><span class="line">if [ file -nt file2 ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;operation1.sh文件比operation2.sh文件新&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;operation1.sh文件不比operation2.sh文件新&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703085454524.png" alt="image-20200703085454524"></p><blockquote><p>operation1.sh文件不可执行, 因为没有可执行权限</p></blockquote><p>查看operation1.sh文件权限</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703084825357.png" alt="image-20200703084825357"></p><p>给operation1.sh添加执行权限</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703085602758.png" alt="image-20200703085602758"></p><p>重新执行operation6.sh</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200703085719905.png" alt="image-20200703085719905"></p><h2 id="小结-13"><a href="#小结-13" class="headerlink" title="小结"></a>小结</h2><p>常用文件测试运算符</p><blockquote><p>文件是否存在: -e</p><p>是否可读 : -r</p><p>是否可执行: -x</p><p>是否为空: -s</p><p>是否可写:  -w</p><p>是否是目录: -d</p><p>是否是普通文件: -f</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Shell字符串变量：格式介绍&quot;&gt;&lt;a href=&quot;#Shell字符串变量：格式介绍&quot; class=&quot;headerlink&quot; title=&quot;Shell字符串变量：格式介绍&quot;&gt;&lt;/a&gt;Shell字符串变量：格式介绍&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="运维" scheme="http://liujun1997.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Linux Shell" scheme="http://liujun1997.github.io/tags/Linux-Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell-1</title>
    <link href="http://liujun1997.github.io/2021/09/04/Shell-1/"/>
    <id>http://liujun1997.github.io/2021/09/04/Shell-1/</id>
    <published>2021-09-04T07:39:55.000Z</published>
    <updated>2022-04-23T12:25:27.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell脚本入门：介绍"><a href="#Shell脚本入门：介绍" class="headerlink" title="Shell脚本入门：介绍"></a>Shell脚本入门：介绍</h1><h3 id="Shell介绍"><a href="#Shell介绍" class="headerlink" title="Shell介绍"></a>Shell介绍</h3><p>通过编写Shell命令发送给linux内核去执行, 操作就是计算机硬件. 所以Shell命令是用户操作计算机硬件的桥梁,</p><p>Shell是命令,  类似于windows系统Dos命令</p><p>Shell是一个门程序设计语言, Shell里面含有变量, 函数, 逻辑控制语句等等</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200706134738461.png" alt="image-20200706134738461"></p><h3 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h3><p>通过Shell命令或程序编程语言编写的Shell文本文件,  这就是Shell脚本 , 也叫Shell程序</p><h3 id="为什么学习Shell脚本"><a href="#为什么学习Shell脚本" class="headerlink" title="为什么学习Shell脚本?"></a>为什么学习Shell脚本?</h3><p>通过Shell命令与编程语言来提高linux系统的管理工作效率</p><h3 id="Shell的运行过程"><a href="#Shell的运行过程" class="headerlink" title="Shell的运行过程"></a>Shell的运行过程</h3><p>当用户下达指令给该操作系统的时候，实际上是把指令告诉shell，经过shell解释，处理后让内核做出相应的动作。 系统的回应和输出的信息也由shell处理，然后显示在用户的屏幕上。</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200313223530826.png" alt="image-20200313223530826"></p><h3 id="Shell解析器"><a href="#Shell解析器" class="headerlink" title="Shell解析器"></a>Shell解析器</h3><p>查看linux系统centos支持的shell解析器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200313225313350.png" alt="image-20200313225313350"></p><p>介绍解析器类型</p><table><thead><tr><th>解析器类型</th><th>介绍</th></tr></thead><tbody><tr><td>/bin/sh</td><td>Bourne Shell,是UNIX最初使用的shell;</td></tr><tr><td><font color=red>/bin/bash</font></td><td><font color=red>Bourne Again Shell它是Bourne Shell的扩展，简称bash，是LinuxOS默认shell,有灵活和强大的编辑接口，同时又很友好的用户界面，交互性很强；</font></td></tr><tr><td>/sbin/nologin</td><td>未登录解析器,  shell设置为/sbin/nologin 是用于控制用户禁止登陆系统的, 有时候有些服务，比如邮件服务，大部分都是用来接收主机的邮件而已，并不需要登陆</td></tr><tr><td>/bin/dash</td><td>dash（Debian Almquist Shell），也是一种 Unix shell。它比 Bash 小，只需要较少的磁盘空间，但是它的对话性功能也较少，交互性较差。</td></tr><tr><td>/bin/csh</td><td>C Shell是C语言风格Shell</td></tr><tr><td>/bin/tcsh</td><td>是C Shell的一个扩展版本。</td></tr></tbody></table><h3 id="Centos默认的解析器是bash"><a href="#Centos默认的解析器是bash" class="headerlink" title="Centos默认的解析器是bash"></a>Centos默认的解析器是bash</h3><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><blockquote><p>含义:  打印输出当前系统环境使用的Shell解析器类型</p><p>echo  用于打印输出数据到终端</p><p><code>$SHELL</code>  是全局共享的读取解析器类型环境变量, 全局环境变量时所有的Shell程序都可以读取的变量,</p></blockquote><p>效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200314234038389.png" alt="image-20200314234038389"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>1、Shell是什么</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">是命令, 类似windows的dos命令</span><br><span class="line">又是一门程序设计语言, 里面含有变量, 函数, 逻辑控制语句等</span><br></pre></td></tr></table></figure><p>2、Shell脚本是什么</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是一个文本文件, 里面可以编写Shell命令或进行编程, 形成一个可重用执行的脚本文件</span><br></pre></td></tr></table></figure><p>3、shell脚本的作用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过shell编程提高对linux系统管理工作效率</span><br></pre></td></tr></table></figure><p>4、linux系统默认的shell解析器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><h1 id="Shell脚本入门：编写格式与执行方式"><a href="#Shell脚本入门：编写格式与执行方式" class="headerlink" title="Shell脚本入门：编写格式与执行方式"></a>Shell脚本入门：编写格式与执行方式</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>1、掌握shell脚本编写规范</p><p>2、掌握执行shell脚本文件的3种方式与区别</p><h2 id="Shell脚本文件编写规范"><a href="#Shell脚本文件编写规范" class="headerlink" title="Shell脚本文件编写规范"></a>Shell脚本文件编写规范</h2><h3 id="脚本文件后缀名规范"><a href="#脚本文件后缀名规范" class="headerlink" title="脚本文件后缀名规范"></a>脚本文件后缀名规范</h3><p>shell脚本文件就是一个文本文件,  后缀名建议使用 <code>.sh</code> 结尾</p><h3 id="首行格式规范"><a href="#首行格式规范" class="headerlink" title="首行格式规范"></a>首行格式规范</h3><p>首行需要设置Shell解析器的类型, 语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br></pre></td></tr></table></figure><blockquote><p>含义:  设置当前shell脚本文件采用bash解析器运行脚本代码</p></blockquote><h3 id="注释格式"><a href="#注释格式" class="headerlink" title="注释格式"></a>注释格式</h3><p>单行注释, 语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注释内容</span></span><br></pre></td></tr></table></figure><p>多行注释, 语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;!</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注释内容1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注释内容2</span></span><br><span class="line">!</span><br></pre></td></tr></table></figure><h2 id="shell脚本HelloWord入门案例"><a href="#shell脚本HelloWord入门案例" class="headerlink" title="shell脚本HelloWord入门案例"></a>shell脚本HelloWord入门案例</h2><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>创建一个Shell脚本文件helloworld.sh，输出hello world字符串</p><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="https://file.coderstudy.cn/image/Pic/image-20200401022006169.png" alt="image-20200401022006169"></p><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>1、创建shell脚本文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch helloworld.sh</span><br></pre></td></tr></table></figure><p>2、编辑文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim helloworld.sh</span><br></pre></td></tr></table></figure><p>3、增加shell脚本文件内容如下，并保存退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;hello world&quot;</span><br></pre></td></tr></table></figure><p>4、执行脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh helloworld.sh</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200314234950078.png" alt="image-20200314234950078"></p><h2 id="脚本文件的常用执行3种方式"><a href="#脚本文件的常用执行3种方式" class="headerlink" title="脚本文件的常用执行3种方式"></a>脚本文件的常用执行3种方式</h2><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ol><li><p>sh解析器执行方式</p><p>语法: <code>sh 脚本文件</code></p><p>介绍: 就是利用sh命令执行脚本文件,  本质就是使用Shell解析器运行脚本文件</p></li><li><p>bash解析器执行方式</p><p>语法: <code>bash 脚本文件</code></p><p>介绍: 就是利用bash命令执行脚本文件,  本质就是使用Shell解析器运行脚本文件</p></li><li><p>仅路径执行方式</p><p>语法: <code>./脚本文件</code></p><p>介绍:  执行当前目录下的脚本文件</p><p>注意:  脚本文件自己执行需要具有可执行权限, 否则无法执行</p></li></ol><h4 id="3种方式的区别"><a href="#3种方式的区别" class="headerlink" title="3种方式的区别"></a>3种方式的区别</h4><p>​        sh或bash执行脚本文件方式是直接使用Shell解析器运行脚本文件, 不需要可执行权限</p><p>​         仅路径方式是执行脚本文件自己, 需要可执行权限</p><h4 id="执行脚本方式1-sh命令执行"><a href="#执行脚本方式1-sh命令执行" class="headerlink" title="执行脚本方式1-sh命令执行"></a>执行脚本方式1-sh命令执行</h4><p>相对路径效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh helloworld.sh</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200401120441693.png" alt="image-20200401120441693"></p><p>绝对路径效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /root/helloworld.sh</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200401123156588.png" alt="image-20200401123156588"></p><h4 id="执行脚本方式2-bash命令执行"><a href="#执行脚本方式2-bash命令执行" class="headerlink" title="执行脚本方式2-bash命令执行"></a>执行脚本方式2-bash命令执行</h4><p>相对路径效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200401123727643.png" alt="image-20200401123727643"></p><p>绝对路径效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200401123801116.png" alt="image-20200401123801116"></p><h4 id="执行脚本方式3-仅路径执行"><a href="#执行脚本方式3-仅路径执行" class="headerlink" title="执行脚本方式3-仅路径执行"></a>执行脚本方式3-仅路径执行</h4><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p>步骤1：设置所有用户对此脚本文件增加可执行性权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x 脚本文件</span><br></pre></td></tr></table></figure><p>步骤2：执行脚本语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">脚本文件的相对路径或绝对路径</span><br></pre></td></tr></table></figure><h5 id="示例：使用仅路径方式执行helloworld-sh脚本文件"><a href="#示例：使用仅路径方式执行helloworld-sh脚本文件" class="headerlink" title="示例：使用仅路径方式执行helloworld.sh脚本文件"></a>示例：使用仅路径方式执行helloworld.sh脚本文件</h5><p>添加执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x helloworld.sh</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200401215308369.png" alt="image-20200401215308369"></p><p>相对路径执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./helloworld.sh</span><br></pre></td></tr></table></figure><p>相对路径执行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200401215354868.png" alt="image-20200401215354868"></p><p>绝对路径执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/helloworld.sh</span><br></pre></td></tr></table></figure><p>绝对路径执行效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200401215435317.png" alt="image-20200401215435317"></p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>1、shell脚本文件编写规范？</p><blockquote><p>​    文件的后缀名: 建议使用 <code>.sh</code>  扩展名</p><p>​    首行需要设置解析器类型  <code>#!/bin/bash</code></p><p>​    脚本文件中的注释</p><p>​        单行注释,  <code># 注释内容</code></p><p>​        多行注释   <code>:&lt;&lt;!</code></p><p>​                            <code># 注释内容</code></p><p>​                            <code>!</code></p></blockquote><p>2、执行shell脚本文件有哪3种方式，并说明他们的区别？</p><blockquote><p>sh执行脚本文件</p><p>bash执行脚本文件</p><p>仅路径执行脚本文件</p><p>区别:  前2种是解析器直接执行不需要可执行权限, 最后一种是脚本文件自己执行需要可执行权限</p></blockquote><h1 id="Shell脚本入门：多命令处理"><a href="#Shell脚本入门：多命令处理" class="headerlink" title="Shell脚本入门：多命令处理"></a>Shell脚本入门：多命令处理</h1><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><p>掌握shell脚本文件中执行多命令处理</p><h3 id="多命令处理介绍"><a href="#多命令处理介绍" class="headerlink" title="多命令处理介绍"></a>多命令处理介绍</h3><p>就是在Shell脚本文件中编写多个Shell命令</p><h3 id="案例需求"><a href="#案例需求" class="headerlink" title="案例需求"></a>案例需求</h3><p>已知目录/root/itheima目录，执行batch.sh脚本，实现在/root/itheima/目录下创建一个one.txt,在one.txt文件中增加内容“Hello Shell”。</p><h3 id="步骤分析"><a href="#步骤分析" class="headerlink" title="步骤分析"></a>步骤分析</h3><ol><li><p>使用mkdir创建/root/itheima目录</p></li><li><p>创建脚本文件batch.sh</p></li><li><p>编辑脚本文件</p><p>3.1 命令1: touch创建文件, 文件名 <code>/root/itheima/one.txt</code></p><p>3.2 命令2: 输出数据”Hello Shell”到one.txt文件中</p><blockquote><p>输出数据到文件中的命令:</p><p><code>数据 &gt;&gt; 文件</code></p></blockquote></li><li><p>执行脚本文件</p></li></ol><h3 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>1、进入root目录，执行创建/root/itheima目录命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/itheima</span><br></pre></td></tr></table></figure><p>2、创建/root/batch.sh文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch batch.sh</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200402205353802.png" alt="image-20200402205353802"></p><p>2、编辑batch.sh文件，编写shell命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim batch.sh</span><br></pre></td></tr></table></figure><p>3、编写命令</p><p>命令1：创建/root/itheima/one.txt文件</p><p>命令2：输出“I love Shell”字符串数据到one.txt文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">cd itheima     # 切换到itheima目录</span><br><span class="line">touch one.txt  # 创建文件one.txt</span><br><span class="line">echo &quot;Hello Shell&quot;&gt;&gt;/root/itheima/one.txt  #输出数据到one.txt文件中</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200402221001946.png" alt="image-20200402221001946"></p><h3 id="运行脚本效果"><a href="#运行脚本效果" class="headerlink" title="运行脚本效果"></a>运行脚本效果</h3><p>运行batch.sh脚本文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh batch.sh</span><br></pre></td></tr></table></figure><p>查看one.txt文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat itheima/one.txt</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200402221123997.png" alt="image-20200402221123997"></p><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>shell脚本文件中是否可以执行多命令处理？</p><p>可以</p><h1 id="Shell变量：环境变量"><a href="#Shell变量：环境变量" class="headerlink" title="Shell变量：环境变量"></a>Shell变量：环境变量</h1><h2 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h2><p>1、理解什么是系统环境变量？</p><p>2、掌握常用的系统环境变量都有哪些？</p><h2 id="Shell变量的介绍"><a href="#Shell变量的介绍" class="headerlink" title="Shell变量的介绍"></a>Shell变量的介绍</h2><p>变量用于存储管理临时的数据,    这些数据都是在运行内存中的.</p><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><ol><li>系统环境变量</li><li>自定义变量</li><li>特殊符号变量</li></ol><h2 id="系统环境变量"><a href="#系统环境变量" class="headerlink" title="系统环境变量"></a>系统环境变量</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>是系统提供的共享变量.是linux系统加载Shell的配置文件中定义的变量共享给所有的Shell程序使用</p><h3 id="Shell的配置文件分类"><a href="#Shell的配置文件分类" class="headerlink" title="Shell的配置文件分类"></a>Shell的配置文件分类</h3><p>1.全局配置文件<br>/etc/profile<br>/etc/profile.d/*.sh<br>/etc/bashrc</p><p>2.个人配置文件<br>当前用户/.bash_profile<br>当前用户/.bashrc</p><p>一般情况下，我们都是直接针对全局配置进行操作。</p><h3 id="环境变量分类"><a href="#环境变量分类" class="headerlink" title="环境变量分类"></a>环境变量分类</h3><p>在Linux系统中，环境变量按照其作用范围不同大致可以分为系统级环境变量和用户级环境变量。</p><p>系统级环境变量：Shell环境加载全局配置文件中的变量共享给所有用户所有Shell程序使用, 全局共享<br>用户级环境变量：Shell环境加载个人配置文件中的变量共享给当前用户的Shell程序使用, 登录用户使用</p><h3 id="查看当前Shell系统环境变量"><a href="#查看当前Shell系统环境变量" class="headerlink" title="查看当前Shell系统环境变量"></a>查看当前Shell系统环境变量</h3><p>查看命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env</span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200405222654722.png" alt="image-20200405222654722"></p><h3 id="查看Shell变量-系统环境变量-自定义变量-函数"><a href="#查看Shell变量-系统环境变量-自定义变量-函数" class="headerlink" title="查看Shell变量(系统环境变量+自定义变量+函数)"></a>查看Shell变量(系统环境变量+自定义变量+函数)</h3><p>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set</span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610154848860.png" alt="image-20200610154848860"></p><h3 id="常用系统环境变量"><a href="#常用系统环境变量" class="headerlink" title="常用系统环境变量"></a>常用系统环境变量</h3><table><thead><tr><th>变量名称</th><th>含义</th></tr></thead><tbody><tr><td>==PATH==</td><td>与windows环境变量PATH功能一样，设置命令的搜索路径，以冒号为分割</td></tr><tr><td>HOME</td><td>当前用户主目录：/root</td></tr><tr><td>SHELL</td><td>当前shell解析器类型：/bin/bash</td></tr><tr><td>==HISTFILE==</td><td>显示当前用户执行命令的历史列表文件：/root/.bash_history</td></tr><tr><td>PWD</td><td>显示当前所在路径：/root</td></tr><tr><td>OLDPWD</td><td>显示之前的路径</td></tr><tr><td>HOSTNAME</td><td>显示当前主机名：itheima</td></tr><tr><td>HOSTTYPE</td><td>显示主机的架构，是i386、i686、还是x86、x64等：x86_64</td></tr><tr><td>==LANG==</td><td>设置当前系统语言环境：zh_CN.UTF-8</td></tr></tbody></table><h3 id="环境变量输出演示"><a href="#环境变量输出演示" class="headerlink" title="环境变量输出演示"></a>环境变量输出演示</h3><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608093116302.png" alt="image-20200608093116302"></p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608094455008.png" alt="image-20200608094455008"></p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608094638283.png" alt="image-20200608094638283"></p><h2 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h2><p>1.系统环境变量是什么?</p><blockquote><p>是系统提供的环境变量, 通过加载Shell配置文件中变量数据共享给Shell程序使用</p></blockquote><p>2.环境变量的分类?</p><blockquote><p>系统级环境变量,  Shell环境加载全局配置文件中定义的变量</p><p>用户级环境变量,  Shell环境加载个人配置文件中定义的变量</p></blockquote><p>3.env与set区别</p><blockquote><p>env用于查看系统环境变量</p><p>set用于查看系统环境变量+自定义变量+函数</p></blockquote><p>4.常用环境变量</p><table><thead><tr><th>变量名称</th><th>含义</th></tr></thead><tbody><tr><td>PATH</td><td>命令搜索的目录路径, 与windows的环境变量PATH功能一样</td></tr><tr><td>LANG</td><td>查询系统的字符集</td></tr><tr><td>HISTFILE</td><td>查询当前用户执行命令的历史列表</td></tr></tbody></table><h1 id="Shell变量：自定义变量"><a href="#Shell变量：自定义变量" class="headerlink" title="Shell变量：自定义变量"></a>Shell变量：自定义变量</h1><h2 id="目标-3"><a href="#目标-3" class="headerlink" title="目标"></a>目标</h2><p>理解自定义变量的分类</p><p>能够自定义变量进行增\删\改\查</p><h2 id="自定义变量介绍"><a href="#自定义变量介绍" class="headerlink" title="自定义变量介绍"></a>自定义变量介绍</h2><p>就是自己定义的变量</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol><li>自定义局部变量</li><li>自定义常量</li><li>自定义全局变量</li></ol><h2 id="自定义局部变量"><a href="#自定义局部变量" class="headerlink" title="自定义局部变量"></a>自定义局部变量</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>就是定义在一个脚本文件中的变量, 只能在这个脚本文件中使用的变量, 就是局部变量</p><h3 id="定义与使用"><a href="#定义与使用" class="headerlink" title="定义与使用"></a>定义与使用</h3><p>定义语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_name=value</span><br></pre></td></tr></table></figure><p>变量定义规则</p><ol><li>变量名称可以有字母,数字和下划线组成, 但是不能以数字开头</li><li>等号两侧不能有空格</li><li>在bash环境中, 变量的默认类型都是字符串类型, 无法直接进行数值运算</li><li>变量的值如果有空格, 必须使用双引号括起来</li><li>不能使用Shell的关键字作为变量名称</li></ol><p>演示</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608170754770.png" alt="image-20200608170754770"></p><p>查询变量值语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 语法1: 直接使用变量名查询</span></span><br><span class="line"><span class="meta">$</span><span class="bash">var_name</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 语法2: 使用花括号</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;var_name&#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 区别: 花括号方式适合拼接字符串</span></span><br></pre></td></tr></table></figure><p>演示</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608170830515.png" alt="image-20200608170830515"></p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608170854466.png" alt="image-20200608170854466"></p><p>注意: 如果<code>&quot;My name is $&#123;var2&#125;Style&quot;</code> 中 <code>$var2</code> 不带花括号, 系统会认为获取<code>$var2Style</code> 变量数据, 这个变量不存在就获取不到数据,执行效果如下</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608170953503.png" alt="image-20200608170953503"></p><p>结论:  推荐大家使用花括号才是编程好习惯</p><h3 id="变量删除"><a href="#变量删除" class="headerlink" title="变量删除"></a>变量删除</h3><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset var_name</span><br></pre></td></tr></table></figure><p>演示</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608182219303.png" alt="image-20200608182219303"></p><h2 id="自定义常量"><a href="#自定义常量" class="headerlink" title="自定义常量"></a>自定义常量</h2><p>介绍</p><blockquote><p>就是变量设置值以后不可以修改的变量叫常量, 也叫只读变量</p></blockquote><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readonly var_name</span><br></pre></td></tr></table></figure><p>演示</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608193930236.png" alt="image-20200608193930236"></p><h2 id="自定义全局变量"><a href="#自定义全局变量" class="headerlink" title="自定义全局变量"></a>自定义全局变量</h2><h3 id="父子Shell环境介绍"><a href="#父子Shell环境介绍" class="headerlink" title="父子Shell环境介绍"></a>父子Shell环境介绍</h3><p>例如:  有2个Shell脚本文件 A.sh 和 B.sh</p><p>如果 在A.sh脚本文件中执行了B.sh脚本文件, 那么A.sh就是父Shell环境, B.sh就是子Shell环境</p><h3 id="自定义全局变量介绍"><a href="#自定义全局变量介绍" class="headerlink" title="自定义全局变量介绍"></a>自定义全局变量介绍</h3><blockquote><p>就是在当前脚本文件中定义全局变量, 这个全局变量可以在当前Shell环境与子Shell环境中都可以使用</p></blockquote><h3 id="自定义全局变量语法"><a href="#自定义全局变量语法" class="headerlink" title="自定义全局变量语法"></a>自定义全局变量语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export var_name1 var_name2</span><br></pre></td></tr></table></figure><h3 id="案例需求-1"><a href="#案例需求-1" class="headerlink" title="案例需求"></a>案例需求</h3><p>测试全局变量在子Shell中是否可用,  在父Shell中是否可用</p><h3 id="案例实现步骤"><a href="#案例实现步骤" class="headerlink" title="案例实现步骤"></a>案例实现步骤</h3><ol><li><p>创建2个脚本文件 demo2.sh 和 demo3.sh</p></li><li><p>编辑demo2.sh </p><p>命令1:定义全局变量VAR4</p><p>命令2: 执行demo3.sh脚本文件</p></li><li><p>编辑demo3.sh</p><p>输出全局变量VAR4</p></li><li><p>执行demo2.sh脚本文件</p></li></ol><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><ol><li><p>创建demo2.sh和demo3.sh文件</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608223429822.png" alt="image-20200608223429822"></p></li><li><p>编辑demo2.sh, 里面定义变量VAR4并设置为全局, 并里面执行demo3.sh脚本文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim demo2.sh</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608224144481.png" alt="image-20200608224144481"></p></li><li><p>编辑demo3.sh,  里面打印VAR4</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim demo3.sh</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608224326159.png" alt="image-20200608224326159"></p></li><li><p>执行脚本文件demo2.sh,  观察打印VAR4效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608224400106.png" alt="image-20200608224400106"></p></li><li><p>执行脚本文件后, 在交互式Shell环境打印VAR4,  观察打印VAR4效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608224459074.png" alt="image-20200608224459074"></p></li></ol><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>全局变量在当前Shell环境与子Shell环境中可用, 父Shell环境中不可用</p><h2 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h2><p>自定义变量的分类</p><blockquote><p>自定义局部变量:  就是在一个脚本文件内部使用 <code>var_name=value</code></p><p>自定义常量: 不可以修改值的变量, <code>readonly var_name</code></p><p>自定义全局变量:  设置变量在当前脚本文件中与子Shell环境可以使用的变量, <code>export var_name</code></p></blockquote><p>自定义变量进行增\删\改\查</p><blockquote><p>定义和修改: <code>var_name=value</code></p><p>查询:<code>$&#123;var_name&#125; 或 $var_name</code></p><p>删除: <code>unset var_name</code></p></blockquote><h1 id="Shell变量：特殊变量"><a href="#Shell变量：特殊变量" class="headerlink" title="Shell变量：特殊变量"></a>Shell变量：特殊变量</h1><h2 id="目标-4"><a href="#目标-4" class="headerlink" title="目标"></a>目标</h2><p>能够说出常用的特殊变量有哪些</p><h2 id="特殊变量：-n"><a href="#特殊变量：-n" class="headerlink" title="特殊变量：$n"></a>特殊变量：$n</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">n</span></span><br></pre></td></tr></table></figure><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用于接收脚本文件执行时传入的参数</span><br><span class="line"><span class="meta">$</span><span class="bash">0 用于获取当前脚本文件名称的</span></span><br><span class="line"><span class="meta">$</span><span class="bash">1~<span class="variable">$9</span>, 代表获取第一输入参数到第9个输入参数</span></span><br><span class="line">第10个以上的输入参数获取参数的格式: $&#123;数字&#125;, 否则无法获取</span><br></pre></td></tr></table></figure><h3 id="执行脚本文件传入参数语法"><a href="#执行脚本文件传入参数语法" class="headerlink" title="执行脚本文件传入参数语法"></a>执行脚本文件传入参数语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh 脚本文件 输入参数1 输入参数2 ...</span><br></pre></td></tr></table></figure><h3 id="案例需求-2"><a href="#案例需求-2" class="headerlink" title="案例需求"></a>案例需求</h3><p>创建脚本文件demo4.sh文件, 并在脚本文件内部执行打印脚本文件名字, 第一个输入参数, 第二个输入参数</p><h3 id="实现步骤-2"><a href="#实现步骤-2" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p>创建脚本文件demo4.sh</p></li><li><p>编辑demo4.sh的文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令1: 打印当前脚本文件名字</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令2: 打印第1个输入参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令3: 打印第2个输入参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令4: 打印第10个输入参数</span></span><br></pre></td></tr></table></figure></li><li><p>执行脚本文件demo4.sh</p></li></ol><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><ol><li><p>创建demo4.sh文件</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610092956575.png" alt="image-20200610092956575"></p></li><li><p>编辑demo4.sh文件, 输出脚本文件名称\第一个输入参数\第二个输入参数</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610093208439.png" alt="image-20200610093208439"></p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610093227100.png" alt="image-20200610093227100"></p></li><li><p>执行demo4.sh文件,输入输出参数itcast  itheima的2个输入参数, 观察效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610093253173.png" alt="image-20200610093253173"></p></li></ol><h2 id="特殊变量："><a href="#特殊变量：" class="headerlink" title="特殊变量：$#"></a>特殊变量：$#</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"><span class="comment">#</span></span></span><br></pre></td></tr></table></figure><h3 id="含义-1"><a href="#含义-1" class="headerlink" title="含义"></a>含义</h3><p>获取所有输入参数的个数</p><h3 id="案例需求-3"><a href="#案例需求-3" class="headerlink" title="案例需求"></a>案例需求</h3><p>在demo4.sh中输出输入参数个数</p><h3 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h3><p>编辑demo4.sh, 输出输入参数个数</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610093208439.png" alt="image-20200610093208439"></p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610094814031.png" alt="image-20200610094814031"></p><p>执行demo4.sh传入参数itcast, itheima, 播仔 看效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610094657175.png" alt="image-20200610094657175"></p><h2 id="特殊变量：-、"><a href="#特殊变量：-、" class="headerlink" title="特殊变量：$*、$@"></a>特殊变量：<code>$*</code>、<code>$@</code></h2><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">*</span></span><br><span class="line"><span class="meta">$</span><span class="bash">@</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 含义都是获取所有输入参数, 用于以后输出所有参数</span></span><br></pre></td></tr></table></figure><p><code>$*</code>与<code>$@</code>区别</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.不使用双引号括起来, 功能一样</span><br><span class="line"><span class="meta">  $</span><span class="bash">*和<span class="variable">$@</span>获取所有输入参数,格式为: <span class="variable">$1</span> <span class="variable">$2</span> ... <span class="variable">$n</span></span></span><br><span class="line">2.使用双引号括起来</span><br><span class="line">  &quot;$*&quot;获取的所有参数拼接为一个字符串, 格式为: &quot;$1 $2 ... $n&quot;</span><br><span class="line">  &quot;$@&quot;获取一组参数列表对象, 格式为: &quot;$1&quot; &quot;$2&quot; ... &quot;$n&quot;</span><br><span class="line">  使用循环打印所有输入参数可以看出区别</span><br></pre></td></tr></table></figure><p>循环语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for var in 列表变量</span><br><span class="line">do# 循环开始</span><br><span class="line">   命令  # 循环体</span><br><span class="line">done    # 循环结束</span><br></pre></td></tr></table></figure><h3 id="案例需求-4"><a href="#案例需求-4" class="headerlink" title="案例需求"></a>案例需求</h3><p>在demo4.sh中循环打印输出所有输入参数, 体验<code>$*</code>与<code>$@</code>的区别</p><h3 id="实现步骤-3"><a href="#实现步骤-3" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>编辑demo4.sh脚本文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 增加命令: 实现直接输出所有输入后参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加命令: 使用循环打印输出所有输入参数</span></span><br></pre></td></tr></table></figure><h3 id="演示-2"><a href="#演示-2" class="headerlink" title="演示"></a>演示</h3><ol><li><p>编辑demo4.sh文件</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610093208439.png" alt="image-20200610093208439"></p></li><li><p>直接输出所有输入参数, 与循环方式输出所有输入参数(使用双引号包含 <code>$*</code> 与 <code>$@</code>  )</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令1: 打印当前脚本文件名字</span></span><br><span class="line">echo &quot;当前脚本文件名称:$0&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令2: 打印第1个输入参数</span></span><br><span class="line">echo &quot;第一个输入参数:$1&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令3: 打印第2个输入参数</span></span><br><span class="line">echo &quot;第二个输入参数:$2&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令4: 打印第10个输入参数</span></span><br><span class="line">echo &quot;第十个输入参数不带花括号获取:$10&quot;</span><br><span class="line">echo &quot;第十个输入参数带花括号获取:$&#123;10&#125;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令5 打印所有输入参数的个数</span></span><br><span class="line">echo &quot;所有输入参数个数:$&#123;#&#125;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加命令: 实现直接输出所有输入后参数</span></span><br><span class="line">echo &#x27;使用$*直接输出:&#x27;$*</span><br><span class="line">echo &#x27;使用$@直接输出:&#x27;$@</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加命令: 使用循环打印输出所有输入参数</span></span><br><span class="line">echo &#x27;循环遍历输出$*所有参数&#x27;</span><br><span class="line">for item in &quot;$*&quot;</span><br><span class="line">do</span><br><span class="line">   echo $item</span><br><span class="line">done</span><br><span class="line">echo &#x27;循环遍历输出$@所有参数&#x27;</span><br><span class="line">for item in &quot;$@&quot;</span><br><span class="line">do</span><br><span class="line">   echo $item</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>运行观察区别</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200707090439984.png" alt="image-20200707090439984"></p></li></ol><h2 id="特殊变量：-？"><a href="#特殊变量：-？" class="headerlink" title="特殊变量：$？"></a>特殊变量：$？</h2><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">?</span></span><br></pre></td></tr></table></figure><h3 id="含义-2"><a href="#含义-2" class="headerlink" title="含义"></a>含义</h3><p>用于获取上一个Shell命令的退出状态码, 或者是函数的返回值</p><blockquote><p>每个Shell命令的执行都有一个返回值, 这个返回值用于说明命令执行是否成功</p><p>一般来说, 返回0代表命令执行成功, 非0代表执行失败</p></blockquote><h3 id="演示-3"><a href="#演示-3" class="headerlink" title="演示"></a>演示</h3><p>输入一个正确命令, 再输出<code>$?</code></p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610114421826.png" alt="image-20200610114421826"></p><p>输入一个错误命令, 在输出<code>$?</code></p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610114445468.png" alt="image-20200610114445468"></p><h2 id="特殊变量：-1"><a href="#特殊变量：-1" class="headerlink" title="特殊变量：$$"></a>特殊变量：$$</h2><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">$</span></span><br></pre></td></tr></table></figure><h3 id="含义-3"><a href="#含义-3" class="headerlink" title="含义"></a>含义</h3><p>用于获取当前Shell环境的进程ID号</p><h3 id="演示-4"><a href="#演示-4" class="headerlink" title="演示"></a>演示</h3><p>查看当前Shell环境进程编号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux|grep bash</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610114834462.png" alt="image-20200610114834462"></p><p>输出 $$  显示当前shell环境进程编号</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200610114956474.png" alt="image-20200610114956474"></p><h2 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h2><p>常用的特殊符号变量如下</p><table><thead><tr><th>特殊变量</th><th>含义</th></tr></thead><tbody><tr><td><code>$n</code></td><td>获取输入参数的<br><code>$0</code>,  获取当前Shell脚本文件名字<br><code>$1~$9</code>, 获取第一个输入参数到第九个输入参数<br><code>$&#123;10&#125;</code>  获取10和10以上的参数需要使用花括号</td></tr><tr><td><code>$#</code></td><td>获取所有输入参数的个数</td></tr><tr><td><code>$*</code> 与 <code>$@</code></td><td>获取所有输入参数数据<br>区别: 如果不使用双引号, 功能一样, <br>获取所有参数数据为一个字符串, 如果使用了双引号, <br><code>$@</code>获取的就是参数列表对象, 每个参数都是一个独立字符串,</td></tr><tr><td><code>$?</code></td><td>获取上一个命令的退出状态码, 一般;来说0代表命令成功, 非0代表执行失败</td></tr><tr><td><code>$$</code></td><td>获取当前shell环境进程的ID号</td></tr></tbody></table><h1 id="Shell环境变量深入：自定义系统环境变量"><a href="#Shell环境变量深入：自定义系统环境变量" class="headerlink" title="Shell环境变量深入：自定义系统环境变量"></a>Shell环境变量深入：自定义系统环境变量</h1><h2 id="目标-5"><a href="#目标-5" class="headerlink" title="目标"></a>目标</h2><p>能够自定义系统级环境变量</p><h2 id="全局配置文件-etc-profile应用场景"><a href="#全局配置文件-etc-profile应用场景" class="headerlink" title="全局配置文件/etc/profile应用场景"></a>全局配置文件/etc/profile应用场景</h2><p>当前用户进入Shell环境初始化的时候会加载全局配置文件/etc/profile里面的环境变量, 供给所有Shell程序使用</p><p>以后只要是所有Shell程序或命令使用的变量, 就可以定义在这个文件中</p><h2 id="案例演示-1"><a href="#案例演示-1" class="headerlink" title="案例演示"></a>案例演示</h2><h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><p>/etc/profile定义存储自定义系统级环境变量数据</p><h3 id="创建环境变量步骤"><a href="#创建环境变量步骤" class="headerlink" title="创建环境变量步骤"></a>创建环境变量步骤</h3><ol><li><p>编辑/etc/profile全局配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 增加命令: 定义变量VAR1=VAR1 并导出为环境变量</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 扩展: vim里面的命令模式使用G快速定位到文件末尾位置, 使用gg定位到文件首行位置</span></span><br></pre></td></tr></table></figure></li><li><p>重载配置文件/etc/profile, 因为配置文件修改后要立刻加载里面的数据就需要重载, 语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>在Shell环境中读取系统级环境变量VAR1</p></li></ol><h3 id="创建环境变量演示"><a href="#创建环境变量演示" class="headerlink" title="创建环境变量演示"></a>创建环境变量演示</h3><p>编辑/etc/profile文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加设置变量VAR1=VAR1并导出成为环境变量, 在/etc/profile文件末尾添加如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建环境变量</span></span><br><span class="line">VAR1=VAR1</span><br><span class="line">export VAR1</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200409124318865.png" alt="image-20200409124318865"></p><p>3、保存/etc/profile退出</p><p>4、重新加载/etc/profile文件数据更新系统环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果这一步不执行，无法读取更新的环境变量</p></blockquote><p>3、输出环境变量VAR1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $VAR1</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200409124934898.png" alt="image-20200409124934898"></p><h2 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h2><p>如何自定义系统级环境变量</p><blockquote><ol><li>系统级全局配置文件: /etc/profile</li><li>设置环境变量: <code>export var_name=value</code>,  注意环境变量建议变量名全部大写</li><li>修改了/etc/profile文件后, 要立刻加载修改的数据需要重载配置文件: <code>source /etc/profile</code></li></ol></blockquote><h1 id="Shell环境变量深入：加载流程原理介绍"><a href="#Shell环境变量深入：加载流程原理介绍" class="headerlink" title="Shell环境变量深入：加载流程原理介绍"></a>Shell环境变量深入：加载流程原理介绍</h1><h2 id="目标-6"><a href="#目标-6" class="headerlink" title="目标"></a>目标</h2><ol><li>能够说出交互式Shell与非交互式Shell</li><li>能够说出登录Shell与非登录Shell环境</li></ol><h2 id="Shell工作环境介绍"><a href="#Shell工作环境介绍" class="headerlink" title="Shell工作环境介绍"></a>Shell工作环境介绍</h2><p>用户进入linux系统就会初始化Shell环境, 这个环境会加载全局配置文件和用户个人配置文件中环境变量.每个脚本文件都有自己的Shell环境</p><h2 id="shell工作环境分类"><a href="#shell工作环境分类" class="headerlink" title="shell工作环境分类"></a>shell工作环境分类</h2><h3 id="交互式与非交互式shell"><a href="#交互式与非交互式shell" class="headerlink" title="交互式与非交互式shell"></a>交互式与非交互式shell</h3><p>交互式Shell</p><blockquote><p>与用户进行交互, 互动. 效果就是用户输入一个命令, Shell环境立刻反馈响应.</p></blockquote><p>非交互式Shell</p><blockquote><p>不需要用户参与就可以执行多个命令. 比如一个脚本文件含有多个命令,直接执行并给出结果</p></blockquote><h3 id="登录Shell与非登录Shell环境"><a href="#登录Shell与非登录Shell环境" class="headerlink" title="登录Shell与非登录Shell环境"></a>登录Shell与非登录Shell环境</h3><table><thead><tr><th>类型名称</th><th>含义</th></tr></thead><tbody><tr><td>shell登录环境</td><td>需要用户名\密码登录的Shell环境</td></tr><tr><td>shell非登录环境</td><td>不需要用户名,密码进入的Shell环境 或 执行脚本文件</td></tr></tbody></table><blockquote><p>注意：不同的工作环境加载环境变量流程不一样</p></blockquote><h2 id="环境变量初始化流程"><a href="#环境变量初始化流程" class="headerlink" title="环境变量初始化流程"></a>环境变量初始化流程</h2><p>1.全局配置文件<br>/etc/profile<br>/etc/profile.d/*.sh<br>/etc/bashrc</p><p>2.个人配置文件<br>当前用户/.bash_profile<br>当前用户/.bashrc</p><p>环境变量加载初始化过程</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200707120357693.png" alt="image-20200707120357693"></p><h2 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h2><ol><li><p>能够说出交互式Shell与非交互式Shell</p><blockquote><p>交互式Shell:  就是需要用户参与互动的Shell环境, 效果用户输入一个命令, 环境就立刻响应结果</p><p>非交互式Shell:  只执行命令, 不需要用户的参与</p></blockquote></li><li><p>能够说出登录Shell与非登录Shell环境</p><blockquote><p>登录Shell环境:  要以用户名与密码登录到系统默认采用登录Shell环境</p><p>非登录Shell环境: 不实用用户名与密码进入linux系统的Shell环境</p></blockquote></li></ol><h1 id="Shell环境变量深入：加载流程测试"><a href="#Shell环境变量深入：加载流程测试" class="headerlink" title="Shell环境变量深入：加载流程测试"></a>Shell环境变量深入：加载流程测试</h1><h2 id="目标-7"><a href="#目标-7" class="headerlink" title="目标"></a>目标</h2><p>理解Shell环境变量的加载流程测试</p><p>能够知道环境变量应该配置在哪里</p><h2 id="切换Shell环境执行脚本文件介绍"><a href="#切换Shell环境执行脚本文件介绍" class="headerlink" title="切换Shell环境执行脚本文件介绍"></a>切换Shell环境执行脚本文件介绍</h2><p>在执行一个脚本文件时可以指定具体Shell环境进行执行脚本文件, 这个就是切换Shell环境执行脚本</p><h2 id="Shell登录环境执行脚本文件语法"><a href="#Shell登录环境执行脚本文件语法" class="headerlink" title="Shell登录环境执行脚本文件语法"></a>Shell登录环境执行脚本文件语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh/bash -l/--login 脚本文件</span><br></pre></td></tr></table></figure><blockquote><p>含义: 先加载Shell登录环境流程初始化环境变量, 再执行脚本文件</p></blockquote><h2 id="Shell非登录环境变量执行脚本文件语法"><a href="#Shell非登录环境变量执行脚本文件语法" class="headerlink" title="Shell非登录环境变量执行脚本文件语法"></a>Shell非登录环境变量执行脚本文件语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash # 加载Shell非登录环境</span><br><span class="line">sh/bash 脚本文件 # 直接执行脚本文件</span><br></pre></td></tr></table></figure><blockquote><p>含义: 先执行加载Shell非登录环境流程初始化环境变量, 再执行脚本文件</p></blockquote><h2 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h2><h3 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h3><p>Shell登录环境会运行/etc/profile</p><p>Shell非登录环境会运行/.bashrc</p><p>在/etc/profile与/当前用户/.bashrc文件分别设置环境变量数据，然后在shell脚本文件中输出环境变量数据，最后切换不同环境执行shell脚本文件观察验证上面的流程运行</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li><p>清理工作, 清理/etc/profile文件中VAR1环境变量进行删除, 并且重载这个配置文件</p></li><li><p>编辑/etc/profile, 增加环境变量VAR1=VAR1</p></li><li><p>编辑/root/.bashrc, 增加环境变量VAR2=VAR2</p></li><li><p>创建demo1.sh文件, 读取环境变量数据进行打印</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 输出环境变量VAR1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出环境变量VAR2</span></span><br></pre></td></tr></table></figure></li><li><p>以Shell非登录环境执行demo1.sh脚本文件, 观察只会输出VAR2, 不会输出VAR1</p></li><li><p>以Shell登录环境执行demo1.sh脚本文件, 观察会输出VAR2和VAR1</p></li></ol><h3 id="演示-5"><a href="#演示-5" class="headerlink" title="演示"></a>演示</h3><p>编辑/etc/profile文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>编辑添加如下内容，保存退出</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608180928458.png" alt="image-20200608180928458"></p><p>在root目录下,编辑.bashrc文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .bashrc</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608180131769.png" alt="image-20200608180131769"></p><p>编辑添加如下最后2行内容，保存退出</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608181029028.png" alt="image-20200608181029028"></p><p>创建文件demo1.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch demo1.sh</span><br></pre></td></tr></table></figure><p>编辑文件demo1.sh，添加如下内容</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608180411557.png" alt="image-20200608180411557"></p><p>直接执行脚本文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash demo1.sh</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608180453317.png" alt="image-20200608180453317"></p><blockquote><p>直接执行脚本文件, 即没有加载登录Shell环境变量, 也没有加载非登录Shell环境变量</p></blockquote><p>先加载非登录Shell环境变量, 然后执行脚本文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">bash demo1.sh</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608181127345.png" alt="image-20200608181127345"></p><blockquote><p>Shell非登录环境会加载文件 <code>当前用户/.bashrc</code>  的环境变量数据</p><p>所以这里会输出VAR2的环境变量数据</p></blockquote><p>先加载登录Shell环境变量, 然后执行脚本文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -l demo1.sh</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200608181329353.png" alt="image-20200608181329353"></p><blockquote><p>Shell登录环境会加载文件 <code>etc/profile</code>和<code>当前用户/.bashrc</code>  的环境变量数据</p><p>所以这里会输出VAR1和VAR2的环境变量数据</p></blockquote><h2 id="小结-8"><a href="#小结-8" class="headerlink" title="小结"></a>小结</h2><p>1、Shell环境变量初始化加载原理过程</p><table><thead><tr><th>分类</th><th>初始化环境变量过程执行文件顺序</th></tr></thead><tbody><tr><td>shell登录环境初始化过程</td><td>/etc/profile–》/etc/profile.d/*.sh–》<del>/.bash_profile–》</del>/.bashrc–》/etc/bashrc</td></tr><tr><td>shell非登录环境初始化过程</td><td>~/.bashrc–》/etc/bashrc–》/etc/profile.d/*.sh</td></tr></tbody></table><p>2、那么以到底将环境变量定义到哪里呢？/etc/profile与/etc/bashrc的区别？</p><p>需要登录的执行的shell脚本读取的环境变量配置在：/etc/profile、/当前用户/.bash_profile</p><p>不需要登录的用户执行的shell脚本读取的环境变量配置在：/当前用户/.bashrc、/etc/bashrc</p><h1 id="Shell环境变量深入：识别Shell环境类型"><a href="#Shell环境变量深入：识别Shell环境类型" class="headerlink" title="Shell环境变量深入：识别Shell环境类型"></a>Shell环境变量深入：识别Shell环境类型</h1><h2 id="目标-8"><a href="#目标-8" class="headerlink" title="目标"></a>目标</h2><p>理解如何识别shell登录环境与非登录环境</p><h2 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h2><p>使用$0识别环境语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $0</span><br></pre></td></tr></table></figure><blockquote><p>输出 <code>-bash</code> 代表：shell登录环境</p><p>输出 <code>bash</code> 代表：  shell非登录环境</p><p>注意：这个 <code>$0</code> 环境变量如果用在子shell中(shell脚本文件)输出Shell脚本本身的文件名 </p></blockquote><p>bash命令语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br></pre></td></tr></table></figure><blockquote><p>bash命令：用于切换为Shell非登录环境</p></blockquote><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>1、直接登录系统为shell登录环境输出 $0 观察输出信息效果</p><p>2、使用 bash 命令切换为shell非登录环境输出 $0 观察输出信息效果</p><p>3、创建test.sh脚本文件，编辑添加输出 $0 ,编程保存完成后执行test.sh脚本文件观察输出信息效果</p><h3 id="演示-6"><a href="#演示-6" class="headerlink" title="演示"></a>演示</h3><p>直接登录linux系统使用如下命令效果</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200408201336071.png" alt="image-20200408201336071"></p><blockquote><p>bash命令将当前环境转换为Shell非登录环境</p></blockquote><h2 id="小结-9"><a href="#小结-9" class="headerlink" title="小结"></a>小结</h2><p>1、如何识别shell登录环境与非登录环境？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">0 用于获取当前Shell环境的类型,  bash代表Shell非登录环境, -bash 代表Shell登录环境</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$0</span>不可以在脚本文件中使用, 因为代表获取脚本文件名字</span></span><br></pre></td></tr></table></figure><h1 id="Shell环境变量深入：详细切换Shell环境"><a href="#Shell环境变量深入：详细切换Shell环境" class="headerlink" title="Shell环境变量深入：详细切换Shell环境"></a>Shell环境变量深入：详细切换Shell环境</h1><h2 id="目标-9"><a href="#目标-9" class="headerlink" title="目标"></a>目标</h2><p>理解切换shell环境的命令</p><h2 id="切换shell环境命令介绍"><a href="#切换shell环境命令介绍" class="headerlink" title="切换shell环境命令介绍"></a>切换shell环境命令介绍</h2><ol><li><p>直接登录加载shell登录环境</p></li><li><p>su切换用户加载Shell登录与Shell非登录环境</p></li><li><p>bash加载Shell登录与Shell非登录环境</p></li></ol><h2 id="切换Shell环境命令演示"><a href="#切换Shell环境命令演示" class="headerlink" title="切换Shell环境命令演示"></a>切换Shell环境命令演示</h2><h3 id="切换环境方式1：直接登录系统"><a href="#切换环境方式1：直接登录系统" class="headerlink" title="切换环境方式1：直接登录系统"></a>切换环境方式1：直接登录系统</h3><h5 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h5><p>直接在虚拟机上使用用户名与密码登录linux系统或使用客户端直接连接远程linux系统</p><h5 id="演示-7"><a href="#演示-7" class="headerlink" title="演示"></a>演示</h5><p>虚拟机本地直接登录演示</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200408235243772.png" alt="image-20200408235243772"></p><p>客户端远程采用SSH登录演示</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200408235629776.png" alt="image-20200408235629776"></p><h3 id="切换环境方式2：su切换用户登录"><a href="#切换环境方式2：su切换用户登录" class="headerlink" title="切换环境方式2：su切换用户登录"></a>切换环境方式2：su切换用户登录</h3><h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><p>语法1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su 用户名 --login </span><br><span class="line">或</span><br><span class="line">su 用户名 -l</span><br><span class="line"><span class="meta"> #</span><span class="bash"> 切换到指定用户, 加载Shell登录环境变量</span></span><br></pre></td></tr></table></figure><p>语法2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su 用户名  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到指定用户,  加Shell非登录环境变量</span></span><br></pre></td></tr></table></figure><h5 id="分析步骤"><a href="#分析步骤" class="headerlink" title="分析步骤"></a>分析步骤</h5><p>1、创建普通用户userA</p><p>2、切换到用户userA，使用-l加载Shell登录环境变量  ,  输出环境变量$0，观察输出-bash</p><p>4、使用exit退出userA</p><p>5、切换到用户userA，加载Shell非登录环境变量，输出环境变量$0，观察输出bash</p><h5 id="演示-8"><a href="#演示-8" class="headerlink" title="演示"></a>演示</h5><p>创建普通用户userA</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -m userA</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/image-20200409162546096.png" alt="image-20200409162546096"></p><p>以Shell登录环境执行切换到用户userA，输出环境变量$0，输出 -bash 说明当前为Shell登录环境</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200409162630366.png" alt="image-20200409162630366"></p><p>使用exit退出userA</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200409162938320.png" alt="image-20200409162938320"></p><p>以Shell非登录环境执行切换到用户userA，输出环境变量$0，输出 bash  说明当前为Shell非登录环境</p><p><img src="https://file.coderstudy.cn/image/Pic/image-20200409162957086.png" alt="image-20200409162957086"></p><h3 id="切换环境方式3：bash切换"><a href="#切换环境方式3：bash切换" class="headerlink" title="切换环境方式3：bash切换"></a>切换环境方式3：bash切换</h3><h5 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h5><p>语法1:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash  # 加载【Shell非登录环境】</span><br></pre></td></tr></table></figure><p>语法2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash -l  Shell脚本文件 /  bash --login shell脚本文件</span><br><span class="line">sh -l shell脚本文件 / sh --login shell脚本文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> 先加载【Shell登录环境】然后运行指定Shell脚本文件</span></span><br></pre></td></tr></table></figure><h5 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h5><p>使用bash执行test.sh脚本文件，发生错误说明当前环境为Shell非登录环境</p><h5 id="演示-9"><a href="#演示-9" class="headerlink" title="演示"></a>演示</h5><p><img src="https://file.coderstudy.cn/image/Pic/image-20200409165207091.png" alt="image-20200409165207091"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Shell脚本入门：介绍&quot;&gt;&lt;a href=&quot;#Shell脚本入门：介绍&quot; class=&quot;headerlink&quot; title=&quot;Shell脚本入门：介绍&quot;&gt;&lt;/a&gt;Shell脚本入门：介绍&lt;/h1&gt;&lt;h3 id=&quot;Shell介绍&quot;&gt;&lt;a href=&quot;#Shell介</summary>
      
    
    
    
    <category term="运维" scheme="http://liujun1997.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Linux Shell" scheme="http://liujun1997.github.io/tags/Linux-Shell/"/>
    
  </entry>
  
  <entry>
    <title>树莓派常用操作</title>
    <link href="http://liujun1997.github.io/2021/08/21/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://liujun1997.github.io/2021/08/21/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2021-08-21T07:39:55.000Z</published>
    <updated>2022-04-23T12:25:27.943Z</updated>
    
    <content type="html"><![CDATA[<h4 id="蓝牙常用命令"><a href="#蓝牙常用命令" class="headerlink" title="蓝牙常用命令"></a>蓝牙常用命令</h4><ul><li><p>查看蓝牙开启状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status bluetooth</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/VaUwX6.png"></p></li><li><p>进入蓝牙终端程序命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bluetoothctl</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/dYij6v.png"></p></li><li><p>扫描周围蓝牙设备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scan on</span><br></pre></td></tr></table></figure></li><li><p>匹配设备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pair xx:xx:xx:xx</span><br></pre></td></tr></table></figure></li><li><p>信任设备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trust xx:xx:xx:xx</span><br></pre></td></tr></table></figure></li><li><p>连接设备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect xx:xx:xx:xx</span><br></pre></td></tr></table></figure></li><li><p>常见问题</p><ol><li> 当匹配的时候出现 alreadyExist Error时，并且连接不上时，可以先移除设备再匹配</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">remove xx:xx:xx:xx //移除设备</span><br><span class="line">pair xx:xx:xx:xx</span><br><span class="line">trust xx:xx:xx:xx</span><br><span class="line">connect ....</span><br></pre></td></tr></table></figure></li></ul><h4 id="Wifi常用命令"><a href="#Wifi常用命令" class="headerlink" title="Wifi常用命令"></a>Wifi常用命令</h4><ul><li>当我们没有图形化界面去配置wifi设置时，就只能通过命令行设置wifi</li></ul><ol><li><p>可以使用命令先扫描周围的Wi-Fi名 <code>iwlist wlan0 scan</code> 编辑系统wifi配置文件，<code>vim /etc/wpa_supplicant/wpa_supplicant.conf </code> 在最后一行写入wifi的SSID信息和密码，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@raspberrypi:vim /etc/wpa_supplicant/wpa_supplicant.conf </span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">ssid=&quot;WiFi-A&quot; //Wi-Fi名</span><br><span class="line">psk=&quot;12345678&quot; //密码</span><br><span class="line">key_mgmt=WPA-PSK  //密码认证方式</span><br><span class="line">priority=1  //数值越大，优先级越高</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启wifi配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@raspberrypi:wpa_cli -i wlan0 reconfigure //重新配置wifi </span><br><span class="line">root@raspberrypi:wpa_cli -i wlan0 reconnect // 重新连接wifi</span><br></pre></td></tr></table></figure></li><li><p>查看是否连接上wifi</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@raspberrypi:ifconfg wlan0 //查看无线网卡是否有下图ip</span><br></pre></td></tr></table></figure><p><img src="https://file.coderstudy.cn/image/Pic/VHtGP6.png"></p></li><li><p>有时候也需要给树莓派设置固定ip, 编辑<code>/etc/dhcpcd .conf</code>，写入下面配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Example static IP configuration:</span> </span><br><span class="line">interface wlan0 # 表示给某个接口 eth0代表有线网卡，wlan代表无线</span><br><span class="line">static ip_address=192.168.10.105/24 # ipv4固定ip</span><br><span class="line">static ip6_address=fd51:42f8:caae:d92e::ff/64 # ipv6固定ip</span><br><span class="line">static routers=192.168.10.1 # 路由地址</span><br><span class="line">static domain_name_servers=192.168.10.1 8.8.8.8 fd51:42f8:caae:d92e::1 # DNS服务器</span><br></pre></td></tr></table></figure></li></ol><h4 id="树莓派挂载磁盘命令"><a href="#树莓派挂载磁盘命令" class="headerlink" title="树莓派挂载磁盘命令"></a>树莓派挂载磁盘命令</h4><ul><li><p>首先将u盘插入树莓派usb接口，然后使用命令 <code>fdisk -l</code>查看系统是否已经识别</p><p><img src="https://file.coderstudy.cn/image/Pic/uV7Y7H.png"></p></li><li><p>我这里是mac的hdf文件类型移动硬盘，如果挂载后是不可写，需要下载软件挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install hfsplus hfsutils hfsprogs</span><br></pre></td></tr></table></figure></li><li><p>挂载hfs分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /tm</span><br><span class="line">sudo chown -R nobody:nogroup /tm</span><br><span class="line">sudo mount -t hfsplus -o force,rw /dev/sda2 /tm</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果想卸载，可以采用此命令</span> </span><br><span class="line">sudo umount -v /dev/sda2 </span><br></pre></td></tr></table></figure></li><li><p>挂载ntfs分区，树莓派不支持直接挂载ntfs文件系统的外置硬盘</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ntfs-3g ## 安装第三方驱动包</span><br></pre></td></tr></table></figure></li><li><p>挂载exfat分区,也需要安装额外的第三方驱动包，<code>相比于ntfs文件系统，实测exfat文件系统在树莓派上读写速度更快，查询资料是因为 ntfs-3g驱动效率太低，不太建议在linux系统上使用ntfs文件格式外置硬盘</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install exfat-fuse</span><br></pre></td></tr></table></figure></li><li><p>设置开机挂载, 需要编辑<code>/etc/fstab</code>文件，在最后一行添加一下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/sda2 /data hfsplus force,rw,auto 0 0</span><br></pre></td></tr></table></figure><p>如果想用树莓派做一个timemachine 可以参考一下blog</p><p><a href="https://jameszhan.github.io/2015/03/06/raspberry-time-capsule.html"></a></p></li><li><p>有时候需要测试磁盘的read write速度,需要用上下面两条命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这是我电脑上的挂载情况</span></span><br><span class="line">root@raspberrypi:~# lsblk</span><br><span class="line">NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda           8:0    0 465.8G  0 disk </span><br><span class="line">├─sda1        8:1    0   200M  0 part </span><br><span class="line">└─sda2        8:2    0 465.5G  0 part /data</span><br><span class="line">mmcblk0     179:0    0  14.9G  0 disk </span><br><span class="line">├─mmcblk0p1 179:1    0   256M  0 part /boot</span><br><span class="line">└─mmcblk0p2 179:2    0  14.6G  0 part /</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用dd测试移动磁盘的读取速度</span></span><br><span class="line">root@raspberrypi:~# dd if=/dev/zero of=/data/test.db bs=8k count=50000 conv=fdatasync</span><br><span class="line">记录了50000+0 的读入</span><br><span class="line">记录了50000+0 的写出</span><br><span class="line">409600000 bytes (410 MB, 391 MiB) copied, 4.07416 s, 101 MB/s</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试写入速度</span></span><br><span class="line">root@raspberrypi:~#  dd if=/dev/sda2 of=/dev/null bs=8k count=50000</span><br><span class="line">记录了50000+0 的读入</span><br><span class="line">记录了50000+0 的写出</span><br><span class="line">409600000 bytes (410 MB, 391 MiB) copied, 3.61052 s, 113 MB/s</span><br></pre></td></tr></table></figure></li></ul><h4 id="树莓派软件常用命令"><a href="#树莓派软件常用命令" class="headerlink" title="树莓派软件常用命令"></a>树莓派软件常用命令</h4><ul><li><p>更换软件源为国内的软件源 </p><p>编辑 <code>/etc/apt/suorces.list</code>文件，将里面的文字注释掉，添加以下文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@raspberrypi:~# cat /etc/apt/sources.list</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib</span><br></pre></td></tr></table></figure><p> 编辑<code>/etc/apt/sources.list.d</code>文件，更改为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@raspberrypi:/etc/apt/sources.list.d# cat raspi.list</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</span><br><span class="line"><span class="meta">#</span><span class="bash">deb https://archive.raspberrypi.org/debian/ buster main</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Uncomment line below <span class="keyword">then</span> <span class="string">&#x27;apt-get update&#x27;</span> to <span class="built_in">enable</span> <span class="string">&#x27;apt-get source&#x27;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> deb-src https://archive.raspberrypi.org/debian/ buster main</span></span><br></pre></td></tr></table></figure><p>然后在更新软件缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@raspberrypi:/etc/apt/sources.list.d# sudo apt-get update </span><br></pre></td></tr></table></figure></li></ul><h4 id="树莓派安装samba服务器，实现文件共享"><a href="#树莓派安装samba服务器，实现文件共享" class="headerlink" title="树莓派安装samba服务器，实现文件共享"></a>树莓派安装samba服务器，实现文件共享</h4><ul><li><p>第一步安装samba服务器 <code>sudo apt-get install samba -y</code></p></li><li><p>编辑配置文件 <code>sudo vim /etc/samba/smb.conf</code>，在文件末尾添加以下配置，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[pi]</span><br><span class="line">path = /media/data #文件目录路径</span><br><span class="line">writeable=Yes # 可写</span><br><span class="line">create mask=0777 #文件权限</span><br><span class="line">directory mask=0777 #目录权限</span><br><span class="line">public=no #不为公共</span><br></pre></td></tr></table></figure></li><li><p>优化传输读写速度 ,<code>sudo vim /etc/samba/smb.conf</code>,在 <code>global</code>节点添加以下配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   security=user ## 表示需要用户密码验证 如果为share则不需要</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span><span class="bash">increase speed</span></span><br><span class="line">   max connections = 5</span><br><span class="line">   socket options = TCP_NODELAY IPTOS_LOWDELAY SO_RCVBUF=65536 SO_SNDBUF=65536</span><br><span class="line">   read raw = yes</span><br><span class="line">   write raw = yes</span><br><span class="line"><span class="meta">#</span><span class="bash">此选项在新版本无效</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="built_in">read</span> size = 65536</span></span><br><span class="line">   write cache size = 262144</span><br><span class="line">   aio read size = 16384</span><br><span class="line">   aio write size = 16384</span><br><span class="line">   large readwrite = yes</span><br></pre></td></tr></table></figure></li><li><p>配置samba用户名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd #添加系统用户，不添加后面的操作会报错</span><br><span class="line">smbpasswd -a &lt;username&gt;  #按照提示输入用户名</span><br></pre></td></tr></table></figure></li><li><p>启动服务器 <code>systemctl start smbd</code></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;蓝牙常用命令&quot;&gt;&lt;a href=&quot;#蓝牙常用命令&quot; class=&quot;headerlink&quot; title=&quot;蓝牙常用命令&quot;&gt;&lt;/a&gt;蓝牙常用命令&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看蓝牙开启状态&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;</summary>
      
    
    
    
    <category term="树莓派" scheme="http://liujun1997.github.io/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
    <category term="树莓派 网络" scheme="http://liujun1997.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE-%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Linux自动删除日志</title>
    <link href="http://liujun1997.github.io/2021/08/17/Linux%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%E6%97%A5%E5%BF%97/"/>
    <id>http://liujun1997.github.io/2021/08/17/Linux%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%E6%97%A5%E5%BF%97/</id>
    <published>2021-08-17T03:28:46.000Z</published>
    <updated>2021-08-17T06:12:11.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><ul><li>最近定时任务调度平台的日志比较多，经过长期的日积月累，终于磁盘的空间终于爆了，业务系统也瘫痪了，所以需要定时无用的日志。</li></ul><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li>google后，发现有两种解决方法<ol><li>通过find 命令解决<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find $&#123;dirname&#125; -name &quot;*.log&quot; -mtime $&#123;day&#125; -exec rf -rf &#123;&#125; \; </span><br></pre></td></tr></table></figure></li><li>通过递归遍历文件夹的文件，比较文件的创建时间，进行删除</li></ol></li><li>比较发现还是第一种比较方便</li></ul><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><ul><li><p> 命令解析 find 对应目录 -mtime +天数 -name “文件名” -exec rm -rf {} ;</p></li><li><p>实际命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /etc/nginx/log -mtime +30 -name &#x27;*.log&#x27; -exec rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure></li><li><p>再优化一下</p><ul><li>新建脚本文件 vim autoDeleteLog.sh</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">findDir=&#x27;/etc/nginx/log&#x27;</span><br><span class="line">if [ -d &quot;$&#123;findDir&#125;&quot;]; then</span><br><span class="line"> echo start delete log file 30 day ago...</span><br><span class="line">find /etc/nginx/log -mtime +30 -name &#x27;*.log&#x27; -exec rm -rf &#123;&#125; \; </span><br><span class="line">echo delete log file end...</span><br><span class="line">else</span><br><span class="line"> echo $&#123;findDir&#125; not find...</span><br><span class="line">fi </span><br></pre></td></tr></table></figure><ul><li>给脚本加上权限 chmod +x autoDeleteLog.sh</li></ul></li><li><p>设置为定时任务执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">bin: crontab -e</span></span><br><span class="line">0 0 * * * /home/autoDeleteLog.sh</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">linux自动删除以前的日志</summary>
    
    
    
    <category term="运维" scheme="http://liujun1997.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Linux" scheme="http://liujun1997.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Cron表达式解析</title>
    <link href="http://liujun1997.github.io/2021/08/10/Cron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/"/>
    <id>http://liujun1997.github.io/2021/08/10/Cron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90/</id>
    <published>2021-08-10T07:30:42.000Z</published>
    <updated>2021-08-10T09:52:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Corn表达式解析"><a href="#Corn表达式解析" class="headerlink" title="Corn表达式解析"></a>Corn表达式解析</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul><li>cron是表示定时任务执行规律的一串字符串，通常由5/6个字符隔开，用6，7个域表示。每个域由以下几种字符组成<ul><li><code>*</code> 表示任意值都满足条件。</li><li><code>,</code>表示选定的几个值满足条件。秒域1,5，表示 在1秒和5秒之间触发</li><li><code>-</code>表示范围，秒域1,5表示 ，在1秒与5秒之间触发每一秒到触发</li><li><code>/</code>表示在某个时间起，每隔固定的时间执行一次，秒域0/5表示从0秒开始，每隔5秒触发，5，10，15秒都会触发。秒域*/5表示从执行开始，每隔5s触发一次。比如执行的时候是第3s，则8，13秒都会触发。</li><li><code>?</code>表示在两个可能的矛盾字段中，忽略其中一个字段的值。通常是用在 dayofweek和dayofmouth这两个字段中，只能用一次。</li><li><code>L</code> 表示最后，只能出现在DayofWeek和DayofMonth域。如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。</li><li><code>W</code> 表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 。</li><li><code>LW</code> 这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。</li><li><code>#</code> 表示每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。</li></ul></li></ul><h4 id="2-字段含义"><a href="#2-字段含义" class="headerlink" title="2.字段含义"></a>2.字段含义</h4><table><thead><tr><th>字段</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>秒（Seconds）</td><td>0~59的整数</td><td>, - * / 四个字符</td></tr><tr><td>分（Minutes）</td><td>0~59的整数</td><td>, - * / 四个字符</td></tr><tr><td>小时（Hours）</td><td>0~23的整数</td><td>, - * / 四个字符</td></tr><tr><td>日期（DayofMonth）</td><td>1~31的整数（但是你需要考虑你月的天数）</td><td>,- * ? / L W C 八个字符</td></tr><tr><td>月份（Month）</td><td>1~12的整数或者 JAN-DEC</td><td>, - * / 四个字符</td></tr><tr><td>星期（DayofWeek）</td><td>1~7的整数或者 SUN-SAT （1=SUN）</td><td>, - * ? / L C # 八个字符</td></tr></tbody></table><h4 id="3-常见的域"><a href="#3-常见的域" class="headerlink" title="3.常见的域"></a>3.常见的域</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">（<span class="selector-tag">1</span>） <span class="selector-tag">0</span> <span class="selector-tag">2</span> <span class="selector-tag">1</span> * ? *   表示在每月的<span class="selector-tag">1</span>日的凌晨<span class="selector-tag">2</span>点调整任务</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">2</span>）<span class="selector-tag">0</span> <span class="selector-tag">15</span> <span class="selector-tag">10</span> ? * <span class="selector-tag">MON-FRI</span>   表示周一到周五每天上午<span class="selector-tag">10</span>:<span class="selector-tag">15</span>执行作业</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">3</span>）<span class="selector-tag">0</span> <span class="selector-tag">15</span> <span class="selector-tag">10</span> ? <span class="selector-tag">6L</span> <span class="selector-tag">2002-2006</span>   表示<span class="selector-tag">2002-2006</span>年的每个月的最后一个星期五上午<span class="selector-tag">10</span>:<span class="selector-tag">15</span>执行作</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">4</span>）<span class="selector-tag">0</span> <span class="selector-tag">0</span> <span class="selector-tag">10</span>,<span class="selector-tag">14</span>,<span class="selector-tag">16</span> * * ?   每天上午<span class="selector-tag">10</span>点，下午<span class="selector-tag">2</span>点，<span class="selector-tag">4</span>点</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">5</span>）<span class="selector-tag">0</span> <span class="selector-tag">0</span>/<span class="selector-tag">30</span> <span class="selector-tag">9-17</span> * * ?   朝九晚五工作时间内每半小时</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">6</span>）<span class="selector-tag">0</span> <span class="selector-tag">0</span> <span class="selector-tag">12</span> ? * <span class="selector-tag">WED</span> 表示每个星期三中午<span class="selector-tag">12</span>点</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">7</span>）<span class="selector-tag">0</span> <span class="selector-tag">0</span> <span class="selector-tag">12</span> * * ?   每天中午<span class="selector-tag">12</span>点触发</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">8</span>）<span class="selector-tag">0</span> <span class="selector-tag">15</span> <span class="selector-tag">10</span> ? * * 每天上午<span class="selector-tag">10</span>:<span class="selector-tag">15</span>触发</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">9</span>）<span class="selector-tag">0</span> <span class="selector-tag">15</span> <span class="selector-tag">10</span> * * ? 每天上午<span class="selector-tag">10</span>:<span class="selector-tag">15</span>触发</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">10</span>）<span class="selector-tag">0</span> <span class="selector-tag">15</span> <span class="selector-tag">10</span> * * ? * 每天上午<span class="selector-tag">10</span>:<span class="selector-tag">15</span>触发</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">11</span>）<span class="selector-tag">0</span> <span class="selector-tag">15</span> <span class="selector-tag">10</span> * * ? <span class="selector-tag">2005</span> <span class="selector-tag">2005</span>年的每天上午<span class="selector-tag">10</span>:<span class="selector-tag">15</span>触发</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">12</span>）<span class="selector-tag">0</span> * <span class="selector-tag">14</span> * * ? 在每天下午<span class="selector-tag">2</span>点到下午<span class="selector-tag">2</span>:<span class="selector-tag">59</span>期间的每<span class="selector-tag">1</span>分钟触发</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">13</span>）<span class="selector-tag">0</span> <span class="selector-tag">0</span>/<span class="selector-tag">5</span> <span class="selector-tag">14</span> * * ? 在每天下午<span class="selector-tag">2</span>点到下午<span class="selector-tag">2</span>:<span class="selector-tag">55</span>期间的每<span class="selector-tag">5</span>分钟触发</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">14</span>）<span class="selector-tag">0</span> <span class="selector-tag">0</span>/<span class="selector-tag">5</span> <span class="selector-tag">14</span>,<span class="selector-tag">18</span> * * ? 在每天下午<span class="selector-tag">2</span>点到<span class="selector-tag">2</span>:<span class="selector-tag">55</span>期间和下午<span class="selector-tag">6</span>点到<span class="selector-tag">6</span>:<span class="selector-tag">55</span>期间的每<span class="selector-tag">5</span>分钟触发</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">15</span>）<span class="selector-tag">0</span> <span class="selector-tag">0-5</span> <span class="selector-tag">14</span> * * ? 在每天下午<span class="selector-tag">2</span>点到下午<span class="selector-tag">2</span>:<span class="selector-tag">05</span>期间的每<span class="selector-tag">1</span>分钟触发</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">16</span>）<span class="selector-tag">0</span> <span class="selector-tag">10</span>,<span class="selector-tag">44</span> <span class="selector-tag">14</span> ? <span class="selector-tag">3</span> <span class="selector-tag">WED</span> 每年三月的星期三的下午<span class="selector-tag">2</span>:<span class="selector-tag">10</span>和<span class="selector-tag">2</span>:<span class="selector-tag">44</span>触发</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">17</span>）<span class="selector-tag">0</span> <span class="selector-tag">15</span> <span class="selector-tag">10</span> ? * <span class="selector-tag">MON-FRI</span> 周一至周五的上午<span class="selector-tag">10</span>:<span class="selector-tag">15</span>触发</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">18</span>）<span class="selector-tag">0</span> <span class="selector-tag">15</span> <span class="selector-tag">10</span> <span class="selector-tag">15</span> * ? 每月<span class="selector-tag">15</span>日上午<span class="selector-tag">10</span>:<span class="selector-tag">15</span>触发</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">19</span>）<span class="selector-tag">0</span> <span class="selector-tag">15</span> <span class="selector-tag">10</span> <span class="selector-tag">L</span> * ? 每月最后一日的上午<span class="selector-tag">10</span>:<span class="selector-tag">15</span>触发</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">20</span>）<span class="selector-tag">0</span> <span class="selector-tag">15</span> <span class="selector-tag">10</span> ? * <span class="selector-tag">6L</span> 每月的最后一个星期五上午<span class="selector-tag">10</span>:<span class="selector-tag">15</span>触发</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">21</span>）<span class="selector-tag">0</span> <span class="selector-tag">15</span> <span class="selector-tag">10</span> ? * <span class="selector-tag">6L</span> <span class="selector-tag">2002-2005</span>   <span class="selector-tag">2002</span>年至<span class="selector-tag">2005</span>年的每月的最后一个星期五上午<span class="selector-tag">10</span>:<span class="selector-tag">15</span>触发</span><br><span class="line"></span><br><span class="line">　　（<span class="selector-tag">22</span>）<span class="selector-tag">0</span> <span class="selector-tag">15</span> <span class="selector-tag">10</span> ? * <span class="selector-tag">6</span><span class="selector-id">#3</span>   每月的第三个星期五上午<span class="selector-tag">10</span>:<span class="selector-tag">15</span>触发</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">cron表达式规则解析</summary>
    
    
    
    <category term="Linux" scheme="http://liujun1997.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://liujun1997.github.io/tags/Linux/"/>
    
    <category term="Java" scheme="http://liujun1997.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>物联网</title>
    <link href="http://liujun1997.github.io/2021/08/07/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    <id>http://liujun1997.github.io/2021/08/07/%E7%89%A9%E8%81%94%E7%BD%91/</id>
    <published>2021-08-07T06:44:17.000Z</published>
    <updated>2021-09-05T05:44:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-接入流程"><a href="#一-接入流程" class="headerlink" title="一. 接入流程"></a>一. 接入流程</h4><p>![image-20201222171458788](/Users/mac/Library/Application Support/typora-user-images/image-20201222171458788.png)</p><h4 id="二-系统开发说明"><a href="#二-系统开发说明" class="headerlink" title="二.系统开发说明"></a>二.系统开发说明</h4><h5 id="1-1-名词解析"><a href="#1-1-名词解析" class="headerlink" title="1.1 名词解析"></a>1.1 名词解析</h5><ul><li>产品: 对某一型设备的分类,通常是已经存在的某一个设备型号.</li><li>设备：具体的某一个设备.</li><li>网络组件: 用于管理各种网络服务(MQTT,TCP等),动态配置,启停. 只负责接收,发送报文,不负责任何处理逻辑。</li><li>协议:  用于自定义消息解析规则,用于认证、将设备发送给平台报文解析为平台统一的报文，以及处理平台下发给设备的指令。</li><li>设备网关: 负责平台侧统一的设备接入,使用网络组件处理对应的请求以及报文,使用配置的协议解析为平台统一的设备消息。</li></ul><h5 id="1-3-平台统一设备消息定义"><a href="#1-3-平台统一设备消息定义" class="headerlink" title="1.3 平台统一设备消息定义"></a>1.3 平台统一设备消息定义</h5><ul><li><p>平台使用自定义的协议包将设备上报的报文解析为平台统一的消息,来进行统一管理。</p></li><li><p>平台统一消息基本于物模型中的定义相同,主要由<code>属性(property)</code>,<code>功能(function)</code>,<code>事件(event)</code>组成.</p></li></ul><h5 id="1-2-消息组成"><a href="#1-2-消息组成" class="headerlink" title="1.2 消息组成"></a>1.2 消息组成</h5><ul><li>消息主要由<code>deviceId</code>,<code>messageId</code>,<code>headers</code>,<code>timestamp</code>组成.</li></ul><h5 id="1-3-属性相关消息"><a href="#1-3-属性相关消息" class="headerlink" title="1.3 属性相关消息"></a>1.3 属性相关消息</h5><ol><li><p><code>获取设备属性(ReadPropertyMessage)</code>对应设备回复的消息<code>ReadPropertyMessageReply</code>.</p></li><li><p><code>设备上报属性(ReportPropertyMessage)</code> 由设备上报.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ReadPropertyMessage&#123;</span><br><span class="line">    Map&lt;String,Object&gt; headers;</span><br><span class="line">    String deviceId; </span><br><span class="line">    String messageId;</span><br><span class="line">    <span class="keyword">long</span> timestamp; <span class="comment">//时间戳(毫秒)</span></span><br><span class="line">    List&lt;String&gt; properties;<span class="comment">//可读取多个属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReadPropertyMessageReply&#123;</span><br><span class="line">    Map&lt;String,Object&gt; headers;</span><br><span class="line">    String deviceId;</span><br><span class="line">    String messageId;</span><br><span class="line">    <span class="keyword">long</span> timestamp; <span class="comment">//时间戳(毫秒)</span></span><br><span class="line">    <span class="keyword">boolean</span> success;</span><br><span class="line">    Map&lt;String,Object&gt; properties;<span class="comment">//属性键值对</span></span><br><span class="line">&#125;</span><br><span class="line">ReportPropertyMessage&#123;</span><br><span class="line">    Map&lt;String,Object&gt; headers;</span><br><span class="line">    String deviceId;</span><br><span class="line">    String messageId;</span><br><span class="line">    <span class="keyword">long</span> timestamp; <span class="comment">//时间戳(毫秒)</span></span><br><span class="line">    Map&lt;String,Object&gt; properties;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="1-4-功能相关消息"><a href="#1-4-功能相关消息" class="headerlink" title="1.4 功能相关消息"></a>1.4 功能相关消息</h5><ol><li><p>调用设备功能到消息(<code>FunctionInvokeMessage</code>)由平台发往设备,对应到返回消息<code>FunctionInvokeMessageReply</code></p></li><li><p>事件消息<code>EventMessage</code>由设备端发往平台.</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">FunctionInvokeMessage&#123;</span><br><span class="line">    Map&lt;String,Object&gt; headers;</span><br><span class="line">    String functionId;<span class="comment">//功能标识,在元数据中定义.</span></span><br><span class="line">    String deviceId;</span><br><span class="line">    String messageId;</span><br><span class="line">    <span class="keyword">long</span> timestamp; <span class="comment">//时间戳(毫秒)</span></span><br><span class="line">    List&lt;FunctionParameter&gt; inputs;<span class="comment">//输入参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FunctionParameter&#123;</span><br><span class="line">    String name;</span><br><span class="line">    Object value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FunctionInvokeMessageReply&#123;</span><br><span class="line">    Map&lt;String,Object&gt; headers;</span><br><span class="line">    String deviceId;</span><br><span class="line">    String messageId;</span><br><span class="line">    <span class="keyword">long</span> timestamp;</span><br><span class="line">    <span class="keyword">boolean</span> success;</span><br><span class="line">    Object output; <span class="comment">//输出值,需要与元数据定义中的类型一致</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="1-5-事件相关消息"><a href="#1-5-事件相关消息" class="headerlink" title="1.5 事件相关消息"></a>1.5 事件相关消息</h5><ol><li><p>事件消息<code>EventMessage</code>由设备端发往平台.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EventMessage&#123;</span><br><span class="line">    Map&lt;String,Object&gt; headers;</span><br><span class="line">    String event; <span class="comment">//事件标识,在元数据中定义</span></span><br><span class="line">    Object data;  <span class="comment">//与元数据中定义的类型一致,如果是对象类型,请转为java.util.HashMap,禁止使用自定义类型.</span></span><br><span class="line">    <span class="keyword">long</span> timestamp; <span class="comment">//时间戳(毫秒)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="1-6-其他相关消息"><a href="#1-6-其他相关消息" class="headerlink" title="1.6 其他相关消息"></a>1.6 其他相关消息</h5><ol><li><p><code>DeviceOnlineMessage</code> 设备上线消息,通常用于网关代理的子设备的上线操作.</p></li><li><p><code>DeviceOfflineMessage</code> 设备上线消息,通常用于网关代理的子设备的下线操作.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EventMessage&#123;</span><br><span class="line">    Map&lt;String,Object&gt; headers;</span><br><span class="line">    String event; <span class="comment">//事件标识,在元数据中定义</span></span><br><span class="line">    Object data;  <span class="comment">//与元数据中定义的类型一致,如果是对象类型,请转为java.util.HashMap,禁止使用自定义类型.</span></span><br><span class="line">    <span class="keyword">long</span> timestamp; <span class="comment">//时间戳(毫秒)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="二-设备接入"><a href="#二-设备接入" class="headerlink" title="二. 设备接入"></a>二. 设备接入</h4><h5 id="2-1-产品物模型定义"><a href="#2-1-产品物模型定义" class="headerlink" title="2.1 产品物模型定义"></a>2.1 产品物模型定义</h5><ul><li><p><strong>属性</strong>用于定义一些指标数据,如:<code>电压</code>,<code>温度</code>等. 属性都应该是简单的数据类型,</p></li><li><p><strong>功能</strong>用于定义设备具有的一些可执行动作,如: <code>消音</code>,<code>关灯</code>,<code>云台控制</code>.根据情况设计好输入参数和输出参数.</p></li><li><p><strong>事件</strong>用于定义设备在特定条件时,发生的动作,如:<code>火警</code>,<code>检测到人脸</code>,通常为结构体类型,用于保存比较复杂的数据.</p></li><li><p><strong>标签</strong>对于设备固有不变的信息,建议使用设备标签进行管理,如设备地理位置等.</p><p>![image-20201222173831786](/Users/mac/Library/Application Support/typora-user-images/image-20201222173831786.png)</p></li></ul><h5 id="2-2-协议包开发"><a href="#2-2-协议包开发" class="headerlink" title="2.2 协议包开发"></a>2.2 协议包开发</h5><ul><li><p>协议是设备与平台通信的一种标准，某个设备想与平台进行通信就必须按照某种协议标准进行规定上报的数据格式，支持jar包形式</p></li><li><p>平台封装了网络通信,但是具体的数据由消息协议进行解析.<code>协议(ProtocolSupport)</code>主要由<code>认证器(Authenticator)</code>, <code>消息编解码器(DeviceMessageCodec)</code>,<code>消息发送拦截器(DeviceMessageSenderInterceptor)</code>以及<code>配置元数据(ConfigMetadata)</code>组成</p></li></ul><ol><li> 认证器(Authenticator)是用于在收到设备请求(例如MQTT)时,对客户端进行认证时使用,不同的网络协议(Transport)使用不同的认证器.</li></ol>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Authenticator</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对指定对设备进行认证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 认证请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> device  设备</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 认证结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Mono&lt;AuthenticationResponse&gt; <span class="title">authenticate</span><span class="params">(<span class="meta">@Nonnull</span> AuthenticationRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">                                              <span class="meta">@Nonnull</span> DeviceOperator device)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  在MQTT服务网关中指定了认证协议时,将调用此方法进行认证。</span></span><br><span class="line"><span class="comment">     *  注意: 认证通过后,需要设置设备ID.&#123;<span class="doctag">@link</span> AuthenticationResponse#success(String)&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request  认证请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry 设备注册中心</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 认证结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Mono&lt;AuthenticationResponse&gt; <span class="title">authenticate</span><span class="params">(<span class="meta">@Nonnull</span> AuthenticationRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                      <span class="meta">@Nonnull</span> DeviceRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(AuthenticationResponse.success());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>用于将平台<code>统一的消息(Message)</code>与<code>设备端能处理的消息(EncodedMessage)</code>进行相互转换. 设备网关从<code>网络组件</code>中接收到报文后,会调用对应协议包的消息编解码器进行处理. 不同网络协议需要转换为不同的<code>EncodedMessage</code>类型.比如,MQTT需要转换为<code>MqttMessage</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeviceMessageCodec</span></span>&#123;</span><br><span class="line">  <span class="comment">//此编解码器支持的网络协议,如: DefaultTransport.MQTT</span></span><br><span class="line">  <span class="function">Transport <span class="title">getSupportTransport</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//将平台发往设备的消息编码为设备端对消息</span></span><br><span class="line">  Publisher&lt;? extends EncodedMessage&gt; encode(MessageEncodeContext context);</span><br><span class="line">  <span class="comment">//将设备发往平台的消息解码为平台统一的消息</span></span><br><span class="line">  Publisher&lt;? extends Message&gt; decode(MessageDecodeContext context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>EncodedMessage从网络组件中接收到的消息,不同的网络组件消息类型不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EncodedMessage</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取原始报文</span></span><br><span class="line">    <span class="function">ByteBuf <span class="title">getPayload</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//报文转为字符串</span></span><br><span class="line">    <span class="function">String <span class="title">payloadAsString</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//报文转为JSON对象</span></span><br><span class="line">    <span class="function">JSONObject <span class="title">payloadAsJson</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//报文转为JSON数组</span></span><br><span class="line">    <span class="function">JSONArray <span class="title">payloadAsJsonArray</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 报文转为字节数组</span></span><br><span class="line">    <span class="keyword">byte</span>[] payloadAsBytes()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//mqtt消息</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MqttMessage</span> <span class="keyword">extends</span> <span class="title">EncodedMessage</span></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getTopic</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getQos</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ConfigMetadata 配置元数据用于告诉平台,在使用此协议的时候,需要添加一些自定义配置到设备配置，(<code>DeviceOperator.setConfig</code>)中. 在其他地方可以通过<code>DeviceOperator.getConfig</code>获取这些配置.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CompositeProtocolSupport support = <span class="keyword">new</span> CompositeProtocolSupport();</span><br><span class="line">support.setId(<span class="string">&quot;demo-v1&quot;</span>);</span><br><span class="line">support.setName(<span class="string">&quot;演示协议v1&quot;</span>);</span><br><span class="line">support.setDescription(<span class="string">&quot;演示协议&quot;</span>);</span><br><span class="line">support.setMetadataCodec(<span class="keyword">new</span> ChiefLinksDeviceMetadataCodec()); <span class="comment">//固定为JetLinksDeviceMetadataCodec,请勿修改.</span></span><br><span class="line"></span><br><span class="line">DefaultConfigMetadata mqttConfig = <span class="keyword">new</span> DefaultConfigMetadata(</span><br><span class="line">            <span class="string">&quot;MQTT认证配置&quot;</span></span><br><span class="line">            , <span class="string">&quot;&quot;</span>)</span><br><span class="line">            .add(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;MQTT用户名&quot;</span>, <span class="keyword">new</span> StringType())</span><br><span class="line">            .add(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;MQTT密码&quot;</span>, <span class="keyword">new</span> PasswordType())</span><br><span class="line">            .add(<span class="string">&quot;productKey&quot;</span>, <span class="string">&quot;productKey&quot;</span>, <span class="string">&quot;产品密钥&quot;</span>, <span class="keyword">new</span> PasswordType(),DeviceConfigScope.product) <span class="comment">//只有产品需要配置</span></span><br><span class="line">            ;</span><br><span class="line"><span class="comment">//设置MQTT所需要到配置</span></span><br><span class="line"> support.addConfigMetadata(DefaultTransport.MQTT, mqttConfig);</span><br></pre></td></tr></table></figure></li><li><p>DeviceMessageSenderInterceptor 使用拦截器可以拦截消息发送和返回的动作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DeviceMessageSenderInterceptor&#123;</span><br><span class="line">     <span class="comment">//发送前</span></span><br><span class="line">      <span class="function">Mono&lt;DeviceMessage&gt; <span class="title">preSend</span><span class="params">(DeviceOperator device, DeviceMessage message)</span></span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//发送后</span></span><br><span class="line">      &lt;R extends DeviceMessage&gt; <span class="function">Flux&lt;R&gt; <span class="title">afterSent</span><span class="params">(DeviceOperator device, DeviceMessage message, Flux&lt;R&gt; reply)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="2-3-创建对应的网关或者网络组件"><a href="#2-3-创建对应的网关或者网络组件" class="headerlink" title="2.3 创建对应的网关或者网络组件"></a>2.3 创建对应的网关或者网络组件</h5><ol><li><p>选择 <code>网络组件</code>–&gt;<code>组件管理</code>–&gt; 点击<code>新增组件</code>按钮，新建对应的网络组件，在创建完成的模块上点击<code>启动</code>按钮</p><p>![image-20201222173951304](/Users/mac/Library/Application Support/typora-user-images/image-20201222173951304.png)</p></li><li><p>选择 <code>网络组件</code>–&gt;<code>设备网关</code>–&gt; 点击<code>新建</code>按钮。在操作列点击<code>启动</code>按钮启动网关。</p><p>![image-20201222174023253](/Users/mac/Library/Application Support/typora-user-images/image-20201222174023253.png)</p></li></ol><h5 id="2-4-创建设备实例"><a href="#2-4-创建设备实例" class="headerlink" title="2.4 创建设备实例"></a>2.4 创建设备实例</h5><ul><li><p>选择 <code>设备管理</code>–&gt;<code>设备</code>–&gt; 点击<code>添加设备</code>按钮，填写对应的信息添加</p><p>![image-20201222173901028](/Users/mac/Library/Application Support/typora-user-images/image-20201222173901028.png)</p></li></ul><h5 id="2-5-设备调试"><a href="#2-5-设备调试" class="headerlink" title="2.5 设备调试"></a>2.5 设备调试</h5><ul><li>使用mqtfx工具模拟设备调试</li></ul><h4 id="三-接入协议开发说明"><a href="#三-接入协议开发说明" class="headerlink" title="三. 接入协议开发说明"></a>三. 接入协议开发说明</h4><ul><li>平台支持mqtt协议，http协议，tcp协议，推荐使用mqtt协议，broker模式接入，平台提供一个此对接模式样例。</li></ul><h5 id="3-1-开发步骤"><a href="#3-1-开发步骤" class="headerlink" title="3.1 开发步骤"></a>3.1 开发步骤</h5><ol><li><p>新建org.chieflinks.demo.protocol，创建协议编码解码类：DemoDeviceMessageCodec</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoDeviceMessageCodec</span> <span class="keyword">implements</span> <span class="title">DeviceMessageCodec</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Transport <span class="title">getSupportTransport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DefaultTransport.Mqtt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;? extends Message&gt; decode(MessageDecodeContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.empty();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Publisher&lt;? extends EncodedMessage&gt; encode(MessageEncodeContext context) &#123;</span><br><span class="line">        retrun Mono.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建协议入口类： DemoProtocolSupportProvider</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoProtocolSupportProvider</span> <span class="keyword">implements</span> <span class="title">ProtocolSupportProvider</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> Mono&lt;? extends ProtocolSupport&gt; create(ServiceContext context) &#123;</span><br><span class="line">          CompositeProtocolSupport support = <span class="keyword">new</span> CompositeProtocolSupport();</span><br><span class="line">          support.setId(<span class="string">&quot;xx&quot;</span>);</span><br><span class="line">          support.setName(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">          support.setDescription(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">          support.setMetadataCodec(<span class="keyword">new</span> ChiefLinksDeviceMetadataCodec());</span><br><span class="line">          DemoDeviceMessageCodec codec = <span class="keyword">new</span> DemoDeviceMessageCodec();</span><br><span class="line">          support.addMessageCodecSupport(DefaultTransport.Mqtt, () -&gt; Mono.just(codec));</span><br><span class="line">          <span class="keyword">return</span> Mono.just(support);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>消息上报解码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;? extends Message&gt; decode(MessageDecodeContext context) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Mono.fromSupplier(() -&gt; &#123;</span><br><span class="line">            MqttMessage mqttMessage = (MqttMessage) context.getMessage();</span><br><span class="line">            String topic = mqttMessage.getTopic();</span><br><span class="line">            JSONObject payload =   JSON.parseObject(mqttMessage.getPayload().toString(StandardCharsets.UTF_8));</span><br><span class="line">            String deviceId = context.getDevice() != <span class="keyword">null</span> ? context.getDevice().getDeviceId() : <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> doDecode(deviceId, topic, payload);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>平台发送消息给设备(编码)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;EncodedMessage&gt; <span class="title">encode</span><span class="params">(MessageEncodeContext context)</span> </span>&#123;</span><br><span class="line">      Message message = context.getMessage();</span><br><span class="line">      <span class="keyword">return</span> Mono.defer(() -&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (message <span class="keyword">instanceof</span> DeviceMessage) &#123;</span><br><span class="line">              <span class="keyword">if</span> (message <span class="keyword">instanceof</span> DisconnectDeviceMessage) &#123;</span><br><span class="line">                  <span class="keyword">return</span> ((ToDeviceMessageContext) context)</span><br><span class="line">                          .disconnect()</span><br><span class="line">                          .then(Mono.empty());</span><br><span class="line">              &#125;</span><br><span class="line">   </span><br><span class="line">              TopicMessage msg = doEncode((DeviceMessage) message);</span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">null</span> == msg) &#123;</span><br><span class="line">                  <span class="keyword">return</span> Mono.empty();</span><br><span class="line">              &#125;</span><br><span class="line">   </span><br><span class="line">              <span class="keyword">return</span> Mono.just(SimpleMqttMessage.builder()</span><br><span class="line">                              .topic(msg.getTopic())</span><br><span class="line">                              .payload(Unpooled.wrappedBuffer(JSON.toJSONBytes(msg.getMessage())))</span><br><span class="line">                              .build());</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> Mono.empty();</span><br><span class="line">   </span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>打成jar包上传到平台</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;一-接入流程&quot;&gt;&lt;a href=&quot;#一-接入流程&quot; class=&quot;headerlink&quot; title=&quot;一. 接入流程&quot;&gt;&lt;/a&gt;一. 接入流程&lt;/h4&gt;&lt;p&gt;![image-20201222171458788](/Users/mac/Library/Applic</summary>
      
    
    
    
    <category term="物联网" scheme="http://liujun1997.github.io/categories/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    
    <category term="IOT chieflinks" scheme="http://liujun1997.github.io/tags/IOT-chieflinks/"/>
    
  </entry>
  
  <entry>
    <title>cdh安装部署</title>
    <link href="http://liujun1997.github.io/2021/08/06/cdh%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <id>http://liujun1997.github.io/2021/08/06/cdh%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</id>
    <published>2021-08-06T15:27:54.000Z</published>
    <updated>2021-09-05T05:45:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CDH6-3-2-安装"><a href="#CDH6-3-2-安装" class="headerlink" title="CDH6.3.2 安装"></a>CDH6.3.2 安装</h1><p>[toc]</p><h2 id="1-安装说明"><a href="#1-安装说明" class="headerlink" title="1.安装说明"></a>1.安装说明</h2><p>1.安全前置准备，包括安装操作系统、关闭防火墙、同步服务器时钟等</p><p>2.外部数据库如MySQL安装</p><p>3.安装Cloudera Manager</p><p>4.安装CDH集群</p><p><strong>请务必注意CDH6的安装前置条件包括如下：</strong></p><p><strong>外部数据库支持：</strong></p><p>MySQL 5.7或更高</p><p>MariaDB 5.5或更高</p><p>PostgreSQL 8.4或更高</p><p>Oracle 12c或更高</p><p><strong>java环境：</strong></p><p>Oracle JDK1.8，将不再支持JDK1.7</p><p><strong>操作系统支持</strong></p><p>RHEL 6.8或更高</p><p>RHEL 7.2或更高</p><p>SLES 12 SP2或更高</p><p>Ubuntu 16或更高</p><h2 id="2-集成环境"><a href="#2-集成环境" class="headerlink" title="2.集成环境"></a>2.集成环境</h2><h3 id="2-1操作脚本"><a href="#2-1操作脚本" class="headerlink" title="2.1操作脚本"></a>2.1操作脚本</h3><ul><li><strong>创建shell目录</strong></li></ul><p>mkdir  -p /opt/shell/</p><ul><li><strong>创建node.list文件</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch node.list</span><br></pre></td></tr></table></figure><p>添加如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">master01.health.bigdata.com</span><br><span class="line">master02.health.bigdata.com</span><br><span class="line">slave01.health.bigdata.com</span><br><span class="line">slave02.health.bigdata.com</span><br><span class="line">slave03.health.bigdata.com</span><br><span class="line">slave04.health.bigdata.com</span><br></pre></td></tr></table></figure><ul><li><strong>创建ssh_no_passwd.sh文件</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch ssh_no_passwd.sh</span><br></pre></td></tr></table></figure><p>添加内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">ips_name=$1</span><br><span class="line"><span class="meta">#</span><span class="bash">获取当前目录的绝对路径</span></span><br><span class="line">path_dir=`pwd`</span><br><span class="line"><span class="meta">#</span><span class="bash">找到ips文件的位置,并查看里面的内容 赋给ips_arr</span></span><br><span class="line">remote_hosts=`cat $&#123;path_dir&#125;/$&#123;ips_name&#125;`</span><br><span class="line"></span><br><span class="line">if [ -f &quot;/root/.ssh/id_rsa.pub&quot; ]|| [ -f &quot;/root/.ssh/id_rsa&quot;];then</span><br><span class="line">    echo &quot;文件已经存在&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;文件不存在准备创建&quot;</span><br><span class="line">    echo &quot;准备创建公钥文件&quot;</span><br><span class="line">    ssh-keygen -t rsa -q -f &quot;/root/.ssh/id_rsa&quot; -P &#x27;&#x27;</span><br><span class="line">fi</span><br><span class="line">echo &quot;公钥创建完成&quot;</span><br><span class="line">echo &quot;传送至远端主机&quot;</span><br><span class="line">echo &quot;一共有$#台主机需要配置&quot;</span><br><span class="line">if [ ! -z $# ];then</span><br><span class="line">    for host in $remote_hosts</span><br><span class="line">        do</span><br><span class="line">        ssh-copy-id -i /root/.ssh/id_rsa.pub $host</span><br><span class="line">    done</span><br><span class="line">else</span><br><span class="line">    echo &quot;请至少输入一台服务器地址&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li><strong>创建ssh_do_all.sh文件</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch ssh_do_all.sh</span><br></pre></td></tr></table></figure><p>添加内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">拿到外面传进来的命令</span></span><br><span class="line">ips_name=$1</span><br><span class="line">cmd=&quot;&quot;</span><br><span class="line">for((i=2;i&lt;=$#;i++)); do </span><br><span class="line">    j=$&#123;!i&#125;</span><br><span class="line">    cmd=&quot;$&#123;cmd&#125; $j &quot;</span><br><span class="line">done</span><br><span class="line">echo &quot;&#x27;$&#123;cmd&#125;&#x27;&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">进入到当前脚本所在的路径</span></span><br><span class="line">cd `dirname $0`</span><br><span class="line"><span class="meta">#</span><span class="bash">获取当前目录的绝对路径</span></span><br><span class="line">path_dir=`pwd`</span><br><span class="line"><span class="meta">#</span><span class="bash">找到ips文件的位置,并查看里面的内容 赋给ips_arr</span></span><br><span class="line">ips_arr=`cat $&#123;path_dir&#125;/$&#123;ips_name&#125;`</span><br><span class="line"></span><br><span class="line">for ip in $&#123;ips_arr[*]&#125;</span><br><span class="line">do</span><br><span class="line">        #拼接ssh命令:ssh用户名@主机名 命令</span><br><span class="line">        cmd_=&quot;ssh $ip &#x27;$cmd&#x27;&quot;</span><br><span class="line">        echo $cmd_</span><br><span class="line">        #通过eval 实现动态执行命令</span><br><span class="line">        if eval $cmd_; then</span><br><span class="line">                echo &#x27;ok&#x27;</span><br><span class="line">        else</span><br><span class="line">                echo &#x27;fail&#x27;</span><br><span class="line">        fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>执行命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh ssh_do_all.sh node.list df -h</span><br></pre></td></tr></table></figure><ul><li><strong>创建scp_do_all.sh文件</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch scp_do_all.sh</span><br></pre></td></tr></table></figure><p>添加内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash<span class="comment">#脚本使用说明# ./scp_do_all.sh f1 /home/luser/dirips_name=$1#你要传的文件source_=$2#目标目录target=$3#先进入当前脚本的所在路径cd `dirname $0`#获取当前目录的绝对路径path_dir=`pwd`#找到ips文件的位置，并查看里面的内容 赋给 ips_arrips_arr=(`cat $&#123;path_dir&#125;/$&#123;ips_name&#125;`)for ip in $&#123;ips_arr[*]&#125;do        #拼接scp 命令： scp 你要传的文件 用户名@主机名:目标目录         cmd_=&quot;scp $source_ $ip:$target&quot;        echo $cmd_        #通过eval 实现动态执行命令        if eval $cmd_ ; then                echo &#x27;ok&#x27;        else                echo &#x27;fail&#x27;        fidone</span></span></span><br></pre></td></tr></table></figure><p>执行命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh scp_do_all.sh node.list /etc/hosts /etc/</span><br></pre></td></tr></table></figure><h3 id="2-2hostname修改"><a href="#2-2hostname修改" class="headerlink" title="2.2hostname修改"></a>2.2hostname修改</h3><p>各节点的hostname配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hostname#hostnameip-172-31-13-38.ap-southeast-1.compute.internal</span><br></pre></td></tr></table></figure><p>或者你可以通过命令修改立即生效</p><p>hostnamectl set-hostname ip-172-31-13-38.ap-southeast-1.compute.internal</p><h3 id="2-3hosts配置"><a href="#2-3hosts配置" class="headerlink" title="2.3hosts配置"></a>2.3hosts配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gxwj-zhongjj-8 ~]# cat /etc/hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain619.50.65.66 master01.health.bigdata.com19.50.65.67 master02.health.bigdata.com19.50.65.68 slave01.health.bigdata.com19.50.65.71 slave02.health.bigdata.com19.50.65.75 slave03.health.bigdata.com19.50.65.76 slave04.health.bigdata.com</span><br></pre></td></tr></table></figure><ul><li>将文件复制的集群的各个节点</li></ul><h3 id="2-4SSH免登陆"><a href="#2-4SSH免登陆" class="headerlink" title="2.4SSH免登陆"></a>2.4SSH免登陆</h3><ul><li><p>在主节点执行sh脚本</p></li><li><p>执行命令</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ssh_no_passwd.sh node.list</span><br></pre></td></tr></table></figure><h3 id="2-5配置iso镜像源"><a href="#2-5配置iso镜像源" class="headerlink" title="2.5配置iso镜像源"></a>2.5配置iso镜像源</h3><p><strong>创建iso目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/iso</span><br></pre></td></tr></table></figure><p><strong>创建http目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /var/www/html/iso</span><br></pre></td></tr></table></figure><p><strong>将ISO镜像文件移到/opt/iso目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp CentOS-7-x86_64-DVD-1908.iso /opt/iso</span><br></pre></td></tr></table></figure><p><strong>临时挂载，重启无效</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -o loop /opt/iso/CentOS-7-x86_64-DVD-1908.iso /var/www/html/iso</span><br></pre></td></tr></table></figure><p>通过 df -h命令查看</p><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-14-155860.jpg" alt="img"> </p><p><strong>永久挂载操作系统iso文件</strong></p><p>注意格式，容易出错，内容tab键隔开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/fstab</span><br></pre></td></tr></table></figure><p>最末端添加内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/iso/CentOS-7-x86_64-DVD-1908.iso /var/www/html/iso/ iso9660 defaults,ro,loop    0    0</span><br></pre></td></tr></table></figure><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-14-155859.jpg" alt="img"></p><p> 执行重新加载命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -a </span><br></pre></td></tr></table></figure><p>内容格式不对，会出错，如下：</p><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-14-155857.jpg" alt="img"></p><p>显示/etc/fstab的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount</span><br></pre></td></tr></table></figure><p>查看是否挂载成功</p><p>注意：如果不成功，需要修改配置内容与格式，否则系统重启无法进入用户会话</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-14-155901.jpg" alt="img"> </p><p><strong>配置操作系统repo</strong></p><p>创建os.repo文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/yum.repos.d/os.repo</span><br></pre></td></tr></table></figure><p>本地os.repo配置内容 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[local_iso]name=CentOS-$releasever - Mediabaseurl=file:///var///www///html///isogpgcheck=0enabled=1</span><br></pre></td></tr></table></figure><p>同时按照httpd服务</p><p>yum install httpd</p><p>其他服务器节点os.repo配置内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[osrepo]#</span><span class="bash">自定义名称name=os_repo<span class="comment">#yum访问路径baseurl=http://19.50.65.66/iso/#启用yum源，0为不启用，1为启用enabled=1#检查GPG-KEY，0为不检查，1为检查gpgcheck=0</span></span> </span><br></pre></td></tr></table></figure><p>删除所有默认的repo所有节点都是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/yum.repo.d/</span><br></pre></td></tr></table></figure><p>查看当前可用的源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum repolist</span><br></pre></td></tr></table></figure><p>清除缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure><h3 id="2-6集群时钟同步"><a href="#2-6集群时钟同步" class="headerlink" title="2.6集群时钟同步"></a>2.6集群时钟同步</h3><p>参考网上ntp安装教程</p><p>批量添加定时同步时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi  ntpCrontab.sh</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/baships_name=<span class="variable">$1</span><span class="comment">#获取当前目录的绝对路径path_dir=`pwd`#找到ips文件的位置,并查看里面的内容 赋给ips_arrremote_hosts=`cat $&#123;path_dir&#125;/$&#123;ips_name&#125;`for i in cat $remote_hostsdo  echo $i  ssh $i &quot;(echo &#x27;0 */10 * * * /usr/sbin/ntpdate -u 19.50.65.66&#x27; ;crontab -l) |crontab&quot;  echo &quot;Synchronization is complete.&quot;done</span></span></span><br></pre></td></tr></table></figure><p>或者(推荐)</p><p>ntpdate.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bashcd /opt/shellsh ssh_do_all.sh ipa.list ntpdate -u cdhclient</span></span><br></pre></td></tr></table></figure><p>sudo vi /etc/crontab</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root<span class="comment"># For details see man 4 crontabs# Example of job definition:# .---------------- minute (0 - 59)# |  .------------- hour (0 - 23)# |  |  .---------- day of month (1 - 31)# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# |  |  |  |  |# *  *  *  *  * user-name  command to be executed#添加内容*/5 * * * * root /opt/shell/ntpdate.sh &gt;&gt; /opt/shell/ntpdate.log</span></span><br></pre></td></tr></table></figure><p>重启cron定时服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status crond</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure><h3 id="2-7ansible安装"><a href="#2-7ansible安装" class="headerlink" title="2.7ansible安装"></a>2.7ansible安装</h3><p><strong>安装依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ansible</span><br></pre></td></tr></table></figure><p><strong>配置/etc/ansible/hosts</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#补充内容# This is the default ansible &#x27;hosts&#x27; file.## It should live in /etc/ansible/hosts##   - Comments begin with the &#x27;#&#x27; character#   - Blank lines are ignored#   - Groups of hosts are delimited by [header] elements#   - You can enter hostnames or ip addresses#   - A hostname/ip can be a member of multiple groups# Ex 1: Ungrouped hosts, specify before any group headers.## green.example.com## blue.example.com## 192.168.100.1## 192.168.100.10# Ex 2: A collection of hosts belonging to the &#x27;webservers&#x27; group## [webservers]## alpha.example.org## beta.example.org## 192.168.1.100## 192.168.1.110# If you have multiple hosts following a pattern you can specify# them like this:## www[001:006].example.com# Ex 3: A collection of database servers in the &#x27;dbservers&#x27; group## [dbservers]#### db01.intranet.mydomain.net## db02.intranet.mydomain.net## 10.25.1.56## 10.25.1.57# Here&#x27;s another example of host ranges, this time there are no# leading 0s:## db-[99:101]-node.example.com[all]cdhmaster1.chiefdata.netcdhnode1.chiefdata.netcdhnode2.chiefdata.netcdhnode3.chiefdata.netcdhnode4.chiefdata.netcdhclient.chiefdata.net[ntp]cdhmaster1.chiefdata.netcdhnode1.chiefdata.netcdhnode2.chiefdata.netcdhnode3.chiefdata.netcdhnode4.chiefdata.net[ipa]cdhmaster1.chiefdata.netcdhnode1.chiefdata.netcdhnode2.chiefdata.netcdhnode3.chiefdata.netcdhnode4.chiefdata.net</span></span></span><br></pre></td></tr></table></figure><p><strong>执行批量操作命令</strong></p><p>批量执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m command -a &quot;df -h&quot; </span><br></pre></td></tr></table></figure><p>all 是分组命令</p><p>批量执行shell文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m script -a ./check_env.sh</span><br></pre></td></tr></table></figure><h3 id="2-7初始化配置"><a href="#2-7初始化配置" class="headerlink" title="2.7初始化配置"></a>2.7初始化配置</h3><p><strong>创建check_env.sh文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch  check_env.sh</span><br></pre></td></tr></table></figure><p><strong>增加文件内容：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi check_env.sh</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash<span class="comment"># 系统时间datetime=`date &quot;+%Y%m%d%H%M%S&quot;`# 关闭 firewalldsystemctl stop firewalldsystemctl disable firewalld#关闭 selinuxcp /etc/selinux/config /tmp/selinux_config.&quot;$datetime&quot;setenforce 0SELINUX=`grep &#x27;SELINUX=&#x27; /etc/selinux/config|grep -v &quot;^#&quot;|awk -F&quot;=&quot; &#x27;&#123;print $2&#125;&#x27;`if [ &quot;$SELINUX&quot; == &quot;enforcing&quot; ];then  sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/configelif [ &quot;$SELINUX&quot; == &quot;permissive&quot; ];then  sed -i &#x27;s/SELINUX=permissive/SELINUX=disabled/g&#x27; /etc/selinux/configelse  echo &quot;have already been disabled,Don&#x27;t need to modify&quot;fi# 关闭 tunedtuned-adm offtuned=`systemctl status tuned|grep &#x27;Active: active (running)&#x27;|wc -l`if [ $tuned == 1 ];then  systemctl stop tuned  echo &#x27;tuned stop successful&#x27;else  echo &#x27;tuned already stopped&#x27;fisystemctl disable tuned# 设置 vm.swappinesscp /etc/sysctl.conf /tmp/etc_sysctl.&quot;$datetime&quot;sysctl -w vm.swappiness=1swappiness=`grep &quot;vm.swappiness=&quot; /etc/sysctl.conf|awk -F &quot;=&quot; &#x27;&#123;print $2&#125;&#x27;`if [ &quot;$swappiness&quot; -gt 1 ];then  sed -i &#x27;s/vm.swappiness=&#x27;$swappiness&#x27;/vm.swappiness=1/g&#x27; /etc/sysctl.confelif [ ! -n &quot;$swappiness&quot; ];then  echo &quot;vm.swappiness=1&quot; &gt;&gt; /etc/sysctl.confelse  echo &quot;swappiness=1,Don&#x27;t need to modify&quot;fi# 设置 THPcp /sys/kernel/mm/transparent_hugepage/enabled /tmp/THP_enabled.&quot;$datetime&quot;cp /sys/kernel/mm/transparent_hugepage/defrag /tmp/THP_defrag.&quot;$datetime&quot;cp /etc/rc.d/rc.local /tmp/rc.local.&quot;$datetime&quot;echo &quot;never&quot; &gt; /sys/kernel/mm/transparent_hugepage/enabledecho &quot;never&quot; &gt; /sys/kernel/mm/transparent_hugepage/defragthp_enabled=`grep &quot;transparent_hugepage&quot; /etc/rc.d/rc.local|grep &quot;enabled&quot;`thp_defrag=`grep &quot;transparent_hugepage&quot; /etc/rc.d/rc.local|grep &quot;defrag&quot;`if [ ! -n &quot;$thp_enabled&quot; ];then  echo &#x27;echo &quot;never&quot; &gt; /sys/kernel/mm/transparent_hugepage/enabled&#x27; &gt;&gt; /etc/rc.d/rc.localfiif [ ! -n &quot;$thp_defrag&quot; ];then  echo &#x27;echo &quot;never&quot; &gt; /sys/kernel/mm/transparent_hugepage/defrag&#x27; &gt;&gt; /etc/rc.d/rc.localfichmod +x /etc/rc.d/rc.local</span></span></span><br></pre></td></tr></table></figure><p><strong>执行批量操作命令</strong></p><p>批量执行shell文件：</p><p>注意：all 是分组，对应配置/etc/ansible/hosts配置里面的[all]内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m script -a ./check_env.sh</span><br></pre></td></tr></table></figure><h3 id="2-8安装mariadb数据库"><a href="#2-8安装mariadb数据库" class="headerlink" title="2.8安装mariadb数据库"></a>2.8安装mariadb数据库</h3><p><strong>1.安装MariaDB</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ip-172-31-13-38 ~]# yum -y install mariadb[root@ip-172-31-13-38 ~]# pyyum -y install mariadb-server</span><br></pre></td></tr></table></figure><p><strong>2.启动并配置MariaDB</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ip-172-31-13-38 ~]# systemctl start mariadb[root@ip-172-31-13-38 ~]# systemctl enable mariadbCreated symlink from /etc/systemd/system/multi-user.target.wants/mariadb.service to /usr/lib/systemd/system/mariadb.service.[root@ip-172-31-13-38 ~]# /usr/bin/mysql_secure_installationNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!In order to log into MariaDB to secure it, we&#x27;ll need the currentpassword for the root user.  If you&#x27;ve just installed MariaDB, andyou haven&#x27;t set the root password yet, the password will be blank,so you should just press enter here.Enter current password for root (enter for none): 输入密码OK, successfully used password, moving on...Setting the root password ensures that nobody can log into the MariaDBroot user without the proper authorisation.Set root password? [Y/n] YNew password:Re-enter new password:Password updated successfully!Reloading privilege tables.. ... Success!By default, a MariaDB installation has an anonymous user, allowing anyoneto log into MariaDB without having to have a user account created forthem.  This is intended only for testing, and to make the installationgo a bit smoother.  You should remove them before moving into aproduction environment.Remove anonymous users? [Y/n] Y ... Success!Normally, root should only be allowed to connect from &#x27;localhost&#x27;.  Thisensures that someone cannot guess at the root password from the network.Disallow root login remotely? [Y/n] n ... skipping.By default, MariaDB comes with a database named &#x27;test&#x27; that anyone canaccess.  This is also intended only for testing, and should be removedbefore moving into a production environment.Remove test database and access to it? [Y/n] Y - Dropping test database...   ... Success! - Removing privileges on test database...   ... Success!Reloading the privilege tables will ensure that all changes made so farwill take effect immediately.Reload privilege tables now? [Y/n] Y ... Success!Cleaning up...All done!  If you&#x27;ve completed all of the above steps, your MariaDBinstallation should now be secure.Thanks for using MariaDB!</span><br></pre></td></tr></table></figure><p><strong>3.权限配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -h localhost -p </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;12345678&#x27;  </span><br></pre></td></tr></table></figure><p>这里的123456为你给新增权限用户设置的密码，%代表所有主机，也可以具体到你的主机ip地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;flush privileges;</span><br></pre></td></tr></table></figure><h3 id="2-9建立组件服务需要的数据表"><a href="#2-9建立组件服务需要的数据表" class="headerlink" title="2.9建立组件服务需要的数据表"></a>2.9建立组件服务需要的数据表</h3><p><strong>登录mysql</strong></p><p>或者直接通过navicat 工具远程操作也可以，方便些</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -h localhost -p </span><br></pre></td></tr></table></figure><p><strong>执行脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS hbd_manage DEFAULT CHARSET utf8 COLLATE utf8_general_ci;CREATE DATABASE IF NOT EXISTS dolphinscheduler DEFAULT CHARSET utf8 COLLATE utf8_general_ci;create database metastore default character set utf8;CREATE USER &#x27;ds&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;GRANT ALL PRIVILEGES ON dolphinscheduler . *  TO &#x27;ds&#x27;@&#x27;%&#x27;;FLUSH PRIVILEGES;create database health_metastore default character set utf8;create database health_cm default character set utf8;create database health_hue default character set utf8;create database health_sentry default character set utf8;create database health_oozie default character set utf8;create database health_am default character set utf8;create database health_rm default character set utf8;create database health_nav_ms default character set utf8;create database health_nav_as default character set utf8;</span><br></pre></td></tr></table></figure><h3 id="2-10安装JDBC驱动"><a href="#2-10安装JDBC驱动" class="headerlink" title="2.10安装JDBC驱动"></a>2.10安装JDBC驱动</h3><p><strong>上传mysql-connector-java-5.1.34.jar到服务器</strong></p><p><strong>创建软连接</strong></p><p><strong>所有节点都需要做统一操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/share/java/cp mysql-connector-java-5.1.34.jar /usr/share/java/chmod 777 /usr/share/java/mysql-connector-java-5.1.34.jarln -s /usr/share/java/mysql-connector-java-5.1.34.jar /usr/share/java/mysql-connector-java.jar</span><br></pre></td></tr></table></figure><p>或者直接改名</p><p>mysql-connector-java.jar</p><h2 id="3-CM安装"><a href="#3-CM安装" class="headerlink" title="3.CM安装"></a>3.CM安装</h2><h3 id="3-1配置cm-repo源"><a href="#3-1配置cm-repo源" class="headerlink" title="3.1配置cm repo源"></a>3.1配置cm repo源</h3><p><strong>把cm6.3.1和cdh6.3.2文件夹拷贝到httpd服务器上</strong></p><p>注意：这里的服务器是FreeIPA的服务端，因为FreeIPA的服务端已经安装了httpd</p><p>上传至：**/var/www/html**  目录</p><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-16-061626.png" alt="image-20201216141626348"></p><p><strong>创建repo</strong></p><p>安装create repo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install createrepo</span><br></pre></td></tr></table></figure><p>在cm6.3.1文件夹里面执行，cdh6.3.2不需要此操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createrepo .</span><br></pre></td></tr></table></figure><p><strong>制作cm的repo源</strong></p><p>创建cm.repo文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/yum.repos.d/cm.repo</span><br></pre></td></tr></table></figure><p>cm.repo配置内容 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[cm_repo]name = cm_repobaseurl = http://19.50.65.66/cm6.3.1enabled = 1gpgcheck = 0</span><br></pre></td></tr></table></figure><p>把cm.repo 上传到其他节点服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh scp_do_all.sh node.list /etc/yum.repos.d/cm.repo /etc/yum.repos.d/</span><br></pre></td></tr></table></figure><p>查看当前可用的源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum repolist</span><br></pre></td></tr></table></figure><p>清除缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure><h3 id="3-2安装JDK"><a href="#3-2安装JDK" class="headerlink" title="3.2安装JDK"></a><strong>3.2安装JDK</strong></h3><p><strong>批量安装命令，安装cm自带的jdk</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh ssh_do_all.sh node.list yum -y install oracle-j2sdk1.8-1.8.0+update181-1.x86_64</span><br></pre></td></tr></table></figure><p><strong>Jdk环境变量配置</strong></p><p>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>配置内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_181-clouderaexport CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><p>复制到其他服务节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh scp_do_all.sh node.list /etc/profile /etc/</span><br></pre></td></tr></table></figure><p>重新加载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profilesh ssh_do_all.sh node.list source /etc/profile</span><br></pre></td></tr></table></figure><p><strong>卸载旧版jdk</strong></p><p>确定JDK的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep jdkrpm -qa | grep gcj</span><br></pre></td></tr></table></figure><p>查看的结果是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libgcj-4.1.2-42.el5 java-1.4.2-gcj-compat-1.4.2.0-40jpp.115 java-1.8.0-openjdk-headless-1.8.0.242.b08-0.el7_7.x86_64</span><br></pre></td></tr></table></figure><p>2.然后卸载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove java-1.8.0-openjdk-headless-1.8.0.242.b08-0.el7_7.x86_64</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh ssh_do_all.sh node.list yum -y remove java-1.8.0-openjdk-headless-1.8.0.242.b08-0.el7_7.x86_64</span><br></pre></td></tr></table></figure><p>如果这种方法不行，可以使用如下的方法卸载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1）卸载系统自带的jdk版本：    查看自带的jdk：    #rpm -qa|grep gcj    可能看到如下类似的信息：    libgcj-4.1.2-44.el5    java-1.4.2-gcj-compat-1.4.2.0-40jpp.115    使用rpm -e --nodeps 命令删除上面查找的内容：    #rpm -e –nodeps java-1.4.2-gcj-compat-1.4.2.0-40jpp.115 2）卸载rpm安装的jkd版本    查看安装的jdk：    #rpm -qa|grep jdk    可能看到如下类似的信息：    jdk-1.6.0_22-fcs    卸载：    #rpm -e --nodeps jdk-1.6.0_22-fcs    3）找到jdk安装目录的_uninst子目录·在shell终端执行命令./uninstall.sh即可卸载jdk</span><br></pre></td></tr></table></figure><h3 id="3-2安装Cloudera-Manager"><a href="#3-2安装Cloudera-Manager" class="headerlink" title="3.2安装Cloudera Manager"></a>3.2安装Cloudera Manager</h3><h4 id="3-3-1Cloudera-Manager-Server安装"><a href="#3-3-1Cloudera-Manager-Server安装" class="headerlink" title="3.3.1Cloudera Manager Server安装"></a>3.3.1Cloudera Manager Server安装</h4><p><strong>通过yum安装Cloudera Manager Server</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install cloudera-manager-server</span><br></pre></td></tr></table></figure><p><strong>初始化数据库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/cloudera/cm/schema/scm_prepare_database.sh -h192.168.18.188 --scm-host 192.168.18.188  mysql cdh_cm root 12345678</span><br></pre></td></tr></table></figure><p>启动CM server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start cloudera-scm-serversystemctl status cloudera-scm-serversystemctl stop cloudera-scm-server#开机启动systemctl enablecloudera-scm-server</span><br></pre></td></tr></table></figure><h4 id="3-3-2Cloudera-Manager-Agent安装"><a href="#3-3-2Cloudera-Manager-Agent安装" class="headerlink" title="3.3.2Cloudera Manager Agent安装"></a>3.3.2Cloudera Manager Agent安装</h4><p>注意：此步骤可以忽略，让cm管理平台自动安装，所有节点都要安装</p><p><strong>通过yum安装Cloudera Manager Agent</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install cloudera-manager-agent</span><br></pre></td></tr></table></figure><p>启动CM agent</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start cloudera-scm-agentsystemctl status cloudera-scm-agentsystemctl stop cloudera-scm-agent#开机启动systemctl enablecloudera-scm-agent</span><br></pre></td></tr></table></figure><h3 id="3-4CDH安装"><a href="#3-4CDH安装" class="headerlink" title="3.4CDH安装"></a>3.4CDH安装</h3><h4 id="3-4-1CDH集群安装向导"><a href="#3-4-1CDH集群安装向导" class="headerlink" title="3.4.1CDH集群安装向导"></a>3.4.1CDH集群安装向导</h4><ol><li>admin/admin登录到CM</li></ol><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-104108.png" alt="image-20201218184108146"></p><ol start="2"><li>同意license协议，点击继续</li></ol><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-104142.png" alt="image-20201218184142222"> </p><ol start="3"><li>选择60试用，点击继续</li></ol><p>或者直接选择免费开源版</p><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-104211.png" alt="image-20201218184210795"> </p><ol start="4"><li><p>点击“继续”systemctl restart cloudera-scm-agent</p></li><li><p>点击“继续”，输入集群名称，可以使用默认的“Cluster 1”。<img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-104617.png" alt="image-20201218184617448"></p></li><li><p>输入主机IP或者名称，点击搜索找到主机后点击继续</p></li></ol><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-105241.png" alt="image-20201218185241734"> </p><ol start="7"><li>选择自定义存储库，输入cm的http地址</li></ol><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-105737.png" alt="image-20201218185736690"></p><p>​    “CDH and other software”中选择“使用 Parcel (建议)”，点击“ 更多选项”，点击“-”删除其它所有地址，输入<a href="http://172.31.13.38/cdh6.3%EF%BC%8C%E7%82%B9%E5%87%BB%E2%80%9C%E4%BF%9D%E5%AD%98%E6%9B%B4%E6%94%B9%E2%80%9D">http://172.31.13.38/cdh6.3，点击“保存更改”</a></p><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-105802.png" alt="image-20201218185802276"></p><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-105701.png" alt="image-20201218185701280"></p><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-105824.png" alt="image-20201218185823920"> </p><ol start="8"><li>点击“继续”，进入下一步安装jdk</li></ol><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-105844.png" alt="image-20201218185843668"> </p><ol start="9"><li>点击“继续”，进入下一步配置ssh账号密码</li></ol><p>相同密码：</p><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-110046.png" alt="image-20201218190045292"></p><p>公钥：</p><p>把主节点的私钥上传到上面</p><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-110016.png" alt="image-20201218190015817"> </p><ol start="10"><li>点击“继续”，进入下一步，安装Cloudera Manager相关到各个节点</li></ol><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-111631.png" alt="image-20201218191631172"></p><p>等待Agent安装完毕后，自动跳转到下一步开始分发Parcel</p><ol start="11"><li>点击“继续”，进入下一步安装cdh到各个节点</li></ol><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-111919.png" alt="image-20201218191918499">  </p><ol start="12"><li>点击Inspect Network Performance和Inspect Hosts，检查主机</li></ol><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-112217.png" alt="image-20201218192216561"></p><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-112804.png" alt="image-20201218192803823"></p><p>如果有错误或者黄色警告，查看“显示检查器结果”，并逐项解决，然后“重新运行”检查，直到所有的检查都通过，否则没办法点击继续下一步。</p><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-16-105311.jpg" alt="img"> </p><h4 id="3-4-2集群设置安装向导"><a href="#3-4-2集群设置安装向导" class="headerlink" title="3.4.2集群设置安装向导"></a>3.4.2集群设置安装向导</h4><ol><li>选择需要安装的服务，根据需要选择，这里随便选择Data Warehouse，也可以自定义服务</li></ol><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-112842.png" alt="image-20201218192842308"> </p><ol start="2"><li>点击“继续”，进入集群角色分配，一台机器作为管理节点，另外三台机器作为DataNode</li></ol><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-113312.png" alt="image-20201218193311827"> </p><p> <img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-113334.png" alt="image-20201218193333666"> </p><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-113356.png" alt="image-20201218193355609"> </p><p>注意：Activity Monitor和Telemetry Publisher不用选择任何主机，留空，即不安装，因为用不到。</p><ol start="3"><li>点击“继续”，进入下一步，测试数据库连接 </li></ol><p> <img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-113700.png" alt="image-20201218193700316"></p><ol start="4"><li>测试成功，点击“继续”，进入目录设置，此处使用默认默认目录，根据实际情况进行目录修改</li></ol><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-113835.png" alt="image-20201218193835544"> </p><p> <img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-113856.png" alt="image-20201218193856136"></p><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-113929.png" alt="image-20201218193928980"></p><ol start="5"><li>点击“继续”，进入各个服务启动</li></ol><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-114020.png" alt="image-20201218194019588"></p><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-114520.png" alt="image-20201218194519450"> </p><ol start="6"><li>安装成功后进入home管理界面</li></ol><p> <img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-114547.png" alt="image-20201218194546958"></p><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-114611.png" alt="image-20201218194611270"> </p><h4 id="3-4-3组件版本检查"><a href="#3-4-3组件版本检查" class="headerlink" title="3.4.3组件版本检查"></a>3.4.3组件版本检查</h4><p><img src="https://allen-bigdata-1252101235.cos.ap-guangzhou.myqcloud.com/2020-12-18-130202.png" alt="image-20201218210201486"> </p><p>可以看到Hadoop3.0，Flume1.9，HBase2.1，Hive2.1.1，Spark2.4，Hue4.2.0，Impala3.2，Kafka2.2.1，Kudu1.0，Oozie5.1，Pig0.17，Senty2.1，Solr7.4，Sqoop1.4.7，Zookeeper3.4.5等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CDH6-3-2-安装&quot;&gt;&lt;a href=&quot;#CDH6-3-2-安装&quot; class=&quot;headerlink&quot; title=&quot;CDH6.3.2 安装&quot;&gt;&lt;/a&gt;CDH6.3.2 安装&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;1-安装说明&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="大数据" scheme="http://liujun1997.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="大数据" scheme="http://liujun1997.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
</feed>
